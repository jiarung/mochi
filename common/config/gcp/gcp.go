// Code generated by cobctl. This go file is generated automatically, DO NOT EDIT.

package gcp

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/cobinhood/cobinhood-backend/cache/cacher"
)

// --------------------------------------
// GCP_BQ_ADMIN_CREDENTIALS_PATH
// --------------------------------------
var (
	gcpBqAdminCredentialsPathStr = os.Getenv("GCP_BQ_ADMIN_CREDENTIALS_PATH")

	gcpBqAdminCredentialsPathIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpBqAdminCredentialsPathStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpBqAdminCredentialsPathStr))
		}
		val := int(v)
		return &val
	})
	gcpBqAdminCredentialsPathInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpBqAdminCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpBqAdminCredentialsPathStr))
		}
		val := int64(v)
		return &val
	})
	gcpBqAdminCredentialsPathUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpBqAdminCredentialsPathStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpBqAdminCredentialsPathStr))
		}
		val := uint(v)
		return &val
	})
	gcpBqAdminCredentialsPathBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpBqAdminCredentialsPathStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpBqAdminCredentialsPathStr))
		}
		return &v
	})
	gcpBqAdminCredentialsPathMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpBqAdminCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpBqAdminCredentialsPathStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpBqAdminCredentialsPath returns the cached GCP_BQ_ADMIN_CREDENTIALS_PATH variable.
func GcpBqAdminCredentialsPath() string {
	return gcpBqAdminCredentialsPathStr
}

// GcpBqAdminCredentialsPathInt returns the cached int of GCP_BQ_ADMIN_CREDENTIALS_PATH variable.
func GcpBqAdminCredentialsPathInt() int {
	return *((gcpBqAdminCredentialsPathIntCacher.Get()).(*int))
}

// GcpBqAdminCredentialsPathInt64 returns the cached int64 of GCP_BQ_ADMIN_CREDENTIALS_PATH variable.
func GcpBqAdminCredentialsPathInt64() int64 {
	return *((gcpBqAdminCredentialsPathInt64Cacher.Get()).(*int64))
}

// GcpBqAdminCredentialsPathUint returns the cached uint of GCP_BQ_ADMIN_CREDENTIALS_PATH variable.
func GcpBqAdminCredentialsPathUint() uint {
	return *((gcpBqAdminCredentialsPathUintCacher.Get()).(*uint))
}

// GcpBqAdminCredentialsPathBool returns the cached bool of GCP_BQ_ADMIN_CREDENTIALS_PATH variable.
func GcpBqAdminCredentialsPathBool() bool {
	return *((gcpBqAdminCredentialsPathBoolCacher.Get()).(*bool))
}

// GcpBqAdminCredentialsPathMs returns the cached millisecond of GCP_BQ_ADMIN_CREDENTIALS_PATH variable.
func GcpBqAdminCredentialsPathMs() time.Duration {
	return *((gcpBqAdminCredentialsPathMsCacher.Get()).(*time.Duration))
}

// SetGcpBqAdminCredentialsPath sets the cached value.
func SetGcpBqAdminCredentialsPath(v string) {
	gcpBqAdminCredentialsPathStr = v
	gcpBqAdminCredentialsPathIntCacher.Clear()
	gcpBqAdminCredentialsPathInt64Cacher.Clear()
	gcpBqAdminCredentialsPathUintCacher.Clear()
	gcpBqAdminCredentialsPathBoolCacher.Clear()
	gcpBqAdminCredentialsPathMsCacher.Clear()
}

// --------------------------------------
// GCP_GCS_BUCKET_NAME
// --------------------------------------
var (
	gcpGcsBucketNameStr = os.Getenv("GCP_GCS_BUCKET_NAME")

	gcpGcsBucketNameIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsBucketNameStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpGcsBucketNameStr))
		}
		val := int(v)
		return &val
	})
	gcpGcsBucketNameInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsBucketNameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpGcsBucketNameStr))
		}
		val := int64(v)
		return &val
	})
	gcpGcsBucketNameUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpGcsBucketNameStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpGcsBucketNameStr))
		}
		val := uint(v)
		return &val
	})
	gcpGcsBucketNameBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpGcsBucketNameStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpGcsBucketNameStr))
		}
		return &v
	})
	gcpGcsBucketNameMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsBucketNameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpGcsBucketNameStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpGcsBucketName returns the cached GCP_GCS_BUCKET_NAME variable.
func GcpGcsBucketName() string {
	return gcpGcsBucketNameStr
}

// GcpGcsBucketNameInt returns the cached int of GCP_GCS_BUCKET_NAME variable.
func GcpGcsBucketNameInt() int {
	return *((gcpGcsBucketNameIntCacher.Get()).(*int))
}

// GcpGcsBucketNameInt64 returns the cached int64 of GCP_GCS_BUCKET_NAME variable.
func GcpGcsBucketNameInt64() int64 {
	return *((gcpGcsBucketNameInt64Cacher.Get()).(*int64))
}

// GcpGcsBucketNameUint returns the cached uint of GCP_GCS_BUCKET_NAME variable.
func GcpGcsBucketNameUint() uint {
	return *((gcpGcsBucketNameUintCacher.Get()).(*uint))
}

// GcpGcsBucketNameBool returns the cached bool of GCP_GCS_BUCKET_NAME variable.
func GcpGcsBucketNameBool() bool {
	return *((gcpGcsBucketNameBoolCacher.Get()).(*bool))
}

// GcpGcsBucketNameMs returns the cached millisecond of GCP_GCS_BUCKET_NAME variable.
func GcpGcsBucketNameMs() time.Duration {
	return *((gcpGcsBucketNameMsCacher.Get()).(*time.Duration))
}

// SetGcpGcsBucketName sets the cached value.
func SetGcpGcsBucketName(v string) {
	gcpGcsBucketNameStr = v
	gcpGcsBucketNameIntCacher.Clear()
	gcpGcsBucketNameInt64Cacher.Clear()
	gcpGcsBucketNameUintCacher.Clear()
	gcpGcsBucketNameBoolCacher.Clear()
	gcpGcsBucketNameMsCacher.Clear()
}

// --------------------------------------
// GCP_GCS_FULLNODE_BUCKET_NAME
// --------------------------------------
var (
	gcpGcsFullnodeBucketNameStr = os.Getenv("GCP_GCS_FULLNODE_BUCKET_NAME")

	gcpGcsFullnodeBucketNameIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsFullnodeBucketNameStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpGcsFullnodeBucketNameStr))
		}
		val := int(v)
		return &val
	})
	gcpGcsFullnodeBucketNameInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsFullnodeBucketNameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpGcsFullnodeBucketNameStr))
		}
		val := int64(v)
		return &val
	})
	gcpGcsFullnodeBucketNameUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpGcsFullnodeBucketNameStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpGcsFullnodeBucketNameStr))
		}
		val := uint(v)
		return &val
	})
	gcpGcsFullnodeBucketNameBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpGcsFullnodeBucketNameStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpGcsFullnodeBucketNameStr))
		}
		return &v
	})
	gcpGcsFullnodeBucketNameMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsFullnodeBucketNameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpGcsFullnodeBucketNameStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpGcsFullnodeBucketName returns the cached GCP_GCS_FULLNODE_BUCKET_NAME variable.
func GcpGcsFullnodeBucketName() string {
	return gcpGcsFullnodeBucketNameStr
}

// GcpGcsFullnodeBucketNameInt returns the cached int of GCP_GCS_FULLNODE_BUCKET_NAME variable.
func GcpGcsFullnodeBucketNameInt() int {
	return *((gcpGcsFullnodeBucketNameIntCacher.Get()).(*int))
}

// GcpGcsFullnodeBucketNameInt64 returns the cached int64 of GCP_GCS_FULLNODE_BUCKET_NAME variable.
func GcpGcsFullnodeBucketNameInt64() int64 {
	return *((gcpGcsFullnodeBucketNameInt64Cacher.Get()).(*int64))
}

// GcpGcsFullnodeBucketNameUint returns the cached uint of GCP_GCS_FULLNODE_BUCKET_NAME variable.
func GcpGcsFullnodeBucketNameUint() uint {
	return *((gcpGcsFullnodeBucketNameUintCacher.Get()).(*uint))
}

// GcpGcsFullnodeBucketNameBool returns the cached bool of GCP_GCS_FULLNODE_BUCKET_NAME variable.
func GcpGcsFullnodeBucketNameBool() bool {
	return *((gcpGcsFullnodeBucketNameBoolCacher.Get()).(*bool))
}

// GcpGcsFullnodeBucketNameMs returns the cached millisecond of GCP_GCS_FULLNODE_BUCKET_NAME variable.
func GcpGcsFullnodeBucketNameMs() time.Duration {
	return *((gcpGcsFullnodeBucketNameMsCacher.Get()).(*time.Duration))
}

// SetGcpGcsFullnodeBucketName sets the cached value.
func SetGcpGcsFullnodeBucketName(v string) {
	gcpGcsFullnodeBucketNameStr = v
	gcpGcsFullnodeBucketNameIntCacher.Clear()
	gcpGcsFullnodeBucketNameInt64Cacher.Clear()
	gcpGcsFullnodeBucketNameUintCacher.Clear()
	gcpGcsFullnodeBucketNameBoolCacher.Clear()
	gcpGcsFullnodeBucketNameMsCacher.Clear()
}

// --------------------------------------
// GCP_GCS_USER_CREDENTIALS_PATH
// --------------------------------------
var (
	gcpGcsUserCredentialsPathStr = os.Getenv("GCP_GCS_USER_CREDENTIALS_PATH")

	gcpGcsUserCredentialsPathIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsUserCredentialsPathStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpGcsUserCredentialsPathStr))
		}
		val := int(v)
		return &val
	})
	gcpGcsUserCredentialsPathInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsUserCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpGcsUserCredentialsPathStr))
		}
		val := int64(v)
		return &val
	})
	gcpGcsUserCredentialsPathUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpGcsUserCredentialsPathStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpGcsUserCredentialsPathStr))
		}
		val := uint(v)
		return &val
	})
	gcpGcsUserCredentialsPathBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpGcsUserCredentialsPathStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpGcsUserCredentialsPathStr))
		}
		return &v
	})
	gcpGcsUserCredentialsPathMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpGcsUserCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpGcsUserCredentialsPathStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpGcsUserCredentialsPath returns the cached GCP_GCS_USER_CREDENTIALS_PATH variable.
func GcpGcsUserCredentialsPath() string {
	return gcpGcsUserCredentialsPathStr
}

// GcpGcsUserCredentialsPathInt returns the cached int of GCP_GCS_USER_CREDENTIALS_PATH variable.
func GcpGcsUserCredentialsPathInt() int {
	return *((gcpGcsUserCredentialsPathIntCacher.Get()).(*int))
}

// GcpGcsUserCredentialsPathInt64 returns the cached int64 of GCP_GCS_USER_CREDENTIALS_PATH variable.
func GcpGcsUserCredentialsPathInt64() int64 {
	return *((gcpGcsUserCredentialsPathInt64Cacher.Get()).(*int64))
}

// GcpGcsUserCredentialsPathUint returns the cached uint of GCP_GCS_USER_CREDENTIALS_PATH variable.
func GcpGcsUserCredentialsPathUint() uint {
	return *((gcpGcsUserCredentialsPathUintCacher.Get()).(*uint))
}

// GcpGcsUserCredentialsPathBool returns the cached bool of GCP_GCS_USER_CREDENTIALS_PATH variable.
func GcpGcsUserCredentialsPathBool() bool {
	return *((gcpGcsUserCredentialsPathBoolCacher.Get()).(*bool))
}

// GcpGcsUserCredentialsPathMs returns the cached millisecond of GCP_GCS_USER_CREDENTIALS_PATH variable.
func GcpGcsUserCredentialsPathMs() time.Duration {
	return *((gcpGcsUserCredentialsPathMsCacher.Get()).(*time.Duration))
}

// SetGcpGcsUserCredentialsPath sets the cached value.
func SetGcpGcsUserCredentialsPath(v string) {
	gcpGcsUserCredentialsPathStr = v
	gcpGcsUserCredentialsPathIntCacher.Clear()
	gcpGcsUserCredentialsPathInt64Cacher.Clear()
	gcpGcsUserCredentialsPathUintCacher.Clear()
	gcpGcsUserCredentialsPathBoolCacher.Clear()
	gcpGcsUserCredentialsPathMsCacher.Clear()
}

// --------------------------------------
// GCP_DATASTORE_USER_CREDENTIALS_PATH
// --------------------------------------
var (
	gcpDatastoreUserCredentialsPathStr = os.Getenv("GCP_DATASTORE_USER_CREDENTIALS_PATH")

	gcpDatastoreUserCredentialsPathIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpDatastoreUserCredentialsPathStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpDatastoreUserCredentialsPathStr))
		}
		val := int(v)
		return &val
	})
	gcpDatastoreUserCredentialsPathInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpDatastoreUserCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpDatastoreUserCredentialsPathStr))
		}
		val := int64(v)
		return &val
	})
	gcpDatastoreUserCredentialsPathUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpDatastoreUserCredentialsPathStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpDatastoreUserCredentialsPathStr))
		}
		val := uint(v)
		return &val
	})
	gcpDatastoreUserCredentialsPathBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpDatastoreUserCredentialsPathStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpDatastoreUserCredentialsPathStr))
		}
		return &v
	})
	gcpDatastoreUserCredentialsPathMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpDatastoreUserCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpDatastoreUserCredentialsPathStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpDatastoreUserCredentialsPath returns the cached GCP_DATASTORE_USER_CREDENTIALS_PATH variable.
func GcpDatastoreUserCredentialsPath() string {
	return gcpDatastoreUserCredentialsPathStr
}

// GcpDatastoreUserCredentialsPathInt returns the cached int of GCP_DATASTORE_USER_CREDENTIALS_PATH variable.
func GcpDatastoreUserCredentialsPathInt() int {
	return *((gcpDatastoreUserCredentialsPathIntCacher.Get()).(*int))
}

// GcpDatastoreUserCredentialsPathInt64 returns the cached int64 of GCP_DATASTORE_USER_CREDENTIALS_PATH variable.
func GcpDatastoreUserCredentialsPathInt64() int64 {
	return *((gcpDatastoreUserCredentialsPathInt64Cacher.Get()).(*int64))
}

// GcpDatastoreUserCredentialsPathUint returns the cached uint of GCP_DATASTORE_USER_CREDENTIALS_PATH variable.
func GcpDatastoreUserCredentialsPathUint() uint {
	return *((gcpDatastoreUserCredentialsPathUintCacher.Get()).(*uint))
}

// GcpDatastoreUserCredentialsPathBool returns the cached bool of GCP_DATASTORE_USER_CREDENTIALS_PATH variable.
func GcpDatastoreUserCredentialsPathBool() bool {
	return *((gcpDatastoreUserCredentialsPathBoolCacher.Get()).(*bool))
}

// GcpDatastoreUserCredentialsPathMs returns the cached millisecond of GCP_DATASTORE_USER_CREDENTIALS_PATH variable.
func GcpDatastoreUserCredentialsPathMs() time.Duration {
	return *((gcpDatastoreUserCredentialsPathMsCacher.Get()).(*time.Duration))
}

// SetGcpDatastoreUserCredentialsPath sets the cached value.
func SetGcpDatastoreUserCredentialsPath(v string) {
	gcpDatastoreUserCredentialsPathStr = v
	gcpDatastoreUserCredentialsPathIntCacher.Clear()
	gcpDatastoreUserCredentialsPathInt64Cacher.Clear()
	gcpDatastoreUserCredentialsPathUintCacher.Clear()
	gcpDatastoreUserCredentialsPathBoolCacher.Clear()
	gcpDatastoreUserCredentialsPathMsCacher.Clear()
}

// --------------------------------------
// GCP_INGRESS_IP
// --------------------------------------
var (
	gcpIngressIpStr = os.Getenv("GCP_INGRESS_IP")

	gcpIngressIpIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpIngressIpStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpIngressIpStr))
		}
		val := int(v)
		return &val
	})
	gcpIngressIpInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpIngressIpStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpIngressIpStr))
		}
		val := int64(v)
		return &val
	})
	gcpIngressIpUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpIngressIpStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpIngressIpStr))
		}
		val := uint(v)
		return &val
	})
	gcpIngressIpBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpIngressIpStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpIngressIpStr))
		}
		return &v
	})
	gcpIngressIpMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpIngressIpStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpIngressIpStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpIngressIp returns the cached GCP_INGRESS_IP variable.
func GcpIngressIp() string {
	return gcpIngressIpStr
}

// GcpIngressIpInt returns the cached int of GCP_INGRESS_IP variable.
func GcpIngressIpInt() int {
	return *((gcpIngressIpIntCacher.Get()).(*int))
}

// GcpIngressIpInt64 returns the cached int64 of GCP_INGRESS_IP variable.
func GcpIngressIpInt64() int64 {
	return *((gcpIngressIpInt64Cacher.Get()).(*int64))
}

// GcpIngressIpUint returns the cached uint of GCP_INGRESS_IP variable.
func GcpIngressIpUint() uint {
	return *((gcpIngressIpUintCacher.Get()).(*uint))
}

// GcpIngressIpBool returns the cached bool of GCP_INGRESS_IP variable.
func GcpIngressIpBool() bool {
	return *((gcpIngressIpBoolCacher.Get()).(*bool))
}

// GcpIngressIpMs returns the cached millisecond of GCP_INGRESS_IP variable.
func GcpIngressIpMs() time.Duration {
	return *((gcpIngressIpMsCacher.Get()).(*time.Duration))
}

// SetGcpIngressIp sets the cached value.
func SetGcpIngressIp(v string) {
	gcpIngressIpStr = v
	gcpIngressIpIntCacher.Clear()
	gcpIngressIpInt64Cacher.Clear()
	gcpIngressIpUintCacher.Clear()
	gcpIngressIpBoolCacher.Clear()
	gcpIngressIpMsCacher.Clear()
}

// --------------------------------------
// GCP_KMS_KEY_RING
// --------------------------------------
var (
	gcpKmsKeyRingStr = os.Getenv("GCP_KMS_KEY_RING")

	gcpKmsKeyRingIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpKmsKeyRingStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpKmsKeyRingStr))
		}
		val := int(v)
		return &val
	})
	gcpKmsKeyRingInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpKmsKeyRingStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpKmsKeyRingStr))
		}
		val := int64(v)
		return &val
	})
	gcpKmsKeyRingUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpKmsKeyRingStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpKmsKeyRingStr))
		}
		val := uint(v)
		return &val
	})
	gcpKmsKeyRingBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpKmsKeyRingStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpKmsKeyRingStr))
		}
		return &v
	})
	gcpKmsKeyRingMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpKmsKeyRingStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpKmsKeyRingStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpKmsKeyRing returns the cached GCP_KMS_KEY_RING variable.
func GcpKmsKeyRing() string {
	return gcpKmsKeyRingStr
}

// GcpKmsKeyRingInt returns the cached int of GCP_KMS_KEY_RING variable.
func GcpKmsKeyRingInt() int {
	return *((gcpKmsKeyRingIntCacher.Get()).(*int))
}

// GcpKmsKeyRingInt64 returns the cached int64 of GCP_KMS_KEY_RING variable.
func GcpKmsKeyRingInt64() int64 {
	return *((gcpKmsKeyRingInt64Cacher.Get()).(*int64))
}

// GcpKmsKeyRingUint returns the cached uint of GCP_KMS_KEY_RING variable.
func GcpKmsKeyRingUint() uint {
	return *((gcpKmsKeyRingUintCacher.Get()).(*uint))
}

// GcpKmsKeyRingBool returns the cached bool of GCP_KMS_KEY_RING variable.
func GcpKmsKeyRingBool() bool {
	return *((gcpKmsKeyRingBoolCacher.Get()).(*bool))
}

// GcpKmsKeyRingMs returns the cached millisecond of GCP_KMS_KEY_RING variable.
func GcpKmsKeyRingMs() time.Duration {
	return *((gcpKmsKeyRingMsCacher.Get()).(*time.Duration))
}

// SetGcpKmsKeyRing sets the cached value.
func SetGcpKmsKeyRing(v string) {
	gcpKmsKeyRingStr = v
	gcpKmsKeyRingIntCacher.Clear()
	gcpKmsKeyRingInt64Cacher.Clear()
	gcpKmsKeyRingUintCacher.Clear()
	gcpKmsKeyRingBoolCacher.Clear()
	gcpKmsKeyRingMsCacher.Clear()
}

// --------------------------------------
// GCP_KMS_USER_CREDENTIALS_PATH
// --------------------------------------
var (
	gcpKmsUserCredentialsPathStr = os.Getenv("GCP_KMS_USER_CREDENTIALS_PATH")

	gcpKmsUserCredentialsPathIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpKmsUserCredentialsPathStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpKmsUserCredentialsPathStr))
		}
		val := int(v)
		return &val
	})
	gcpKmsUserCredentialsPathInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpKmsUserCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpKmsUserCredentialsPathStr))
		}
		val := int64(v)
		return &val
	})
	gcpKmsUserCredentialsPathUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpKmsUserCredentialsPathStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpKmsUserCredentialsPathStr))
		}
		val := uint(v)
		return &val
	})
	gcpKmsUserCredentialsPathBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpKmsUserCredentialsPathStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpKmsUserCredentialsPathStr))
		}
		return &v
	})
	gcpKmsUserCredentialsPathMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpKmsUserCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpKmsUserCredentialsPathStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpKmsUserCredentialsPath returns the cached GCP_KMS_USER_CREDENTIALS_PATH variable.
func GcpKmsUserCredentialsPath() string {
	return gcpKmsUserCredentialsPathStr
}

// GcpKmsUserCredentialsPathInt returns the cached int of GCP_KMS_USER_CREDENTIALS_PATH variable.
func GcpKmsUserCredentialsPathInt() int {
	return *((gcpKmsUserCredentialsPathIntCacher.Get()).(*int))
}

// GcpKmsUserCredentialsPathInt64 returns the cached int64 of GCP_KMS_USER_CREDENTIALS_PATH variable.
func GcpKmsUserCredentialsPathInt64() int64 {
	return *((gcpKmsUserCredentialsPathInt64Cacher.Get()).(*int64))
}

// GcpKmsUserCredentialsPathUint returns the cached uint of GCP_KMS_USER_CREDENTIALS_PATH variable.
func GcpKmsUserCredentialsPathUint() uint {
	return *((gcpKmsUserCredentialsPathUintCacher.Get()).(*uint))
}

// GcpKmsUserCredentialsPathBool returns the cached bool of GCP_KMS_USER_CREDENTIALS_PATH variable.
func GcpKmsUserCredentialsPathBool() bool {
	return *((gcpKmsUserCredentialsPathBoolCacher.Get()).(*bool))
}

// GcpKmsUserCredentialsPathMs returns the cached millisecond of GCP_KMS_USER_CREDENTIALS_PATH variable.
func GcpKmsUserCredentialsPathMs() time.Duration {
	return *((gcpKmsUserCredentialsPathMsCacher.Get()).(*time.Duration))
}

// SetGcpKmsUserCredentialsPath sets the cached value.
func SetGcpKmsUserCredentialsPath(v string) {
	gcpKmsUserCredentialsPathStr = v
	gcpKmsUserCredentialsPathIntCacher.Clear()
	gcpKmsUserCredentialsPathInt64Cacher.Clear()
	gcpKmsUserCredentialsPathUintCacher.Clear()
	gcpKmsUserCredentialsPathBoolCacher.Clear()
	gcpKmsUserCredentialsPathMsCacher.Clear()
}

// --------------------------------------
// GCP_SQL_ADMIN_CREDENTIALS_PATH
// --------------------------------------
var (
	gcpSqlAdminCredentialsPathStr = os.Getenv("GCP_SQL_ADMIN_CREDENTIALS_PATH")

	gcpSqlAdminCredentialsPathIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpSqlAdminCredentialsPathStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpSqlAdminCredentialsPathStr))
		}
		val := int(v)
		return &val
	})
	gcpSqlAdminCredentialsPathInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpSqlAdminCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gcpSqlAdminCredentialsPathStr))
		}
		val := int64(v)
		return &val
	})
	gcpSqlAdminCredentialsPathUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gcpSqlAdminCredentialsPathStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gcpSqlAdminCredentialsPathStr))
		}
		val := uint(v)
		return &val
	})
	gcpSqlAdminCredentialsPathBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gcpSqlAdminCredentialsPathStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gcpSqlAdminCredentialsPathStr))
		}
		return &v
	})
	gcpSqlAdminCredentialsPathMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gcpSqlAdminCredentialsPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gcpSqlAdminCredentialsPathStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GcpSqlAdminCredentialsPath returns the cached GCP_SQL_ADMIN_CREDENTIALS_PATH variable.
func GcpSqlAdminCredentialsPath() string {
	return gcpSqlAdminCredentialsPathStr
}

// GcpSqlAdminCredentialsPathInt returns the cached int of GCP_SQL_ADMIN_CREDENTIALS_PATH variable.
func GcpSqlAdminCredentialsPathInt() int {
	return *((gcpSqlAdminCredentialsPathIntCacher.Get()).(*int))
}

// GcpSqlAdminCredentialsPathInt64 returns the cached int64 of GCP_SQL_ADMIN_CREDENTIALS_PATH variable.
func GcpSqlAdminCredentialsPathInt64() int64 {
	return *((gcpSqlAdminCredentialsPathInt64Cacher.Get()).(*int64))
}

// GcpSqlAdminCredentialsPathUint returns the cached uint of GCP_SQL_ADMIN_CREDENTIALS_PATH variable.
func GcpSqlAdminCredentialsPathUint() uint {
	return *((gcpSqlAdminCredentialsPathUintCacher.Get()).(*uint))
}

// GcpSqlAdminCredentialsPathBool returns the cached bool of GCP_SQL_ADMIN_CREDENTIALS_PATH variable.
func GcpSqlAdminCredentialsPathBool() bool {
	return *((gcpSqlAdminCredentialsPathBoolCacher.Get()).(*bool))
}

// GcpSqlAdminCredentialsPathMs returns the cached millisecond of GCP_SQL_ADMIN_CREDENTIALS_PATH variable.
func GcpSqlAdminCredentialsPathMs() time.Duration {
	return *((gcpSqlAdminCredentialsPathMsCacher.Get()).(*time.Duration))
}

// SetGcpSqlAdminCredentialsPath sets the cached value.
func SetGcpSqlAdminCredentialsPath(v string) {
	gcpSqlAdminCredentialsPathStr = v
	gcpSqlAdminCredentialsPathIntCacher.Clear()
	gcpSqlAdminCredentialsPathInt64Cacher.Clear()
	gcpSqlAdminCredentialsPathUintCacher.Clear()
	gcpSqlAdminCredentialsPathBoolCacher.Clear()
	gcpSqlAdminCredentialsPathMsCacher.Clear()
}
