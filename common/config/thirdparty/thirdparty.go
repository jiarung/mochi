// Code generated by cobctl. This go file is generated automatically, DO NOT EDIT.

package thirdparty

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/cobinhood/cobinhood-backend/cache/cacher"
)

// --------------------------------------
// CURRENCYLAYER_URL_PREFIX
// --------------------------------------
var (
	currencylayerUrlPrefixStr = os.Getenv("CURRENCYLAYER_URL_PREFIX")

	currencylayerUrlPrefixIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencylayerUrlPrefixStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", currencylayerUrlPrefixStr))
		}
		val := int(v)
		return &val
	})
	currencylayerUrlPrefixInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencylayerUrlPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", currencylayerUrlPrefixStr))
		}
		val := int64(v)
		return &val
	})
	currencylayerUrlPrefixUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(currencylayerUrlPrefixStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", currencylayerUrlPrefixStr))
		}
		val := uint(v)
		return &val
	})
	currencylayerUrlPrefixBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(currencylayerUrlPrefixStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", currencylayerUrlPrefixStr))
		}
		return &v
	})
	currencylayerUrlPrefixMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencylayerUrlPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", currencylayerUrlPrefixStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// CurrencylayerUrlPrefix returns the cached CURRENCYLAYER_URL_PREFIX variable.
func CurrencylayerUrlPrefix() string {
	return currencylayerUrlPrefixStr
}

// CurrencylayerUrlPrefixInt returns the cached int of CURRENCYLAYER_URL_PREFIX variable.
func CurrencylayerUrlPrefixInt() int {
	return *((currencylayerUrlPrefixIntCacher.Get()).(*int))
}

// CurrencylayerUrlPrefixInt64 returns the cached int64 of CURRENCYLAYER_URL_PREFIX variable.
func CurrencylayerUrlPrefixInt64() int64 {
	return *((currencylayerUrlPrefixInt64Cacher.Get()).(*int64))
}

// CurrencylayerUrlPrefixUint returns the cached uint of CURRENCYLAYER_URL_PREFIX variable.
func CurrencylayerUrlPrefixUint() uint {
	return *((currencylayerUrlPrefixUintCacher.Get()).(*uint))
}

// CurrencylayerUrlPrefixBool returns the cached bool of CURRENCYLAYER_URL_PREFIX variable.
func CurrencylayerUrlPrefixBool() bool {
	return *((currencylayerUrlPrefixBoolCacher.Get()).(*bool))
}

// CurrencylayerUrlPrefixMs returns the cached millisecond of CURRENCYLAYER_URL_PREFIX variable.
func CurrencylayerUrlPrefixMs() time.Duration {
	return *((currencylayerUrlPrefixMsCacher.Get()).(*time.Duration))
}

// SetCurrencylayerUrlPrefix sets the cached value.
func SetCurrencylayerUrlPrefix(v string) {
	currencylayerUrlPrefixStr = v
	currencylayerUrlPrefixIntCacher.Clear()
	currencylayerUrlPrefixInt64Cacher.Clear()
	currencylayerUrlPrefixUintCacher.Clear()
	currencylayerUrlPrefixBoolCacher.Clear()
	currencylayerUrlPrefixMsCacher.Clear()
}

// --------------------------------------
// CURRENCYLAYER_ENABLED
// --------------------------------------
var (
	currencylayerEnabledStr = os.Getenv("CURRENCYLAYER_ENABLED")

	currencylayerEnabledIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencylayerEnabledStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", currencylayerEnabledStr))
		}
		val := int(v)
		return &val
	})
	currencylayerEnabledInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencylayerEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", currencylayerEnabledStr))
		}
		val := int64(v)
		return &val
	})
	currencylayerEnabledUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(currencylayerEnabledStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", currencylayerEnabledStr))
		}
		val := uint(v)
		return &val
	})
	currencylayerEnabledBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(currencylayerEnabledStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", currencylayerEnabledStr))
		}
		return &v
	})
	currencylayerEnabledMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencylayerEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", currencylayerEnabledStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// CurrencylayerEnabled returns the cached CURRENCYLAYER_ENABLED variable.
func CurrencylayerEnabled() string {
	return currencylayerEnabledStr
}

// CurrencylayerEnabledInt returns the cached int of CURRENCYLAYER_ENABLED variable.
func CurrencylayerEnabledInt() int {
	return *((currencylayerEnabledIntCacher.Get()).(*int))
}

// CurrencylayerEnabledInt64 returns the cached int64 of CURRENCYLAYER_ENABLED variable.
func CurrencylayerEnabledInt64() int64 {
	return *((currencylayerEnabledInt64Cacher.Get()).(*int64))
}

// CurrencylayerEnabledUint returns the cached uint of CURRENCYLAYER_ENABLED variable.
func CurrencylayerEnabledUint() uint {
	return *((currencylayerEnabledUintCacher.Get()).(*uint))
}

// CurrencylayerEnabledBool returns the cached bool of CURRENCYLAYER_ENABLED variable.
func CurrencylayerEnabledBool() bool {
	return *((currencylayerEnabledBoolCacher.Get()).(*bool))
}

// CurrencylayerEnabledMs returns the cached millisecond of CURRENCYLAYER_ENABLED variable.
func CurrencylayerEnabledMs() time.Duration {
	return *((currencylayerEnabledMsCacher.Get()).(*time.Duration))
}

// SetCurrencylayerEnabled sets the cached value.
func SetCurrencylayerEnabled(v string) {
	currencylayerEnabledStr = v
	currencylayerEnabledIntCacher.Clear()
	currencylayerEnabledInt64Cacher.Clear()
	currencylayerEnabledUintCacher.Clear()
	currencylayerEnabledBoolCacher.Clear()
	currencylayerEnabledMsCacher.Clear()
}

// --------------------------------------
// DOWJONES_RISK_COMPLIANCE_ENDPOINT
// --------------------------------------
var (
	dowjonesRiskComplianceEndpointStr = os.Getenv("DOWJONES_RISK_COMPLIANCE_ENDPOINT")

	dowjonesRiskComplianceEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskComplianceEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dowjonesRiskComplianceEndpointStr))
		}
		val := int(v)
		return &val
	})
	dowjonesRiskComplianceEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskComplianceEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dowjonesRiskComplianceEndpointStr))
		}
		val := int64(v)
		return &val
	})
	dowjonesRiskComplianceEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dowjonesRiskComplianceEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dowjonesRiskComplianceEndpointStr))
		}
		val := uint(v)
		return &val
	})
	dowjonesRiskComplianceEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dowjonesRiskComplianceEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dowjonesRiskComplianceEndpointStr))
		}
		return &v
	})
	dowjonesRiskComplianceEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskComplianceEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dowjonesRiskComplianceEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DowjonesRiskComplianceEndpoint returns the cached DOWJONES_RISK_COMPLIANCE_ENDPOINT variable.
func DowjonesRiskComplianceEndpoint() string {
	return dowjonesRiskComplianceEndpointStr
}

// DowjonesRiskComplianceEndpointInt returns the cached int of DOWJONES_RISK_COMPLIANCE_ENDPOINT variable.
func DowjonesRiskComplianceEndpointInt() int {
	return *((dowjonesRiskComplianceEndpointIntCacher.Get()).(*int))
}

// DowjonesRiskComplianceEndpointInt64 returns the cached int64 of DOWJONES_RISK_COMPLIANCE_ENDPOINT variable.
func DowjonesRiskComplianceEndpointInt64() int64 {
	return *((dowjonesRiskComplianceEndpointInt64Cacher.Get()).(*int64))
}

// DowjonesRiskComplianceEndpointUint returns the cached uint of DOWJONES_RISK_COMPLIANCE_ENDPOINT variable.
func DowjonesRiskComplianceEndpointUint() uint {
	return *((dowjonesRiskComplianceEndpointUintCacher.Get()).(*uint))
}

// DowjonesRiskComplianceEndpointBool returns the cached bool of DOWJONES_RISK_COMPLIANCE_ENDPOINT variable.
func DowjonesRiskComplianceEndpointBool() bool {
	return *((dowjonesRiskComplianceEndpointBoolCacher.Get()).(*bool))
}

// DowjonesRiskComplianceEndpointMs returns the cached millisecond of DOWJONES_RISK_COMPLIANCE_ENDPOINT variable.
func DowjonesRiskComplianceEndpointMs() time.Duration {
	return *((dowjonesRiskComplianceEndpointMsCacher.Get()).(*time.Duration))
}

// SetDowjonesRiskComplianceEndpoint sets the cached value.
func SetDowjonesRiskComplianceEndpoint(v string) {
	dowjonesRiskComplianceEndpointStr = v
	dowjonesRiskComplianceEndpointIntCacher.Clear()
	dowjonesRiskComplianceEndpointInt64Cacher.Clear()
	dowjonesRiskComplianceEndpointUintCacher.Clear()
	dowjonesRiskComplianceEndpointBoolCacher.Clear()
	dowjonesRiskComplianceEndpointMsCacher.Clear()
}

// --------------------------------------
// DOWJONES_RISK_COMPLIANCE_USERNAME
// --------------------------------------
var (
	dowjonesRiskComplianceUsernameStr = os.Getenv("DOWJONES_RISK_COMPLIANCE_USERNAME")

	dowjonesRiskComplianceUsernameIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskComplianceUsernameStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dowjonesRiskComplianceUsernameStr))
		}
		val := int(v)
		return &val
	})
	dowjonesRiskComplianceUsernameInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskComplianceUsernameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dowjonesRiskComplianceUsernameStr))
		}
		val := int64(v)
		return &val
	})
	dowjonesRiskComplianceUsernameUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dowjonesRiskComplianceUsernameStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dowjonesRiskComplianceUsernameStr))
		}
		val := uint(v)
		return &val
	})
	dowjonesRiskComplianceUsernameBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dowjonesRiskComplianceUsernameStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dowjonesRiskComplianceUsernameStr))
		}
		return &v
	})
	dowjonesRiskComplianceUsernameMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskComplianceUsernameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dowjonesRiskComplianceUsernameStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DowjonesRiskComplianceUsername returns the cached DOWJONES_RISK_COMPLIANCE_USERNAME variable.
func DowjonesRiskComplianceUsername() string {
	return dowjonesRiskComplianceUsernameStr
}

// DowjonesRiskComplianceUsernameInt returns the cached int of DOWJONES_RISK_COMPLIANCE_USERNAME variable.
func DowjonesRiskComplianceUsernameInt() int {
	return *((dowjonesRiskComplianceUsernameIntCacher.Get()).(*int))
}

// DowjonesRiskComplianceUsernameInt64 returns the cached int64 of DOWJONES_RISK_COMPLIANCE_USERNAME variable.
func DowjonesRiskComplianceUsernameInt64() int64 {
	return *((dowjonesRiskComplianceUsernameInt64Cacher.Get()).(*int64))
}

// DowjonesRiskComplianceUsernameUint returns the cached uint of DOWJONES_RISK_COMPLIANCE_USERNAME variable.
func DowjonesRiskComplianceUsernameUint() uint {
	return *((dowjonesRiskComplianceUsernameUintCacher.Get()).(*uint))
}

// DowjonesRiskComplianceUsernameBool returns the cached bool of DOWJONES_RISK_COMPLIANCE_USERNAME variable.
func DowjonesRiskComplianceUsernameBool() bool {
	return *((dowjonesRiskComplianceUsernameBoolCacher.Get()).(*bool))
}

// DowjonesRiskComplianceUsernameMs returns the cached millisecond of DOWJONES_RISK_COMPLIANCE_USERNAME variable.
func DowjonesRiskComplianceUsernameMs() time.Duration {
	return *((dowjonesRiskComplianceUsernameMsCacher.Get()).(*time.Duration))
}

// SetDowjonesRiskComplianceUsername sets the cached value.
func SetDowjonesRiskComplianceUsername(v string) {
	dowjonesRiskComplianceUsernameStr = v
	dowjonesRiskComplianceUsernameIntCacher.Clear()
	dowjonesRiskComplianceUsernameInt64Cacher.Clear()
	dowjonesRiskComplianceUsernameUintCacher.Clear()
	dowjonesRiskComplianceUsernameBoolCacher.Clear()
	dowjonesRiskComplianceUsernameMsCacher.Clear()
}

// --------------------------------------
// DOWJONES_RISK_ENABLED
// --------------------------------------
var (
	dowjonesRiskEnabledStr = os.Getenv("DOWJONES_RISK_ENABLED")

	dowjonesRiskEnabledIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskEnabledStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dowjonesRiskEnabledStr))
		}
		val := int(v)
		return &val
	})
	dowjonesRiskEnabledInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dowjonesRiskEnabledStr))
		}
		val := int64(v)
		return &val
	})
	dowjonesRiskEnabledUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dowjonesRiskEnabledStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dowjonesRiskEnabledStr))
		}
		val := uint(v)
		return &val
	})
	dowjonesRiskEnabledBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dowjonesRiskEnabledStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dowjonesRiskEnabledStr))
		}
		return &v
	})
	dowjonesRiskEnabledMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dowjonesRiskEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dowjonesRiskEnabledStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DowjonesRiskEnabled returns the cached DOWJONES_RISK_ENABLED variable.
func DowjonesRiskEnabled() string {
	return dowjonesRiskEnabledStr
}

// DowjonesRiskEnabledInt returns the cached int of DOWJONES_RISK_ENABLED variable.
func DowjonesRiskEnabledInt() int {
	return *((dowjonesRiskEnabledIntCacher.Get()).(*int))
}

// DowjonesRiskEnabledInt64 returns the cached int64 of DOWJONES_RISK_ENABLED variable.
func DowjonesRiskEnabledInt64() int64 {
	return *((dowjonesRiskEnabledInt64Cacher.Get()).(*int64))
}

// DowjonesRiskEnabledUint returns the cached uint of DOWJONES_RISK_ENABLED variable.
func DowjonesRiskEnabledUint() uint {
	return *((dowjonesRiskEnabledUintCacher.Get()).(*uint))
}

// DowjonesRiskEnabledBool returns the cached bool of DOWJONES_RISK_ENABLED variable.
func DowjonesRiskEnabledBool() bool {
	return *((dowjonesRiskEnabledBoolCacher.Get()).(*bool))
}

// DowjonesRiskEnabledMs returns the cached millisecond of DOWJONES_RISK_ENABLED variable.
func DowjonesRiskEnabledMs() time.Duration {
	return *((dowjonesRiskEnabledMsCacher.Get()).(*time.Duration))
}

// SetDowjonesRiskEnabled sets the cached value.
func SetDowjonesRiskEnabled(v string) {
	dowjonesRiskEnabledStr = v
	dowjonesRiskEnabledIntCacher.Clear()
	dowjonesRiskEnabledInt64Cacher.Clear()
	dowjonesRiskEnabledUintCacher.Clear()
	dowjonesRiskEnabledBoolCacher.Clear()
	dowjonesRiskEnabledMsCacher.Clear()
}

// --------------------------------------
// EPAY_ACCOUNT
// --------------------------------------
var (
	epayAccountStr = os.Getenv("EPAY_ACCOUNT")

	epayAccountIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayAccountStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayAccountStr))
		}
		val := int(v)
		return &val
	})
	epayAccountInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayAccountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", epayAccountStr))
		}
		val := int64(v)
		return &val
	})
	epayAccountUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(epayAccountStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayAccountStr))
		}
		val := uint(v)
		return &val
	})
	epayAccountBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(epayAccountStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", epayAccountStr))
		}
		return &v
	})
	epayAccountMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayAccountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", epayAccountStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EpayAccount returns the cached EPAY_ACCOUNT variable.
func EpayAccount() string {
	return epayAccountStr
}

// EpayAccountInt returns the cached int of EPAY_ACCOUNT variable.
func EpayAccountInt() int {
	return *((epayAccountIntCacher.Get()).(*int))
}

// EpayAccountInt64 returns the cached int64 of EPAY_ACCOUNT variable.
func EpayAccountInt64() int64 {
	return *((epayAccountInt64Cacher.Get()).(*int64))
}

// EpayAccountUint returns the cached uint of EPAY_ACCOUNT variable.
func EpayAccountUint() uint {
	return *((epayAccountUintCacher.Get()).(*uint))
}

// EpayAccountBool returns the cached bool of EPAY_ACCOUNT variable.
func EpayAccountBool() bool {
	return *((epayAccountBoolCacher.Get()).(*bool))
}

// EpayAccountMs returns the cached millisecond of EPAY_ACCOUNT variable.
func EpayAccountMs() time.Duration {
	return *((epayAccountMsCacher.Get()).(*time.Duration))
}

// SetEpayAccount sets the cached value.
func SetEpayAccount(v string) {
	epayAccountStr = v
	epayAccountIntCacher.Clear()
	epayAccountInt64Cacher.Clear()
	epayAccountUintCacher.Clear()
	epayAccountBoolCacher.Clear()
	epayAccountMsCacher.Clear()
}

// --------------------------------------
// EPAY_NOPAYMENT_URL_COBLET
// --------------------------------------
var (
	epayNopaymentUrlCobletStr = os.Getenv("EPAY_NOPAYMENT_URL_COBLET")

	epayNopaymentUrlCobletIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayNopaymentUrlCobletStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayNopaymentUrlCobletStr))
		}
		val := int(v)
		return &val
	})
	epayNopaymentUrlCobletInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayNopaymentUrlCobletStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", epayNopaymentUrlCobletStr))
		}
		val := int64(v)
		return &val
	})
	epayNopaymentUrlCobletUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(epayNopaymentUrlCobletStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayNopaymentUrlCobletStr))
		}
		val := uint(v)
		return &val
	})
	epayNopaymentUrlCobletBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(epayNopaymentUrlCobletStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", epayNopaymentUrlCobletStr))
		}
		return &v
	})
	epayNopaymentUrlCobletMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayNopaymentUrlCobletStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", epayNopaymentUrlCobletStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EpayNopaymentUrlCoblet returns the cached EPAY_NOPAYMENT_URL_COBLET variable.
func EpayNopaymentUrlCoblet() string {
	return epayNopaymentUrlCobletStr
}

// EpayNopaymentUrlCobletInt returns the cached int of EPAY_NOPAYMENT_URL_COBLET variable.
func EpayNopaymentUrlCobletInt() int {
	return *((epayNopaymentUrlCobletIntCacher.Get()).(*int))
}

// EpayNopaymentUrlCobletInt64 returns the cached int64 of EPAY_NOPAYMENT_URL_COBLET variable.
func EpayNopaymentUrlCobletInt64() int64 {
	return *((epayNopaymentUrlCobletInt64Cacher.Get()).(*int64))
}

// EpayNopaymentUrlCobletUint returns the cached uint of EPAY_NOPAYMENT_URL_COBLET variable.
func EpayNopaymentUrlCobletUint() uint {
	return *((epayNopaymentUrlCobletUintCacher.Get()).(*uint))
}

// EpayNopaymentUrlCobletBool returns the cached bool of EPAY_NOPAYMENT_URL_COBLET variable.
func EpayNopaymentUrlCobletBool() bool {
	return *((epayNopaymentUrlCobletBoolCacher.Get()).(*bool))
}

// EpayNopaymentUrlCobletMs returns the cached millisecond of EPAY_NOPAYMENT_URL_COBLET variable.
func EpayNopaymentUrlCobletMs() time.Duration {
	return *((epayNopaymentUrlCobletMsCacher.Get()).(*time.Duration))
}

// SetEpayNopaymentUrlCoblet sets the cached value.
func SetEpayNopaymentUrlCoblet(v string) {
	epayNopaymentUrlCobletStr = v
	epayNopaymentUrlCobletIntCacher.Clear()
	epayNopaymentUrlCobletInt64Cacher.Clear()
	epayNopaymentUrlCobletUintCacher.Clear()
	epayNopaymentUrlCobletBoolCacher.Clear()
	epayNopaymentUrlCobletMsCacher.Clear()
}

// --------------------------------------
// EPAY_PAYMENT_URL_COBLET
// --------------------------------------
var (
	epayPaymentUrlCobletStr = os.Getenv("EPAY_PAYMENT_URL_COBLET")

	epayPaymentUrlCobletIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayPaymentUrlCobletStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayPaymentUrlCobletStr))
		}
		val := int(v)
		return &val
	})
	epayPaymentUrlCobletInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayPaymentUrlCobletStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", epayPaymentUrlCobletStr))
		}
		val := int64(v)
		return &val
	})
	epayPaymentUrlCobletUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(epayPaymentUrlCobletStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayPaymentUrlCobletStr))
		}
		val := uint(v)
		return &val
	})
	epayPaymentUrlCobletBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(epayPaymentUrlCobletStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", epayPaymentUrlCobletStr))
		}
		return &v
	})
	epayPaymentUrlCobletMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayPaymentUrlCobletStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", epayPaymentUrlCobletStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EpayPaymentUrlCoblet returns the cached EPAY_PAYMENT_URL_COBLET variable.
func EpayPaymentUrlCoblet() string {
	return epayPaymentUrlCobletStr
}

// EpayPaymentUrlCobletInt returns the cached int of EPAY_PAYMENT_URL_COBLET variable.
func EpayPaymentUrlCobletInt() int {
	return *((epayPaymentUrlCobletIntCacher.Get()).(*int))
}

// EpayPaymentUrlCobletInt64 returns the cached int64 of EPAY_PAYMENT_URL_COBLET variable.
func EpayPaymentUrlCobletInt64() int64 {
	return *((epayPaymentUrlCobletInt64Cacher.Get()).(*int64))
}

// EpayPaymentUrlCobletUint returns the cached uint of EPAY_PAYMENT_URL_COBLET variable.
func EpayPaymentUrlCobletUint() uint {
	return *((epayPaymentUrlCobletUintCacher.Get()).(*uint))
}

// EpayPaymentUrlCobletBool returns the cached bool of EPAY_PAYMENT_URL_COBLET variable.
func EpayPaymentUrlCobletBool() bool {
	return *((epayPaymentUrlCobletBoolCacher.Get()).(*bool))
}

// EpayPaymentUrlCobletMs returns the cached millisecond of EPAY_PAYMENT_URL_COBLET variable.
func EpayPaymentUrlCobletMs() time.Duration {
	return *((epayPaymentUrlCobletMsCacher.Get()).(*time.Duration))
}

// SetEpayPaymentUrlCoblet sets the cached value.
func SetEpayPaymentUrlCoblet(v string) {
	epayPaymentUrlCobletStr = v
	epayPaymentUrlCobletIntCacher.Clear()
	epayPaymentUrlCobletInt64Cacher.Clear()
	epayPaymentUrlCobletUintCacher.Clear()
	epayPaymentUrlCobletBoolCacher.Clear()
	epayPaymentUrlCobletMsCacher.Clear()
}

// --------------------------------------
// EPAY_PROXY_URL
// --------------------------------------
var (
	epayProxyUrlStr = os.Getenv("EPAY_PROXY_URL")

	epayProxyUrlIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayProxyUrlStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayProxyUrlStr))
		}
		val := int(v)
		return &val
	})
	epayProxyUrlInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayProxyUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", epayProxyUrlStr))
		}
		val := int64(v)
		return &val
	})
	epayProxyUrlUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(epayProxyUrlStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayProxyUrlStr))
		}
		val := uint(v)
		return &val
	})
	epayProxyUrlBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(epayProxyUrlStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", epayProxyUrlStr))
		}
		return &v
	})
	epayProxyUrlMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayProxyUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", epayProxyUrlStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EpayProxyUrl returns the cached EPAY_PROXY_URL variable.
func EpayProxyUrl() string {
	return epayProxyUrlStr
}

// EpayProxyUrlInt returns the cached int of EPAY_PROXY_URL variable.
func EpayProxyUrlInt() int {
	return *((epayProxyUrlIntCacher.Get()).(*int))
}

// EpayProxyUrlInt64 returns the cached int64 of EPAY_PROXY_URL variable.
func EpayProxyUrlInt64() int64 {
	return *((epayProxyUrlInt64Cacher.Get()).(*int64))
}

// EpayProxyUrlUint returns the cached uint of EPAY_PROXY_URL variable.
func EpayProxyUrlUint() uint {
	return *((epayProxyUrlUintCacher.Get()).(*uint))
}

// EpayProxyUrlBool returns the cached bool of EPAY_PROXY_URL variable.
func EpayProxyUrlBool() bool {
	return *((epayProxyUrlBoolCacher.Get()).(*bool))
}

// EpayProxyUrlMs returns the cached millisecond of EPAY_PROXY_URL variable.
func EpayProxyUrlMs() time.Duration {
	return *((epayProxyUrlMsCacher.Get()).(*time.Duration))
}

// SetEpayProxyUrl sets the cached value.
func SetEpayProxyUrl(v string) {
	epayProxyUrlStr = v
	epayProxyUrlIntCacher.Clear()
	epayProxyUrlInt64Cacher.Clear()
	epayProxyUrlUintCacher.Clear()
	epayProxyUrlBoolCacher.Clear()
	epayProxyUrlMsCacher.Clear()
}

// --------------------------------------
// EPAY_RECEIVER_NAME
// --------------------------------------
var (
	epayReceiverNameStr = os.Getenv("EPAY_RECEIVER_NAME")

	epayReceiverNameIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayReceiverNameStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayReceiverNameStr))
		}
		val := int(v)
		return &val
	})
	epayReceiverNameInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayReceiverNameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", epayReceiverNameStr))
		}
		val := int64(v)
		return &val
	})
	epayReceiverNameUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(epayReceiverNameStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", epayReceiverNameStr))
		}
		val := uint(v)
		return &val
	})
	epayReceiverNameBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(epayReceiverNameStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", epayReceiverNameStr))
		}
		return &v
	})
	epayReceiverNameMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(epayReceiverNameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", epayReceiverNameStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EpayReceiverName returns the cached EPAY_RECEIVER_NAME variable.
func EpayReceiverName() string {
	return epayReceiverNameStr
}

// EpayReceiverNameInt returns the cached int of EPAY_RECEIVER_NAME variable.
func EpayReceiverNameInt() int {
	return *((epayReceiverNameIntCacher.Get()).(*int))
}

// EpayReceiverNameInt64 returns the cached int64 of EPAY_RECEIVER_NAME variable.
func EpayReceiverNameInt64() int64 {
	return *((epayReceiverNameInt64Cacher.Get()).(*int64))
}

// EpayReceiverNameUint returns the cached uint of EPAY_RECEIVER_NAME variable.
func EpayReceiverNameUint() uint {
	return *((epayReceiverNameUintCacher.Get()).(*uint))
}

// EpayReceiverNameBool returns the cached bool of EPAY_RECEIVER_NAME variable.
func EpayReceiverNameBool() bool {
	return *((epayReceiverNameBoolCacher.Get()).(*bool))
}

// EpayReceiverNameMs returns the cached millisecond of EPAY_RECEIVER_NAME variable.
func EpayReceiverNameMs() time.Duration {
	return *((epayReceiverNameMsCacher.Get()).(*time.Duration))
}

// SetEpayReceiverName sets the cached value.
func SetEpayReceiverName(v string) {
	epayReceiverNameStr = v
	epayReceiverNameIntCacher.Clear()
	epayReceiverNameInt64Cacher.Clear()
	epayReceiverNameUintCacher.Clear()
	epayReceiverNameBoolCacher.Clear()
	epayReceiverNameMsCacher.Clear()
}

// --------------------------------------
// EZPAY_API_URL_PREFIX
// --------------------------------------
var (
	ezpayApiUrlPrefixStr = os.Getenv("EZPAY_API_URL_PREFIX")

	ezpayApiUrlPrefixIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(ezpayApiUrlPrefixStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", ezpayApiUrlPrefixStr))
		}
		val := int(v)
		return &val
	})
	ezpayApiUrlPrefixInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(ezpayApiUrlPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", ezpayApiUrlPrefixStr))
		}
		val := int64(v)
		return &val
	})
	ezpayApiUrlPrefixUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(ezpayApiUrlPrefixStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", ezpayApiUrlPrefixStr))
		}
		val := uint(v)
		return &val
	})
	ezpayApiUrlPrefixBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(ezpayApiUrlPrefixStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", ezpayApiUrlPrefixStr))
		}
		return &v
	})
	ezpayApiUrlPrefixMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(ezpayApiUrlPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", ezpayApiUrlPrefixStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EzpayApiUrlPrefix returns the cached EZPAY_API_URL_PREFIX variable.
func EzpayApiUrlPrefix() string {
	return ezpayApiUrlPrefixStr
}

// EzpayApiUrlPrefixInt returns the cached int of EZPAY_API_URL_PREFIX variable.
func EzpayApiUrlPrefixInt() int {
	return *((ezpayApiUrlPrefixIntCacher.Get()).(*int))
}

// EzpayApiUrlPrefixInt64 returns the cached int64 of EZPAY_API_URL_PREFIX variable.
func EzpayApiUrlPrefixInt64() int64 {
	return *((ezpayApiUrlPrefixInt64Cacher.Get()).(*int64))
}

// EzpayApiUrlPrefixUint returns the cached uint of EZPAY_API_URL_PREFIX variable.
func EzpayApiUrlPrefixUint() uint {
	return *((ezpayApiUrlPrefixUintCacher.Get()).(*uint))
}

// EzpayApiUrlPrefixBool returns the cached bool of EZPAY_API_URL_PREFIX variable.
func EzpayApiUrlPrefixBool() bool {
	return *((ezpayApiUrlPrefixBoolCacher.Get()).(*bool))
}

// EzpayApiUrlPrefixMs returns the cached millisecond of EZPAY_API_URL_PREFIX variable.
func EzpayApiUrlPrefixMs() time.Duration {
	return *((ezpayApiUrlPrefixMsCacher.Get()).(*time.Duration))
}

// SetEzpayApiUrlPrefix sets the cached value.
func SetEzpayApiUrlPrefix(v string) {
	ezpayApiUrlPrefixStr = v
	ezpayApiUrlPrefixIntCacher.Clear()
	ezpayApiUrlPrefixInt64Cacher.Clear()
	ezpayApiUrlPrefixUintCacher.Clear()
	ezpayApiUrlPrefixBoolCacher.Clear()
	ezpayApiUrlPrefixMsCacher.Clear()
}

// --------------------------------------
// EZPAY_MERCHANT_ID
// --------------------------------------
var (
	ezpayMerchantIdStr = os.Getenv("EZPAY_MERCHANT_ID")

	ezpayMerchantIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(ezpayMerchantIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", ezpayMerchantIdStr))
		}
		val := int(v)
		return &val
	})
	ezpayMerchantIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(ezpayMerchantIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", ezpayMerchantIdStr))
		}
		val := int64(v)
		return &val
	})
	ezpayMerchantIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(ezpayMerchantIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", ezpayMerchantIdStr))
		}
		val := uint(v)
		return &val
	})
	ezpayMerchantIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(ezpayMerchantIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", ezpayMerchantIdStr))
		}
		return &v
	})
	ezpayMerchantIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(ezpayMerchantIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", ezpayMerchantIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EzpayMerchantId returns the cached EZPAY_MERCHANT_ID variable.
func EzpayMerchantId() string {
	return ezpayMerchantIdStr
}

// EzpayMerchantIdInt returns the cached int of EZPAY_MERCHANT_ID variable.
func EzpayMerchantIdInt() int {
	return *((ezpayMerchantIdIntCacher.Get()).(*int))
}

// EzpayMerchantIdInt64 returns the cached int64 of EZPAY_MERCHANT_ID variable.
func EzpayMerchantIdInt64() int64 {
	return *((ezpayMerchantIdInt64Cacher.Get()).(*int64))
}

// EzpayMerchantIdUint returns the cached uint of EZPAY_MERCHANT_ID variable.
func EzpayMerchantIdUint() uint {
	return *((ezpayMerchantIdUintCacher.Get()).(*uint))
}

// EzpayMerchantIdBool returns the cached bool of EZPAY_MERCHANT_ID variable.
func EzpayMerchantIdBool() bool {
	return *((ezpayMerchantIdBoolCacher.Get()).(*bool))
}

// EzpayMerchantIdMs returns the cached millisecond of EZPAY_MERCHANT_ID variable.
func EzpayMerchantIdMs() time.Duration {
	return *((ezpayMerchantIdMsCacher.Get()).(*time.Duration))
}

// SetEzpayMerchantId sets the cached value.
func SetEzpayMerchantId(v string) {
	ezpayMerchantIdStr = v
	ezpayMerchantIdIntCacher.Clear()
	ezpayMerchantIdInt64Cacher.Clear()
	ezpayMerchantIdUintCacher.Clear()
	ezpayMerchantIdBoolCacher.Clear()
	ezpayMerchantIdMsCacher.Clear()
}

// --------------------------------------
// FB_OFFLINE_EVENT_SET_ID
// --------------------------------------
var (
	fbOfflineEventSetIdStr = os.Getenv("FB_OFFLINE_EVENT_SET_ID")

	fbOfflineEventSetIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fbOfflineEventSetIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fbOfflineEventSetIdStr))
		}
		val := int(v)
		return &val
	})
	fbOfflineEventSetIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fbOfflineEventSetIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", fbOfflineEventSetIdStr))
		}
		val := int64(v)
		return &val
	})
	fbOfflineEventSetIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(fbOfflineEventSetIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fbOfflineEventSetIdStr))
		}
		val := uint(v)
		return &val
	})
	fbOfflineEventSetIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(fbOfflineEventSetIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", fbOfflineEventSetIdStr))
		}
		return &v
	})
	fbOfflineEventSetIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fbOfflineEventSetIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", fbOfflineEventSetIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// FbOfflineEventSetId returns the cached FB_OFFLINE_EVENT_SET_ID variable.
func FbOfflineEventSetId() string {
	return fbOfflineEventSetIdStr
}

// FbOfflineEventSetIdInt returns the cached int of FB_OFFLINE_EVENT_SET_ID variable.
func FbOfflineEventSetIdInt() int {
	return *((fbOfflineEventSetIdIntCacher.Get()).(*int))
}

// FbOfflineEventSetIdInt64 returns the cached int64 of FB_OFFLINE_EVENT_SET_ID variable.
func FbOfflineEventSetIdInt64() int64 {
	return *((fbOfflineEventSetIdInt64Cacher.Get()).(*int64))
}

// FbOfflineEventSetIdUint returns the cached uint of FB_OFFLINE_EVENT_SET_ID variable.
func FbOfflineEventSetIdUint() uint {
	return *((fbOfflineEventSetIdUintCacher.Get()).(*uint))
}

// FbOfflineEventSetIdBool returns the cached bool of FB_OFFLINE_EVENT_SET_ID variable.
func FbOfflineEventSetIdBool() bool {
	return *((fbOfflineEventSetIdBoolCacher.Get()).(*bool))
}

// FbOfflineEventSetIdMs returns the cached millisecond of FB_OFFLINE_EVENT_SET_ID variable.
func FbOfflineEventSetIdMs() time.Duration {
	return *((fbOfflineEventSetIdMsCacher.Get()).(*time.Duration))
}

// SetFbOfflineEventSetId sets the cached value.
func SetFbOfflineEventSetId(v string) {
	fbOfflineEventSetIdStr = v
	fbOfflineEventSetIdIntCacher.Clear()
	fbOfflineEventSetIdInt64Cacher.Clear()
	fbOfflineEventSetIdUintCacher.Clear()
	fbOfflineEventSetIdBoolCacher.Clear()
	fbOfflineEventSetIdMsCacher.Clear()
}

// --------------------------------------
// FIAT_RECOD_SLACK_WEBHOOK_URL
// --------------------------------------
var (
	fiatRecodSlackWebhookUrlStr = os.Getenv("FIAT_RECOD_SLACK_WEBHOOK_URL")

	fiatRecodSlackWebhookUrlIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fiatRecodSlackWebhookUrlStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fiatRecodSlackWebhookUrlStr))
		}
		val := int(v)
		return &val
	})
	fiatRecodSlackWebhookUrlInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fiatRecodSlackWebhookUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", fiatRecodSlackWebhookUrlStr))
		}
		val := int64(v)
		return &val
	})
	fiatRecodSlackWebhookUrlUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(fiatRecodSlackWebhookUrlStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fiatRecodSlackWebhookUrlStr))
		}
		val := uint(v)
		return &val
	})
	fiatRecodSlackWebhookUrlBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(fiatRecodSlackWebhookUrlStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", fiatRecodSlackWebhookUrlStr))
		}
		return &v
	})
	fiatRecodSlackWebhookUrlMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fiatRecodSlackWebhookUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", fiatRecodSlackWebhookUrlStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// FiatRecodSlackWebhookUrl returns the cached FIAT_RECOD_SLACK_WEBHOOK_URL variable.
func FiatRecodSlackWebhookUrl() string {
	return fiatRecodSlackWebhookUrlStr
}

// FiatRecodSlackWebhookUrlInt returns the cached int of FIAT_RECOD_SLACK_WEBHOOK_URL variable.
func FiatRecodSlackWebhookUrlInt() int {
	return *((fiatRecodSlackWebhookUrlIntCacher.Get()).(*int))
}

// FiatRecodSlackWebhookUrlInt64 returns the cached int64 of FIAT_RECOD_SLACK_WEBHOOK_URL variable.
func FiatRecodSlackWebhookUrlInt64() int64 {
	return *((fiatRecodSlackWebhookUrlInt64Cacher.Get()).(*int64))
}

// FiatRecodSlackWebhookUrlUint returns the cached uint of FIAT_RECOD_SLACK_WEBHOOK_URL variable.
func FiatRecodSlackWebhookUrlUint() uint {
	return *((fiatRecodSlackWebhookUrlUintCacher.Get()).(*uint))
}

// FiatRecodSlackWebhookUrlBool returns the cached bool of FIAT_RECOD_SLACK_WEBHOOK_URL variable.
func FiatRecodSlackWebhookUrlBool() bool {
	return *((fiatRecodSlackWebhookUrlBoolCacher.Get()).(*bool))
}

// FiatRecodSlackWebhookUrlMs returns the cached millisecond of FIAT_RECOD_SLACK_WEBHOOK_URL variable.
func FiatRecodSlackWebhookUrlMs() time.Duration {
	return *((fiatRecodSlackWebhookUrlMsCacher.Get()).(*time.Duration))
}

// SetFiatRecodSlackWebhookUrl sets the cached value.
func SetFiatRecodSlackWebhookUrl(v string) {
	fiatRecodSlackWebhookUrlStr = v
	fiatRecodSlackWebhookUrlIntCacher.Clear()
	fiatRecodSlackWebhookUrlInt64Cacher.Clear()
	fiatRecodSlackWebhookUrlUintCacher.Clear()
	fiatRecodSlackWebhookUrlBoolCacher.Clear()
	fiatRecodSlackWebhookUrlMsCacher.Clear()
}

// --------------------------------------
// GA_TRACKING_ID
// --------------------------------------
var (
	gaTrackingIdStr = os.Getenv("GA_TRACKING_ID")

	gaTrackingIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gaTrackingIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gaTrackingIdStr))
		}
		val := int(v)
		return &val
	})
	gaTrackingIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gaTrackingIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", gaTrackingIdStr))
		}
		val := int64(v)
		return &val
	})
	gaTrackingIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(gaTrackingIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", gaTrackingIdStr))
		}
		val := uint(v)
		return &val
	})
	gaTrackingIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(gaTrackingIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", gaTrackingIdStr))
		}
		return &v
	})
	gaTrackingIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(gaTrackingIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", gaTrackingIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// GaTrackingId returns the cached GA_TRACKING_ID variable.
func GaTrackingId() string {
	return gaTrackingIdStr
}

// GaTrackingIdInt returns the cached int of GA_TRACKING_ID variable.
func GaTrackingIdInt() int {
	return *((gaTrackingIdIntCacher.Get()).(*int))
}

// GaTrackingIdInt64 returns the cached int64 of GA_TRACKING_ID variable.
func GaTrackingIdInt64() int64 {
	return *((gaTrackingIdInt64Cacher.Get()).(*int64))
}

// GaTrackingIdUint returns the cached uint of GA_TRACKING_ID variable.
func GaTrackingIdUint() uint {
	return *((gaTrackingIdUintCacher.Get()).(*uint))
}

// GaTrackingIdBool returns the cached bool of GA_TRACKING_ID variable.
func GaTrackingIdBool() bool {
	return *((gaTrackingIdBoolCacher.Get()).(*bool))
}

// GaTrackingIdMs returns the cached millisecond of GA_TRACKING_ID variable.
func GaTrackingIdMs() time.Duration {
	return *((gaTrackingIdMsCacher.Get()).(*time.Duration))
}

// SetGaTrackingId sets the cached value.
func SetGaTrackingId(v string) {
	gaTrackingIdStr = v
	gaTrackingIdIntCacher.Clear()
	gaTrackingIdInt64Cacher.Clear()
	gaTrackingIdUintCacher.Clear()
	gaTrackingIdBoolCacher.Clear()
	gaTrackingIdMsCacher.Clear()
}

// --------------------------------------
// JKOS_ENDPOINT
// --------------------------------------
var (
	jkosEndpointStr = os.Getenv("JKOS_ENDPOINT")

	jkosEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(jkosEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", jkosEndpointStr))
		}
		val := int(v)
		return &val
	})
	jkosEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(jkosEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", jkosEndpointStr))
		}
		val := int64(v)
		return &val
	})
	jkosEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(jkosEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", jkosEndpointStr))
		}
		val := uint(v)
		return &val
	})
	jkosEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(jkosEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", jkosEndpointStr))
		}
		return &v
	})
	jkosEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(jkosEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", jkosEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// JkosEndpoint returns the cached JKOS_ENDPOINT variable.
func JkosEndpoint() string {
	return jkosEndpointStr
}

// JkosEndpointInt returns the cached int of JKOS_ENDPOINT variable.
func JkosEndpointInt() int {
	return *((jkosEndpointIntCacher.Get()).(*int))
}

// JkosEndpointInt64 returns the cached int64 of JKOS_ENDPOINT variable.
func JkosEndpointInt64() int64 {
	return *((jkosEndpointInt64Cacher.Get()).(*int64))
}

// JkosEndpointUint returns the cached uint of JKOS_ENDPOINT variable.
func JkosEndpointUint() uint {
	return *((jkosEndpointUintCacher.Get()).(*uint))
}

// JkosEndpointBool returns the cached bool of JKOS_ENDPOINT variable.
func JkosEndpointBool() bool {
	return *((jkosEndpointBoolCacher.Get()).(*bool))
}

// JkosEndpointMs returns the cached millisecond of JKOS_ENDPOINT variable.
func JkosEndpointMs() time.Duration {
	return *((jkosEndpointMsCacher.Get()).(*time.Duration))
}

// SetJkosEndpoint sets the cached value.
func SetJkosEndpoint(v string) {
	jkosEndpointStr = v
	jkosEndpointIntCacher.Clear()
	jkosEndpointInt64Cacher.Clear()
	jkosEndpointUintCacher.Clear()
	jkosEndpointBoolCacher.Clear()
	jkosEndpointMsCacher.Clear()
}

// --------------------------------------
// JKOS_STORE_ID
// --------------------------------------
var (
	jkosStoreIdStr = os.Getenv("JKOS_STORE_ID")

	jkosStoreIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(jkosStoreIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", jkosStoreIdStr))
		}
		val := int(v)
		return &val
	})
	jkosStoreIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(jkosStoreIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", jkosStoreIdStr))
		}
		val := int64(v)
		return &val
	})
	jkosStoreIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(jkosStoreIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", jkosStoreIdStr))
		}
		val := uint(v)
		return &val
	})
	jkosStoreIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(jkosStoreIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", jkosStoreIdStr))
		}
		return &v
	})
	jkosStoreIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(jkosStoreIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", jkosStoreIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// JkosStoreId returns the cached JKOS_STORE_ID variable.
func JkosStoreId() string {
	return jkosStoreIdStr
}

// JkosStoreIdInt returns the cached int of JKOS_STORE_ID variable.
func JkosStoreIdInt() int {
	return *((jkosStoreIdIntCacher.Get()).(*int))
}

// JkosStoreIdInt64 returns the cached int64 of JKOS_STORE_ID variable.
func JkosStoreIdInt64() int64 {
	return *((jkosStoreIdInt64Cacher.Get()).(*int64))
}

// JkosStoreIdUint returns the cached uint of JKOS_STORE_ID variable.
func JkosStoreIdUint() uint {
	return *((jkosStoreIdUintCacher.Get()).(*uint))
}

// JkosStoreIdBool returns the cached bool of JKOS_STORE_ID variable.
func JkosStoreIdBool() bool {
	return *((jkosStoreIdBoolCacher.Get()).(*bool))
}

// JkosStoreIdMs returns the cached millisecond of JKOS_STORE_ID variable.
func JkosStoreIdMs() time.Duration {
	return *((jkosStoreIdMsCacher.Get()).(*time.Duration))
}

// SetJkosStoreId sets the cached value.
func SetJkosStoreId(v string) {
	jkosStoreIdStr = v
	jkosStoreIdIntCacher.Clear()
	jkosStoreIdInt64Cacher.Clear()
	jkosStoreIdUintCacher.Clear()
	jkosStoreIdBoolCacher.Clear()
	jkosStoreIdMsCacher.Clear()
}

// --------------------------------------
// KGI_ENDPOINT
// --------------------------------------
var (
	kgiEndpointStr = os.Getenv("KGI_ENDPOINT")

	kgiEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kgiEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", kgiEndpointStr))
		}
		val := int(v)
		return &val
	})
	kgiEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kgiEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", kgiEndpointStr))
		}
		val := int64(v)
		return &val
	})
	kgiEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(kgiEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", kgiEndpointStr))
		}
		val := uint(v)
		return &val
	})
	kgiEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(kgiEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", kgiEndpointStr))
		}
		return &v
	})
	kgiEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kgiEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", kgiEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// KgiEndpoint returns the cached KGI_ENDPOINT variable.
func KgiEndpoint() string {
	return kgiEndpointStr
}

// KgiEndpointInt returns the cached int of KGI_ENDPOINT variable.
func KgiEndpointInt() int {
	return *((kgiEndpointIntCacher.Get()).(*int))
}

// KgiEndpointInt64 returns the cached int64 of KGI_ENDPOINT variable.
func KgiEndpointInt64() int64 {
	return *((kgiEndpointInt64Cacher.Get()).(*int64))
}

// KgiEndpointUint returns the cached uint of KGI_ENDPOINT variable.
func KgiEndpointUint() uint {
	return *((kgiEndpointUintCacher.Get()).(*uint))
}

// KgiEndpointBool returns the cached bool of KGI_ENDPOINT variable.
func KgiEndpointBool() bool {
	return *((kgiEndpointBoolCacher.Get()).(*bool))
}

// KgiEndpointMs returns the cached millisecond of KGI_ENDPOINT variable.
func KgiEndpointMs() time.Duration {
	return *((kgiEndpointMsCacher.Get()).(*time.Duration))
}

// SetKgiEndpoint sets the cached value.
func SetKgiEndpoint(v string) {
	kgiEndpointStr = v
	kgiEndpointIntCacher.Clear()
	kgiEndpointInt64Cacher.Clear()
	kgiEndpointUintCacher.Clear()
	kgiEndpointBoolCacher.Clear()
	kgiEndpointMsCacher.Clear()
}

// --------------------------------------
// NECAPTCHA_ID
// --------------------------------------
var (
	necaptchaIdStr = os.Getenv("NECAPTCHA_ID")

	necaptchaIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(necaptchaIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", necaptchaIdStr))
		}
		val := int(v)
		return &val
	})
	necaptchaIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(necaptchaIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", necaptchaIdStr))
		}
		val := int64(v)
		return &val
	})
	necaptchaIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(necaptchaIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", necaptchaIdStr))
		}
		val := uint(v)
		return &val
	})
	necaptchaIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(necaptchaIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", necaptchaIdStr))
		}
		return &v
	})
	necaptchaIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(necaptchaIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", necaptchaIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NecaptchaId returns the cached NECAPTCHA_ID variable.
func NecaptchaId() string {
	return necaptchaIdStr
}

// NecaptchaIdInt returns the cached int of NECAPTCHA_ID variable.
func NecaptchaIdInt() int {
	return *((necaptchaIdIntCacher.Get()).(*int))
}

// NecaptchaIdInt64 returns the cached int64 of NECAPTCHA_ID variable.
func NecaptchaIdInt64() int64 {
	return *((necaptchaIdInt64Cacher.Get()).(*int64))
}

// NecaptchaIdUint returns the cached uint of NECAPTCHA_ID variable.
func NecaptchaIdUint() uint {
	return *((necaptchaIdUintCacher.Get()).(*uint))
}

// NecaptchaIdBool returns the cached bool of NECAPTCHA_ID variable.
func NecaptchaIdBool() bool {
	return *((necaptchaIdBoolCacher.Get()).(*bool))
}

// NecaptchaIdMs returns the cached millisecond of NECAPTCHA_ID variable.
func NecaptchaIdMs() time.Duration {
	return *((necaptchaIdMsCacher.Get()).(*time.Duration))
}

// SetNecaptchaId sets the cached value.
func SetNecaptchaId(v string) {
	necaptchaIdStr = v
	necaptchaIdIntCacher.Clear()
	necaptchaIdInt64Cacher.Clear()
	necaptchaIdUintCacher.Clear()
	necaptchaIdBoolCacher.Clear()
	necaptchaIdMsCacher.Clear()
}

// --------------------------------------
// NEXMO_API_KEY
// --------------------------------------
var (
	nexmoApiKeyStr = os.Getenv("NEXMO_API_KEY")

	nexmoApiKeyIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(nexmoApiKeyStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", nexmoApiKeyStr))
		}
		val := int(v)
		return &val
	})
	nexmoApiKeyInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(nexmoApiKeyStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", nexmoApiKeyStr))
		}
		val := int64(v)
		return &val
	})
	nexmoApiKeyUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(nexmoApiKeyStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", nexmoApiKeyStr))
		}
		val := uint(v)
		return &val
	})
	nexmoApiKeyBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(nexmoApiKeyStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", nexmoApiKeyStr))
		}
		return &v
	})
	nexmoApiKeyMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(nexmoApiKeyStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", nexmoApiKeyStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NexmoApiKey returns the cached NEXMO_API_KEY variable.
func NexmoApiKey() string {
	return nexmoApiKeyStr
}

// NexmoApiKeyInt returns the cached int of NEXMO_API_KEY variable.
func NexmoApiKeyInt() int {
	return *((nexmoApiKeyIntCacher.Get()).(*int))
}

// NexmoApiKeyInt64 returns the cached int64 of NEXMO_API_KEY variable.
func NexmoApiKeyInt64() int64 {
	return *((nexmoApiKeyInt64Cacher.Get()).(*int64))
}

// NexmoApiKeyUint returns the cached uint of NEXMO_API_KEY variable.
func NexmoApiKeyUint() uint {
	return *((nexmoApiKeyUintCacher.Get()).(*uint))
}

// NexmoApiKeyBool returns the cached bool of NEXMO_API_KEY variable.
func NexmoApiKeyBool() bool {
	return *((nexmoApiKeyBoolCacher.Get()).(*bool))
}

// NexmoApiKeyMs returns the cached millisecond of NEXMO_API_KEY variable.
func NexmoApiKeyMs() time.Duration {
	return *((nexmoApiKeyMsCacher.Get()).(*time.Duration))
}

// SetNexmoApiKey sets the cached value.
func SetNexmoApiKey(v string) {
	nexmoApiKeyStr = v
	nexmoApiKeyIntCacher.Clear()
	nexmoApiKeyInt64Cacher.Clear()
	nexmoApiKeyUintCacher.Clear()
	nexmoApiKeyBoolCacher.Clear()
	nexmoApiKeyMsCacher.Clear()
}

// --------------------------------------
// NEXMO_COUNTRY_CODE_LIST
// --------------------------------------
var (
	nexmoCountryCodeListStr = os.Getenv("NEXMO_COUNTRY_CODE_LIST")

	nexmoCountryCodeListIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(nexmoCountryCodeListStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", nexmoCountryCodeListStr))
		}
		val := int(v)
		return &val
	})
	nexmoCountryCodeListInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(nexmoCountryCodeListStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", nexmoCountryCodeListStr))
		}
		val := int64(v)
		return &val
	})
	nexmoCountryCodeListUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(nexmoCountryCodeListStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", nexmoCountryCodeListStr))
		}
		val := uint(v)
		return &val
	})
	nexmoCountryCodeListBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(nexmoCountryCodeListStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", nexmoCountryCodeListStr))
		}
		return &v
	})
	nexmoCountryCodeListMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(nexmoCountryCodeListStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", nexmoCountryCodeListStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NexmoCountryCodeList returns the cached NEXMO_COUNTRY_CODE_LIST variable.
func NexmoCountryCodeList() string {
	return nexmoCountryCodeListStr
}

// NexmoCountryCodeListInt returns the cached int of NEXMO_COUNTRY_CODE_LIST variable.
func NexmoCountryCodeListInt() int {
	return *((nexmoCountryCodeListIntCacher.Get()).(*int))
}

// NexmoCountryCodeListInt64 returns the cached int64 of NEXMO_COUNTRY_CODE_LIST variable.
func NexmoCountryCodeListInt64() int64 {
	return *((nexmoCountryCodeListInt64Cacher.Get()).(*int64))
}

// NexmoCountryCodeListUint returns the cached uint of NEXMO_COUNTRY_CODE_LIST variable.
func NexmoCountryCodeListUint() uint {
	return *((nexmoCountryCodeListUintCacher.Get()).(*uint))
}

// NexmoCountryCodeListBool returns the cached bool of NEXMO_COUNTRY_CODE_LIST variable.
func NexmoCountryCodeListBool() bool {
	return *((nexmoCountryCodeListBoolCacher.Get()).(*bool))
}

// NexmoCountryCodeListMs returns the cached millisecond of NEXMO_COUNTRY_CODE_LIST variable.
func NexmoCountryCodeListMs() time.Duration {
	return *((nexmoCountryCodeListMsCacher.Get()).(*time.Duration))
}

// SetNexmoCountryCodeList sets the cached value.
func SetNexmoCountryCodeList(v string) {
	nexmoCountryCodeListStr = v
	nexmoCountryCodeListIntCacher.Clear()
	nexmoCountryCodeListInt64Cacher.Clear()
	nexmoCountryCodeListUintCacher.Clear()
	nexmoCountryCodeListBoolCacher.Clear()
	nexmoCountryCodeListMsCacher.Clear()
}

// --------------------------------------
// ONESIGNAL_APP_ID
// --------------------------------------
var (
	onesignalAppIdStr = os.Getenv("ONESIGNAL_APP_ID")

	onesignalAppIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(onesignalAppIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", onesignalAppIdStr))
		}
		val := int(v)
		return &val
	})
	onesignalAppIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(onesignalAppIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", onesignalAppIdStr))
		}
		val := int64(v)
		return &val
	})
	onesignalAppIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(onesignalAppIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", onesignalAppIdStr))
		}
		val := uint(v)
		return &val
	})
	onesignalAppIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(onesignalAppIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", onesignalAppIdStr))
		}
		return &v
	})
	onesignalAppIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(onesignalAppIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", onesignalAppIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// OnesignalAppId returns the cached ONESIGNAL_APP_ID variable.
func OnesignalAppId() string {
	return onesignalAppIdStr
}

// OnesignalAppIdInt returns the cached int of ONESIGNAL_APP_ID variable.
func OnesignalAppIdInt() int {
	return *((onesignalAppIdIntCacher.Get()).(*int))
}

// OnesignalAppIdInt64 returns the cached int64 of ONESIGNAL_APP_ID variable.
func OnesignalAppIdInt64() int64 {
	return *((onesignalAppIdInt64Cacher.Get()).(*int64))
}

// OnesignalAppIdUint returns the cached uint of ONESIGNAL_APP_ID variable.
func OnesignalAppIdUint() uint {
	return *((onesignalAppIdUintCacher.Get()).(*uint))
}

// OnesignalAppIdBool returns the cached bool of ONESIGNAL_APP_ID variable.
func OnesignalAppIdBool() bool {
	return *((onesignalAppIdBoolCacher.Get()).(*bool))
}

// OnesignalAppIdMs returns the cached millisecond of ONESIGNAL_APP_ID variable.
func OnesignalAppIdMs() time.Duration {
	return *((onesignalAppIdMsCacher.Get()).(*time.Duration))
}

// SetOnesignalAppId sets the cached value.
func SetOnesignalAppId(v string) {
	onesignalAppIdStr = v
	onesignalAppIdIntCacher.Clear()
	onesignalAppIdInt64Cacher.Clear()
	onesignalAppIdUintCacher.Clear()
	onesignalAppIdBoolCacher.Clear()
	onesignalAppIdMsCacher.Clear()
}

// --------------------------------------
// SENDGRID_TEMP_GENERIC
// --------------------------------------
var (
	sendgridTempGenericStr = os.Getenv("SENDGRID_TEMP_GENERIC")

	sendgridTempGenericIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(sendgridTempGenericStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", sendgridTempGenericStr))
		}
		val := int(v)
		return &val
	})
	sendgridTempGenericInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(sendgridTempGenericStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", sendgridTempGenericStr))
		}
		val := int64(v)
		return &val
	})
	sendgridTempGenericUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(sendgridTempGenericStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", sendgridTempGenericStr))
		}
		val := uint(v)
		return &val
	})
	sendgridTempGenericBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(sendgridTempGenericStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", sendgridTempGenericStr))
		}
		return &v
	})
	sendgridTempGenericMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(sendgridTempGenericStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", sendgridTempGenericStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SendgridTempGeneric returns the cached SENDGRID_TEMP_GENERIC variable.
func SendgridTempGeneric() string {
	return sendgridTempGenericStr
}

// SendgridTempGenericInt returns the cached int of SENDGRID_TEMP_GENERIC variable.
func SendgridTempGenericInt() int {
	return *((sendgridTempGenericIntCacher.Get()).(*int))
}

// SendgridTempGenericInt64 returns the cached int64 of SENDGRID_TEMP_GENERIC variable.
func SendgridTempGenericInt64() int64 {
	return *((sendgridTempGenericInt64Cacher.Get()).(*int64))
}

// SendgridTempGenericUint returns the cached uint of SENDGRID_TEMP_GENERIC variable.
func SendgridTempGenericUint() uint {
	return *((sendgridTempGenericUintCacher.Get()).(*uint))
}

// SendgridTempGenericBool returns the cached bool of SENDGRID_TEMP_GENERIC variable.
func SendgridTempGenericBool() bool {
	return *((sendgridTempGenericBoolCacher.Get()).(*bool))
}

// SendgridTempGenericMs returns the cached millisecond of SENDGRID_TEMP_GENERIC variable.
func SendgridTempGenericMs() time.Duration {
	return *((sendgridTempGenericMsCacher.Get()).(*time.Duration))
}

// SetSendgridTempGeneric sets the cached value.
func SetSendgridTempGeneric(v string) {
	sendgridTempGenericStr = v
	sendgridTempGenericIntCacher.Clear()
	sendgridTempGenericInt64Cacher.Clear()
	sendgridTempGenericUintCacher.Clear()
	sendgridTempGenericBoolCacher.Clear()
	sendgridTempGenericMsCacher.Clear()
}

// --------------------------------------
// SENDGRID_TEMP_GENERIC_EVENT
// --------------------------------------
var (
	sendgridTempGenericEventStr = os.Getenv("SENDGRID_TEMP_GENERIC_EVENT")

	sendgridTempGenericEventIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(sendgridTempGenericEventStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", sendgridTempGenericEventStr))
		}
		val := int(v)
		return &val
	})
	sendgridTempGenericEventInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(sendgridTempGenericEventStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", sendgridTempGenericEventStr))
		}
		val := int64(v)
		return &val
	})
	sendgridTempGenericEventUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(sendgridTempGenericEventStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", sendgridTempGenericEventStr))
		}
		val := uint(v)
		return &val
	})
	sendgridTempGenericEventBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(sendgridTempGenericEventStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", sendgridTempGenericEventStr))
		}
		return &v
	})
	sendgridTempGenericEventMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(sendgridTempGenericEventStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", sendgridTempGenericEventStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SendgridTempGenericEvent returns the cached SENDGRID_TEMP_GENERIC_EVENT variable.
func SendgridTempGenericEvent() string {
	return sendgridTempGenericEventStr
}

// SendgridTempGenericEventInt returns the cached int of SENDGRID_TEMP_GENERIC_EVENT variable.
func SendgridTempGenericEventInt() int {
	return *((sendgridTempGenericEventIntCacher.Get()).(*int))
}

// SendgridTempGenericEventInt64 returns the cached int64 of SENDGRID_TEMP_GENERIC_EVENT variable.
func SendgridTempGenericEventInt64() int64 {
	return *((sendgridTempGenericEventInt64Cacher.Get()).(*int64))
}

// SendgridTempGenericEventUint returns the cached uint of SENDGRID_TEMP_GENERIC_EVENT variable.
func SendgridTempGenericEventUint() uint {
	return *((sendgridTempGenericEventUintCacher.Get()).(*uint))
}

// SendgridTempGenericEventBool returns the cached bool of SENDGRID_TEMP_GENERIC_EVENT variable.
func SendgridTempGenericEventBool() bool {
	return *((sendgridTempGenericEventBoolCacher.Get()).(*bool))
}

// SendgridTempGenericEventMs returns the cached millisecond of SENDGRID_TEMP_GENERIC_EVENT variable.
func SendgridTempGenericEventMs() time.Duration {
	return *((sendgridTempGenericEventMsCacher.Get()).(*time.Duration))
}

// SetSendgridTempGenericEvent sets the cached value.
func SetSendgridTempGenericEvent(v string) {
	sendgridTempGenericEventStr = v
	sendgridTempGenericEventIntCacher.Clear()
	sendgridTempGenericEventInt64Cacher.Clear()
	sendgridTempGenericEventUintCacher.Clear()
	sendgridTempGenericEventBoolCacher.Clear()
	sendgridTempGenericEventMsCacher.Clear()
}

// --------------------------------------
// SLACK_WEBHOOK_URL
// --------------------------------------
var (
	slackWebhookUrlStr = os.Getenv("SLACK_WEBHOOK_URL")

	slackWebhookUrlIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(slackWebhookUrlStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", slackWebhookUrlStr))
		}
		val := int(v)
		return &val
	})
	slackWebhookUrlInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(slackWebhookUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", slackWebhookUrlStr))
		}
		val := int64(v)
		return &val
	})
	slackWebhookUrlUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(slackWebhookUrlStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", slackWebhookUrlStr))
		}
		val := uint(v)
		return &val
	})
	slackWebhookUrlBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(slackWebhookUrlStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", slackWebhookUrlStr))
		}
		return &v
	})
	slackWebhookUrlMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(slackWebhookUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", slackWebhookUrlStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SlackWebhookUrl returns the cached SLACK_WEBHOOK_URL variable.
func SlackWebhookUrl() string {
	return slackWebhookUrlStr
}

// SlackWebhookUrlInt returns the cached int of SLACK_WEBHOOK_URL variable.
func SlackWebhookUrlInt() int {
	return *((slackWebhookUrlIntCacher.Get()).(*int))
}

// SlackWebhookUrlInt64 returns the cached int64 of SLACK_WEBHOOK_URL variable.
func SlackWebhookUrlInt64() int64 {
	return *((slackWebhookUrlInt64Cacher.Get()).(*int64))
}

// SlackWebhookUrlUint returns the cached uint of SLACK_WEBHOOK_URL variable.
func SlackWebhookUrlUint() uint {
	return *((slackWebhookUrlUintCacher.Get()).(*uint))
}

// SlackWebhookUrlBool returns the cached bool of SLACK_WEBHOOK_URL variable.
func SlackWebhookUrlBool() bool {
	return *((slackWebhookUrlBoolCacher.Get()).(*bool))
}

// SlackWebhookUrlMs returns the cached millisecond of SLACK_WEBHOOK_URL variable.
func SlackWebhookUrlMs() time.Duration {
	return *((slackWebhookUrlMsCacher.Get()).(*time.Duration))
}

// SetSlackWebhookUrl sets the cached value.
func SetSlackWebhookUrl(v string) {
	slackWebhookUrlStr = v
	slackWebhookUrlIntCacher.Clear()
	slackWebhookUrlInt64Cacher.Clear()
	slackWebhookUrlUintCacher.Clear()
	slackWebhookUrlBoolCacher.Clear()
	slackWebhookUrlMsCacher.Clear()
}

// --------------------------------------
// SPG_MERCHANT_ID
// --------------------------------------
var (
	spgMerchantIdStr = os.Getenv("SPG_MERCHANT_ID")

	spgMerchantIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgMerchantIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", spgMerchantIdStr))
		}
		val := int(v)
		return &val
	})
	spgMerchantIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgMerchantIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", spgMerchantIdStr))
		}
		val := int64(v)
		return &val
	})
	spgMerchantIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(spgMerchantIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", spgMerchantIdStr))
		}
		val := uint(v)
		return &val
	})
	spgMerchantIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(spgMerchantIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", spgMerchantIdStr))
		}
		return &v
	})
	spgMerchantIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgMerchantIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", spgMerchantIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SpgMerchantId returns the cached SPG_MERCHANT_ID variable.
func SpgMerchantId() string {
	return spgMerchantIdStr
}

// SpgMerchantIdInt returns the cached int of SPG_MERCHANT_ID variable.
func SpgMerchantIdInt() int {
	return *((spgMerchantIdIntCacher.Get()).(*int))
}

// SpgMerchantIdInt64 returns the cached int64 of SPG_MERCHANT_ID variable.
func SpgMerchantIdInt64() int64 {
	return *((spgMerchantIdInt64Cacher.Get()).(*int64))
}

// SpgMerchantIdUint returns the cached uint of SPG_MERCHANT_ID variable.
func SpgMerchantIdUint() uint {
	return *((spgMerchantIdUintCacher.Get()).(*uint))
}

// SpgMerchantIdBool returns the cached bool of SPG_MERCHANT_ID variable.
func SpgMerchantIdBool() bool {
	return *((spgMerchantIdBoolCacher.Get()).(*bool))
}

// SpgMerchantIdMs returns the cached millisecond of SPG_MERCHANT_ID variable.
func SpgMerchantIdMs() time.Duration {
	return *((spgMerchantIdMsCacher.Get()).(*time.Duration))
}

// SetSpgMerchantId sets the cached value.
func SetSpgMerchantId(v string) {
	spgMerchantIdStr = v
	spgMerchantIdIntCacher.Clear()
	spgMerchantIdInt64Cacher.Clear()
	spgMerchantIdUintCacher.Clear()
	spgMerchantIdBoolCacher.Clear()
	spgMerchantIdMsCacher.Clear()
}

// --------------------------------------
// SPG_API_URL_PREFIX
// --------------------------------------
var (
	spgApiUrlPrefixStr = os.Getenv("SPG_API_URL_PREFIX")

	spgApiUrlPrefixIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgApiUrlPrefixStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", spgApiUrlPrefixStr))
		}
		val := int(v)
		return &val
	})
	spgApiUrlPrefixInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgApiUrlPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", spgApiUrlPrefixStr))
		}
		val := int64(v)
		return &val
	})
	spgApiUrlPrefixUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(spgApiUrlPrefixStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", spgApiUrlPrefixStr))
		}
		val := uint(v)
		return &val
	})
	spgApiUrlPrefixBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(spgApiUrlPrefixStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", spgApiUrlPrefixStr))
		}
		return &v
	})
	spgApiUrlPrefixMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgApiUrlPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", spgApiUrlPrefixStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SpgApiUrlPrefix returns the cached SPG_API_URL_PREFIX variable.
func SpgApiUrlPrefix() string {
	return spgApiUrlPrefixStr
}

// SpgApiUrlPrefixInt returns the cached int of SPG_API_URL_PREFIX variable.
func SpgApiUrlPrefixInt() int {
	return *((spgApiUrlPrefixIntCacher.Get()).(*int))
}

// SpgApiUrlPrefixInt64 returns the cached int64 of SPG_API_URL_PREFIX variable.
func SpgApiUrlPrefixInt64() int64 {
	return *((spgApiUrlPrefixInt64Cacher.Get()).(*int64))
}

// SpgApiUrlPrefixUint returns the cached uint of SPG_API_URL_PREFIX variable.
func SpgApiUrlPrefixUint() uint {
	return *((spgApiUrlPrefixUintCacher.Get()).(*uint))
}

// SpgApiUrlPrefixBool returns the cached bool of SPG_API_URL_PREFIX variable.
func SpgApiUrlPrefixBool() bool {
	return *((spgApiUrlPrefixBoolCacher.Get()).(*bool))
}

// SpgApiUrlPrefixMs returns the cached millisecond of SPG_API_URL_PREFIX variable.
func SpgApiUrlPrefixMs() time.Duration {
	return *((spgApiUrlPrefixMsCacher.Get()).(*time.Duration))
}

// SetSpgApiUrlPrefix sets the cached value.
func SetSpgApiUrlPrefix(v string) {
	spgApiUrlPrefixStr = v
	spgApiUrlPrefixIntCacher.Clear()
	spgApiUrlPrefixInt64Cacher.Clear()
	spgApiUrlPrefixUintCacher.Clear()
	spgApiUrlPrefixBoolCacher.Clear()
	spgApiUrlPrefixMsCacher.Clear()
}

// --------------------------------------
// SPG_API_REFUND_URL
// --------------------------------------
var (
	spgApiRefundUrlStr = os.Getenv("SPG_API_REFUND_URL")

	spgApiRefundUrlIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgApiRefundUrlStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", spgApiRefundUrlStr))
		}
		val := int(v)
		return &val
	})
	spgApiRefundUrlInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgApiRefundUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", spgApiRefundUrlStr))
		}
		val := int64(v)
		return &val
	})
	spgApiRefundUrlUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(spgApiRefundUrlStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", spgApiRefundUrlStr))
		}
		val := uint(v)
		return &val
	})
	spgApiRefundUrlBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(spgApiRefundUrlStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", spgApiRefundUrlStr))
		}
		return &v
	})
	spgApiRefundUrlMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(spgApiRefundUrlStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", spgApiRefundUrlStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SpgApiRefundUrl returns the cached SPG_API_REFUND_URL variable.
func SpgApiRefundUrl() string {
	return spgApiRefundUrlStr
}

// SpgApiRefundUrlInt returns the cached int of SPG_API_REFUND_URL variable.
func SpgApiRefundUrlInt() int {
	return *((spgApiRefundUrlIntCacher.Get()).(*int))
}

// SpgApiRefundUrlInt64 returns the cached int64 of SPG_API_REFUND_URL variable.
func SpgApiRefundUrlInt64() int64 {
	return *((spgApiRefundUrlInt64Cacher.Get()).(*int64))
}

// SpgApiRefundUrlUint returns the cached uint of SPG_API_REFUND_URL variable.
func SpgApiRefundUrlUint() uint {
	return *((spgApiRefundUrlUintCacher.Get()).(*uint))
}

// SpgApiRefundUrlBool returns the cached bool of SPG_API_REFUND_URL variable.
func SpgApiRefundUrlBool() bool {
	return *((spgApiRefundUrlBoolCacher.Get()).(*bool))
}

// SpgApiRefundUrlMs returns the cached millisecond of SPG_API_REFUND_URL variable.
func SpgApiRefundUrlMs() time.Duration {
	return *((spgApiRefundUrlMsCacher.Get()).(*time.Duration))
}

// SetSpgApiRefundUrl sets the cached value.
func SetSpgApiRefundUrl(v string) {
	spgApiRefundUrlStr = v
	spgApiRefundUrlIntCacher.Clear()
	spgApiRefundUrlInt64Cacher.Clear()
	spgApiRefundUrlUintCacher.Clear()
	spgApiRefundUrlBoolCacher.Clear()
	spgApiRefundUrlMsCacher.Clear()
}

// --------------------------------------
// SUSPICION_CONTROL_SLACK_CHANNEL_ID
// --------------------------------------
var (
	suspicionControlSlackChannelIdStr = os.Getenv("SUSPICION_CONTROL_SLACK_CHANNEL_ID")

	suspicionControlSlackChannelIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionControlSlackChannelIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspicionControlSlackChannelIdStr))
		}
		val := int(v)
		return &val
	})
	suspicionControlSlackChannelIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionControlSlackChannelIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspicionControlSlackChannelIdStr))
		}
		val := int64(v)
		return &val
	})
	suspicionControlSlackChannelIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspicionControlSlackChannelIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspicionControlSlackChannelIdStr))
		}
		val := uint(v)
		return &val
	})
	suspicionControlSlackChannelIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspicionControlSlackChannelIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspicionControlSlackChannelIdStr))
		}
		return &v
	})
	suspicionControlSlackChannelIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionControlSlackChannelIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspicionControlSlackChannelIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspicionControlSlackChannelId returns the cached SUSPICION_CONTROL_SLACK_CHANNEL_ID variable.
func SuspicionControlSlackChannelId() string {
	return suspicionControlSlackChannelIdStr
}

// SuspicionControlSlackChannelIdInt returns the cached int of SUSPICION_CONTROL_SLACK_CHANNEL_ID variable.
func SuspicionControlSlackChannelIdInt() int {
	return *((suspicionControlSlackChannelIdIntCacher.Get()).(*int))
}

// SuspicionControlSlackChannelIdInt64 returns the cached int64 of SUSPICION_CONTROL_SLACK_CHANNEL_ID variable.
func SuspicionControlSlackChannelIdInt64() int64 {
	return *((suspicionControlSlackChannelIdInt64Cacher.Get()).(*int64))
}

// SuspicionControlSlackChannelIdUint returns the cached uint of SUSPICION_CONTROL_SLACK_CHANNEL_ID variable.
func SuspicionControlSlackChannelIdUint() uint {
	return *((suspicionControlSlackChannelIdUintCacher.Get()).(*uint))
}

// SuspicionControlSlackChannelIdBool returns the cached bool of SUSPICION_CONTROL_SLACK_CHANNEL_ID variable.
func SuspicionControlSlackChannelIdBool() bool {
	return *((suspicionControlSlackChannelIdBoolCacher.Get()).(*bool))
}

// SuspicionControlSlackChannelIdMs returns the cached millisecond of SUSPICION_CONTROL_SLACK_CHANNEL_ID variable.
func SuspicionControlSlackChannelIdMs() time.Duration {
	return *((suspicionControlSlackChannelIdMsCacher.Get()).(*time.Duration))
}

// SetSuspicionControlSlackChannelId sets the cached value.
func SetSuspicionControlSlackChannelId(v string) {
	suspicionControlSlackChannelIdStr = v
	suspicionControlSlackChannelIdIntCacher.Clear()
	suspicionControlSlackChannelIdInt64Cacher.Clear()
	suspicionControlSlackChannelIdUintCacher.Clear()
	suspicionControlSlackChannelIdBoolCacher.Clear()
	suspicionControlSlackChannelIdMsCacher.Clear()
}

// --------------------------------------
// SUSPICION_CONTROL_SLACK_ENABLED
// --------------------------------------
var (
	suspicionControlSlackEnabledStr = os.Getenv("SUSPICION_CONTROL_SLACK_ENABLED")

	suspicionControlSlackEnabledIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionControlSlackEnabledStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspicionControlSlackEnabledStr))
		}
		val := int(v)
		return &val
	})
	suspicionControlSlackEnabledInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionControlSlackEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspicionControlSlackEnabledStr))
		}
		val := int64(v)
		return &val
	})
	suspicionControlSlackEnabledUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspicionControlSlackEnabledStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspicionControlSlackEnabledStr))
		}
		val := uint(v)
		return &val
	})
	suspicionControlSlackEnabledBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspicionControlSlackEnabledStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspicionControlSlackEnabledStr))
		}
		return &v
	})
	suspicionControlSlackEnabledMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionControlSlackEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspicionControlSlackEnabledStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspicionControlSlackEnabled returns the cached SUSPICION_CONTROL_SLACK_ENABLED variable.
func SuspicionControlSlackEnabled() string {
	return suspicionControlSlackEnabledStr
}

// SuspicionControlSlackEnabledInt returns the cached int of SUSPICION_CONTROL_SLACK_ENABLED variable.
func SuspicionControlSlackEnabledInt() int {
	return *((suspicionControlSlackEnabledIntCacher.Get()).(*int))
}

// SuspicionControlSlackEnabledInt64 returns the cached int64 of SUSPICION_CONTROL_SLACK_ENABLED variable.
func SuspicionControlSlackEnabledInt64() int64 {
	return *((suspicionControlSlackEnabledInt64Cacher.Get()).(*int64))
}

// SuspicionControlSlackEnabledUint returns the cached uint of SUSPICION_CONTROL_SLACK_ENABLED variable.
func SuspicionControlSlackEnabledUint() uint {
	return *((suspicionControlSlackEnabledUintCacher.Get()).(*uint))
}

// SuspicionControlSlackEnabledBool returns the cached bool of SUSPICION_CONTROL_SLACK_ENABLED variable.
func SuspicionControlSlackEnabledBool() bool {
	return *((suspicionControlSlackEnabledBoolCacher.Get()).(*bool))
}

// SuspicionControlSlackEnabledMs returns the cached millisecond of SUSPICION_CONTROL_SLACK_ENABLED variable.
func SuspicionControlSlackEnabledMs() time.Duration {
	return *((suspicionControlSlackEnabledMsCacher.Get()).(*time.Duration))
}

// SetSuspicionControlSlackEnabled sets the cached value.
func SetSuspicionControlSlackEnabled(v string) {
	suspicionControlSlackEnabledStr = v
	suspicionControlSlackEnabledIntCacher.Clear()
	suspicionControlSlackEnabledInt64Cacher.Clear()
	suspicionControlSlackEnabledUintCacher.Clear()
	suspicionControlSlackEnabledBoolCacher.Clear()
	suspicionControlSlackEnabledMsCacher.Clear()
}

// --------------------------------------
// TWILIO_ACCOUNT_SID
// --------------------------------------
var (
	twilioAccountSidStr = os.Getenv("TWILIO_ACCOUNT_SID")

	twilioAccountSidIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioAccountSidStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioAccountSidStr))
		}
		val := int(v)
		return &val
	})
	twilioAccountSidInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioAccountSidStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", twilioAccountSidStr))
		}
		val := int64(v)
		return &val
	})
	twilioAccountSidUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(twilioAccountSidStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioAccountSidStr))
		}
		val := uint(v)
		return &val
	})
	twilioAccountSidBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(twilioAccountSidStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", twilioAccountSidStr))
		}
		return &v
	})
	twilioAccountSidMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioAccountSidStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", twilioAccountSidStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// TwilioAccountSid returns the cached TWILIO_ACCOUNT_SID variable.
func TwilioAccountSid() string {
	return twilioAccountSidStr
}

// TwilioAccountSidInt returns the cached int of TWILIO_ACCOUNT_SID variable.
func TwilioAccountSidInt() int {
	return *((twilioAccountSidIntCacher.Get()).(*int))
}

// TwilioAccountSidInt64 returns the cached int64 of TWILIO_ACCOUNT_SID variable.
func TwilioAccountSidInt64() int64 {
	return *((twilioAccountSidInt64Cacher.Get()).(*int64))
}

// TwilioAccountSidUint returns the cached uint of TWILIO_ACCOUNT_SID variable.
func TwilioAccountSidUint() uint {
	return *((twilioAccountSidUintCacher.Get()).(*uint))
}

// TwilioAccountSidBool returns the cached bool of TWILIO_ACCOUNT_SID variable.
func TwilioAccountSidBool() bool {
	return *((twilioAccountSidBoolCacher.Get()).(*bool))
}

// TwilioAccountSidMs returns the cached millisecond of TWILIO_ACCOUNT_SID variable.
func TwilioAccountSidMs() time.Duration {
	return *((twilioAccountSidMsCacher.Get()).(*time.Duration))
}

// SetTwilioAccountSid sets the cached value.
func SetTwilioAccountSid(v string) {
	twilioAccountSidStr = v
	twilioAccountSidIntCacher.Clear()
	twilioAccountSidInt64Cacher.Clear()
	twilioAccountSidUintCacher.Clear()
	twilioAccountSidBoolCacher.Clear()
	twilioAccountSidMsCacher.Clear()
}

// --------------------------------------
// TWILIO_COUNTRY_PHONE
// --------------------------------------
var (
	twilioCountryPhoneStr = os.Getenv("TWILIO_COUNTRY_PHONE")

	twilioCountryPhoneIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioCountryPhoneStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioCountryPhoneStr))
		}
		val := int(v)
		return &val
	})
	twilioCountryPhoneInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioCountryPhoneStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", twilioCountryPhoneStr))
		}
		val := int64(v)
		return &val
	})
	twilioCountryPhoneUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(twilioCountryPhoneStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioCountryPhoneStr))
		}
		val := uint(v)
		return &val
	})
	twilioCountryPhoneBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(twilioCountryPhoneStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", twilioCountryPhoneStr))
		}
		return &v
	})
	twilioCountryPhoneMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioCountryPhoneStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", twilioCountryPhoneStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// TwilioCountryPhone returns the cached TWILIO_COUNTRY_PHONE variable.
func TwilioCountryPhone() string {
	return twilioCountryPhoneStr
}

// TwilioCountryPhoneInt returns the cached int of TWILIO_COUNTRY_PHONE variable.
func TwilioCountryPhoneInt() int {
	return *((twilioCountryPhoneIntCacher.Get()).(*int))
}

// TwilioCountryPhoneInt64 returns the cached int64 of TWILIO_COUNTRY_PHONE variable.
func TwilioCountryPhoneInt64() int64 {
	return *((twilioCountryPhoneInt64Cacher.Get()).(*int64))
}

// TwilioCountryPhoneUint returns the cached uint of TWILIO_COUNTRY_PHONE variable.
func TwilioCountryPhoneUint() uint {
	return *((twilioCountryPhoneUintCacher.Get()).(*uint))
}

// TwilioCountryPhoneBool returns the cached bool of TWILIO_COUNTRY_PHONE variable.
func TwilioCountryPhoneBool() bool {
	return *((twilioCountryPhoneBoolCacher.Get()).(*bool))
}

// TwilioCountryPhoneMs returns the cached millisecond of TWILIO_COUNTRY_PHONE variable.
func TwilioCountryPhoneMs() time.Duration {
	return *((twilioCountryPhoneMsCacher.Get()).(*time.Duration))
}

// SetTwilioCountryPhone sets the cached value.
func SetTwilioCountryPhone(v string) {
	twilioCountryPhoneStr = v
	twilioCountryPhoneIntCacher.Clear()
	twilioCountryPhoneInt64Cacher.Clear()
	twilioCountryPhoneUintCacher.Clear()
	twilioCountryPhoneBoolCacher.Clear()
	twilioCountryPhoneMsCacher.Clear()
}

// --------------------------------------
// TWILIO_FROM_PHONE_US_1
// --------------------------------------
var (
	twilioFromPhoneUs1Str = os.Getenv("TWILIO_FROM_PHONE_US_1")

	twilioFromPhoneUs1IntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioFromPhoneUs1Str, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioFromPhoneUs1Str))
		}
		val := int(v)
		return &val
	})
	twilioFromPhoneUs1Int64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioFromPhoneUs1Str, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", twilioFromPhoneUs1Str))
		}
		val := int64(v)
		return &val
	})
	twilioFromPhoneUs1UintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(twilioFromPhoneUs1Str, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioFromPhoneUs1Str))
		}
		val := uint(v)
		return &val
	})
	twilioFromPhoneUs1BoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(twilioFromPhoneUs1Str)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", twilioFromPhoneUs1Str))
		}
		return &v
	})
	twilioFromPhoneUs1MsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioFromPhoneUs1Str, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", twilioFromPhoneUs1Str))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// TwilioFromPhoneUs1 returns the cached TWILIO_FROM_PHONE_US_1 variable.
func TwilioFromPhoneUs1() string {
	return twilioFromPhoneUs1Str
}

// TwilioFromPhoneUs1Int returns the cached int of TWILIO_FROM_PHONE_US_1 variable.
func TwilioFromPhoneUs1Int() int {
	return *((twilioFromPhoneUs1IntCacher.Get()).(*int))
}

// TwilioFromPhoneUs1Int64 returns the cached int64 of TWILIO_FROM_PHONE_US_1 variable.
func TwilioFromPhoneUs1Int64() int64 {
	return *((twilioFromPhoneUs1Int64Cacher.Get()).(*int64))
}

// TwilioFromPhoneUs1Uint returns the cached uint of TWILIO_FROM_PHONE_US_1 variable.
func TwilioFromPhoneUs1Uint() uint {
	return *((twilioFromPhoneUs1UintCacher.Get()).(*uint))
}

// TwilioFromPhoneUs1Bool returns the cached bool of TWILIO_FROM_PHONE_US_1 variable.
func TwilioFromPhoneUs1Bool() bool {
	return *((twilioFromPhoneUs1BoolCacher.Get()).(*bool))
}

// TwilioFromPhoneUs1Ms returns the cached millisecond of TWILIO_FROM_PHONE_US_1 variable.
func TwilioFromPhoneUs1Ms() time.Duration {
	return *((twilioFromPhoneUs1MsCacher.Get()).(*time.Duration))
}

// SetTwilioFromPhoneUs1 sets the cached value.
func SetTwilioFromPhoneUs1(v string) {
	twilioFromPhoneUs1Str = v
	twilioFromPhoneUs1IntCacher.Clear()
	twilioFromPhoneUs1Int64Cacher.Clear()
	twilioFromPhoneUs1UintCacher.Clear()
	twilioFromPhoneUs1BoolCacher.Clear()
	twilioFromPhoneUs1MsCacher.Clear()
}

// --------------------------------------
// TWILIO_FROM_PHONE_US_2
// --------------------------------------
var (
	twilioFromPhoneUs2Str = os.Getenv("TWILIO_FROM_PHONE_US_2")

	twilioFromPhoneUs2IntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioFromPhoneUs2Str, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioFromPhoneUs2Str))
		}
		val := int(v)
		return &val
	})
	twilioFromPhoneUs2Int64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioFromPhoneUs2Str, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", twilioFromPhoneUs2Str))
		}
		val := int64(v)
		return &val
	})
	twilioFromPhoneUs2UintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(twilioFromPhoneUs2Str, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twilioFromPhoneUs2Str))
		}
		val := uint(v)
		return &val
	})
	twilioFromPhoneUs2BoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(twilioFromPhoneUs2Str)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", twilioFromPhoneUs2Str))
		}
		return &v
	})
	twilioFromPhoneUs2MsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twilioFromPhoneUs2Str, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", twilioFromPhoneUs2Str))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// TwilioFromPhoneUs2 returns the cached TWILIO_FROM_PHONE_US_2 variable.
func TwilioFromPhoneUs2() string {
	return twilioFromPhoneUs2Str
}

// TwilioFromPhoneUs2Int returns the cached int of TWILIO_FROM_PHONE_US_2 variable.
func TwilioFromPhoneUs2Int() int {
	return *((twilioFromPhoneUs2IntCacher.Get()).(*int))
}

// TwilioFromPhoneUs2Int64 returns the cached int64 of TWILIO_FROM_PHONE_US_2 variable.
func TwilioFromPhoneUs2Int64() int64 {
	return *((twilioFromPhoneUs2Int64Cacher.Get()).(*int64))
}

// TwilioFromPhoneUs2Uint returns the cached uint of TWILIO_FROM_PHONE_US_2 variable.
func TwilioFromPhoneUs2Uint() uint {
	return *((twilioFromPhoneUs2UintCacher.Get()).(*uint))
}

// TwilioFromPhoneUs2Bool returns the cached bool of TWILIO_FROM_PHONE_US_2 variable.
func TwilioFromPhoneUs2Bool() bool {
	return *((twilioFromPhoneUs2BoolCacher.Get()).(*bool))
}

// TwilioFromPhoneUs2Ms returns the cached millisecond of TWILIO_FROM_PHONE_US_2 variable.
func TwilioFromPhoneUs2Ms() time.Duration {
	return *((twilioFromPhoneUs2MsCacher.Get()).(*time.Duration))
}

// SetTwilioFromPhoneUs2 sets the cached value.
func SetTwilioFromPhoneUs2(v string) {
	twilioFromPhoneUs2Str = v
	twilioFromPhoneUs2IntCacher.Clear()
	twilioFromPhoneUs2Int64Cacher.Clear()
	twilioFromPhoneUs2UintCacher.Clear()
	twilioFromPhoneUs2BoolCacher.Clear()
	twilioFromPhoneUs2MsCacher.Clear()
}
