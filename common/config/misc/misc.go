// Code generated by cobctl. This go file is generated automatically, DO NOT EDIT.

package misc

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/cobinhood/mochi/cache/cacher"
)

// --------------------------------------
// ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE
// --------------------------------------
var (
	accessCtrlAllowOriginExchangeStr = os.Getenv("ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE")

	accessCtrlAllowOriginExchangeIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(accessCtrlAllowOriginExchangeStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", accessCtrlAllowOriginExchangeStr))
		}
		val := int(v)
		return &val
	})
	accessCtrlAllowOriginExchangeInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(accessCtrlAllowOriginExchangeStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", accessCtrlAllowOriginExchangeStr))
		}
		val := int64(v)
		return &val
	})
	accessCtrlAllowOriginExchangeUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(accessCtrlAllowOriginExchangeStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", accessCtrlAllowOriginExchangeStr))
		}
		val := uint(v)
		return &val
	})
	accessCtrlAllowOriginExchangeBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(accessCtrlAllowOriginExchangeStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", accessCtrlAllowOriginExchangeStr))
		}
		return &v
	})
	accessCtrlAllowOriginExchangeMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(accessCtrlAllowOriginExchangeStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", accessCtrlAllowOriginExchangeStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// AccessCtrlAllowOriginExchange returns the cached ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE variable.
func AccessCtrlAllowOriginExchange() string {
	return accessCtrlAllowOriginExchangeStr
}

// AccessCtrlAllowOriginExchangeInt returns the cached int of ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE variable.
func AccessCtrlAllowOriginExchangeInt() int {
	return *((accessCtrlAllowOriginExchangeIntCacher.Get()).(*int))
}

// AccessCtrlAllowOriginExchangeInt64 returns the cached int64 of ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE variable.
func AccessCtrlAllowOriginExchangeInt64() int64 {
	return *((accessCtrlAllowOriginExchangeInt64Cacher.Get()).(*int64))
}

// AccessCtrlAllowOriginExchangeUint returns the cached uint of ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE variable.
func AccessCtrlAllowOriginExchangeUint() uint {
	return *((accessCtrlAllowOriginExchangeUintCacher.Get()).(*uint))
}

// AccessCtrlAllowOriginExchangeBool returns the cached bool of ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE variable.
func AccessCtrlAllowOriginExchangeBool() bool {
	return *((accessCtrlAllowOriginExchangeBoolCacher.Get()).(*bool))
}

// AccessCtrlAllowOriginExchangeMs returns the cached millisecond of ACCESS_CTRL_ALLOW_ORIGIN_EXCHANGE variable.
func AccessCtrlAllowOriginExchangeMs() time.Duration {
	return *((accessCtrlAllowOriginExchangeMsCacher.Get()).(*time.Duration))
}

// SetAccessCtrlAllowOriginExchange sets the cached value.
func SetAccessCtrlAllowOriginExchange(v string) {
	accessCtrlAllowOriginExchangeStr = v
	accessCtrlAllowOriginExchangeIntCacher.Clear()
	accessCtrlAllowOriginExchangeInt64Cacher.Clear()
	accessCtrlAllowOriginExchangeUintCacher.Clear()
	accessCtrlAllowOriginExchangeBoolCacher.Clear()
	accessCtrlAllowOriginExchangeMsCacher.Clear()
}

// --------------------------------------
// ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER
// --------------------------------------
var (
	accessCtrlAllowOriginExplorerStr = os.Getenv("ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER")

	accessCtrlAllowOriginExplorerIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(accessCtrlAllowOriginExplorerStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", accessCtrlAllowOriginExplorerStr))
		}
		val := int(v)
		return &val
	})
	accessCtrlAllowOriginExplorerInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(accessCtrlAllowOriginExplorerStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", accessCtrlAllowOriginExplorerStr))
		}
		val := int64(v)
		return &val
	})
	accessCtrlAllowOriginExplorerUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(accessCtrlAllowOriginExplorerStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", accessCtrlAllowOriginExplorerStr))
		}
		val := uint(v)
		return &val
	})
	accessCtrlAllowOriginExplorerBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(accessCtrlAllowOriginExplorerStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", accessCtrlAllowOriginExplorerStr))
		}
		return &v
	})
	accessCtrlAllowOriginExplorerMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(accessCtrlAllowOriginExplorerStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", accessCtrlAllowOriginExplorerStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// AccessCtrlAllowOriginExplorer returns the cached ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER variable.
func AccessCtrlAllowOriginExplorer() string {
	return accessCtrlAllowOriginExplorerStr
}

// AccessCtrlAllowOriginExplorerInt returns the cached int of ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER variable.
func AccessCtrlAllowOriginExplorerInt() int {
	return *((accessCtrlAllowOriginExplorerIntCacher.Get()).(*int))
}

// AccessCtrlAllowOriginExplorerInt64 returns the cached int64 of ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER variable.
func AccessCtrlAllowOriginExplorerInt64() int64 {
	return *((accessCtrlAllowOriginExplorerInt64Cacher.Get()).(*int64))
}

// AccessCtrlAllowOriginExplorerUint returns the cached uint of ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER variable.
func AccessCtrlAllowOriginExplorerUint() uint {
	return *((accessCtrlAllowOriginExplorerUintCacher.Get()).(*uint))
}

// AccessCtrlAllowOriginExplorerBool returns the cached bool of ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER variable.
func AccessCtrlAllowOriginExplorerBool() bool {
	return *((accessCtrlAllowOriginExplorerBoolCacher.Get()).(*bool))
}

// AccessCtrlAllowOriginExplorerMs returns the cached millisecond of ACCESS_CTRL_ALLOW_ORIGIN_EXPLORER variable.
func AccessCtrlAllowOriginExplorerMs() time.Duration {
	return *((accessCtrlAllowOriginExplorerMsCacher.Get()).(*time.Duration))
}

// SetAccessCtrlAllowOriginExplorer sets the cached value.
func SetAccessCtrlAllowOriginExplorer(v string) {
	accessCtrlAllowOriginExplorerStr = v
	accessCtrlAllowOriginExplorerIntCacher.Clear()
	accessCtrlAllowOriginExplorerInt64Cacher.Clear()
	accessCtrlAllowOriginExplorerUintCacher.Clear()
	accessCtrlAllowOriginExplorerBoolCacher.Clear()
	accessCtrlAllowOriginExplorerMsCacher.Clear()
}

// --------------------------------------
// AMQP_ENDPOINT
// --------------------------------------
var (
	amqpEndpointStr = os.Getenv("AMQP_ENDPOINT")

	amqpEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(amqpEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", amqpEndpointStr))
		}
		val := int(v)
		return &val
	})
	amqpEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(amqpEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", amqpEndpointStr))
		}
		val := int64(v)
		return &val
	})
	amqpEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(amqpEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", amqpEndpointStr))
		}
		val := uint(v)
		return &val
	})
	amqpEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(amqpEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", amqpEndpointStr))
		}
		return &v
	})
	amqpEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(amqpEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", amqpEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// AmqpEndpoint returns the cached AMQP_ENDPOINT variable.
func AmqpEndpoint() string {
	return amqpEndpointStr
}

// AmqpEndpointInt returns the cached int of AMQP_ENDPOINT variable.
func AmqpEndpointInt() int {
	return *((amqpEndpointIntCacher.Get()).(*int))
}

// AmqpEndpointInt64 returns the cached int64 of AMQP_ENDPOINT variable.
func AmqpEndpointInt64() int64 {
	return *((amqpEndpointInt64Cacher.Get()).(*int64))
}

// AmqpEndpointUint returns the cached uint of AMQP_ENDPOINT variable.
func AmqpEndpointUint() uint {
	return *((amqpEndpointUintCacher.Get()).(*uint))
}

// AmqpEndpointBool returns the cached bool of AMQP_ENDPOINT variable.
func AmqpEndpointBool() bool {
	return *((amqpEndpointBoolCacher.Get()).(*bool))
}

// AmqpEndpointMs returns the cached millisecond of AMQP_ENDPOINT variable.
func AmqpEndpointMs() time.Duration {
	return *((amqpEndpointMsCacher.Get()).(*time.Duration))
}

// SetAmqpEndpoint sets the cached value.
func SetAmqpEndpoint(v string) {
	amqpEndpointStr = v
	amqpEndpointIntCacher.Clear()
	amqpEndpointInt64Cacher.Clear()
	amqpEndpointUintCacher.Clear()
	amqpEndpointBoolCacher.Clear()
	amqpEndpointMsCacher.Clear()
}

// --------------------------------------
// API_ADMIN_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	apiAdminServerListenAddressStr = os.Getenv("API_ADMIN_SERVER_LISTEN_ADDRESS")

	apiAdminServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiAdminServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiAdminServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	apiAdminServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiAdminServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", apiAdminServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	apiAdminServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(apiAdminServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiAdminServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	apiAdminServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(apiAdminServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", apiAdminServerListenAddressStr))
		}
		return &v
	})
	apiAdminServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiAdminServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", apiAdminServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ApiAdminServerListenAddress returns the cached API_ADMIN_SERVER_LISTEN_ADDRESS variable.
func ApiAdminServerListenAddress() string {
	return apiAdminServerListenAddressStr
}

// ApiAdminServerListenAddressInt returns the cached int of API_ADMIN_SERVER_LISTEN_ADDRESS variable.
func ApiAdminServerListenAddressInt() int {
	return *((apiAdminServerListenAddressIntCacher.Get()).(*int))
}

// ApiAdminServerListenAddressInt64 returns the cached int64 of API_ADMIN_SERVER_LISTEN_ADDRESS variable.
func ApiAdminServerListenAddressInt64() int64 {
	return *((apiAdminServerListenAddressInt64Cacher.Get()).(*int64))
}

// ApiAdminServerListenAddressUint returns the cached uint of API_ADMIN_SERVER_LISTEN_ADDRESS variable.
func ApiAdminServerListenAddressUint() uint {
	return *((apiAdminServerListenAddressUintCacher.Get()).(*uint))
}

// ApiAdminServerListenAddressBool returns the cached bool of API_ADMIN_SERVER_LISTEN_ADDRESS variable.
func ApiAdminServerListenAddressBool() bool {
	return *((apiAdminServerListenAddressBoolCacher.Get()).(*bool))
}

// ApiAdminServerListenAddressMs returns the cached millisecond of API_ADMIN_SERVER_LISTEN_ADDRESS variable.
func ApiAdminServerListenAddressMs() time.Duration {
	return *((apiAdminServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetApiAdminServerListenAddress sets the cached value.
func SetApiAdminServerListenAddress(v string) {
	apiAdminServerListenAddressStr = v
	apiAdminServerListenAddressIntCacher.Clear()
	apiAdminServerListenAddressInt64Cacher.Clear()
	apiAdminServerListenAddressUintCacher.Clear()
	apiAdminServerListenAddressBoolCacher.Clear()
	apiAdminServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// API_COBLET_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	apiCobletServerListenAddressStr = os.Getenv("API_COBLET_SERVER_LISTEN_ADDRESS")

	apiCobletServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiCobletServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiCobletServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	apiCobletServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiCobletServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", apiCobletServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	apiCobletServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(apiCobletServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiCobletServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	apiCobletServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(apiCobletServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", apiCobletServerListenAddressStr))
		}
		return &v
	})
	apiCobletServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiCobletServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", apiCobletServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ApiCobletServerListenAddress returns the cached API_COBLET_SERVER_LISTEN_ADDRESS variable.
func ApiCobletServerListenAddress() string {
	return apiCobletServerListenAddressStr
}

// ApiCobletServerListenAddressInt returns the cached int of API_COBLET_SERVER_LISTEN_ADDRESS variable.
func ApiCobletServerListenAddressInt() int {
	return *((apiCobletServerListenAddressIntCacher.Get()).(*int))
}

// ApiCobletServerListenAddressInt64 returns the cached int64 of API_COBLET_SERVER_LISTEN_ADDRESS variable.
func ApiCobletServerListenAddressInt64() int64 {
	return *((apiCobletServerListenAddressInt64Cacher.Get()).(*int64))
}

// ApiCobletServerListenAddressUint returns the cached uint of API_COBLET_SERVER_LISTEN_ADDRESS variable.
func ApiCobletServerListenAddressUint() uint {
	return *((apiCobletServerListenAddressUintCacher.Get()).(*uint))
}

// ApiCobletServerListenAddressBool returns the cached bool of API_COBLET_SERVER_LISTEN_ADDRESS variable.
func ApiCobletServerListenAddressBool() bool {
	return *((apiCobletServerListenAddressBoolCacher.Get()).(*bool))
}

// ApiCobletServerListenAddressMs returns the cached millisecond of API_COBLET_SERVER_LISTEN_ADDRESS variable.
func ApiCobletServerListenAddressMs() time.Duration {
	return *((apiCobletServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetApiCobletServerListenAddress sets the cached value.
func SetApiCobletServerListenAddress(v string) {
	apiCobletServerListenAddressStr = v
	apiCobletServerListenAddressIntCacher.Clear()
	apiCobletServerListenAddressInt64Cacher.Clear()
	apiCobletServerListenAddressUintCacher.Clear()
	apiCobletServerListenAddressBoolCacher.Clear()
	apiCobletServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// API_EXPLORER_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	apiExplorerServerListenAddressStr = os.Getenv("API_EXPLORER_SERVER_LISTEN_ADDRESS")

	apiExplorerServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiExplorerServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiExplorerServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	apiExplorerServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiExplorerServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", apiExplorerServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	apiExplorerServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(apiExplorerServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiExplorerServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	apiExplorerServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(apiExplorerServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", apiExplorerServerListenAddressStr))
		}
		return &v
	})
	apiExplorerServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiExplorerServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", apiExplorerServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ApiExplorerServerListenAddress returns the cached API_EXPLORER_SERVER_LISTEN_ADDRESS variable.
func ApiExplorerServerListenAddress() string {
	return apiExplorerServerListenAddressStr
}

// ApiExplorerServerListenAddressInt returns the cached int of API_EXPLORER_SERVER_LISTEN_ADDRESS variable.
func ApiExplorerServerListenAddressInt() int {
	return *((apiExplorerServerListenAddressIntCacher.Get()).(*int))
}

// ApiExplorerServerListenAddressInt64 returns the cached int64 of API_EXPLORER_SERVER_LISTEN_ADDRESS variable.
func ApiExplorerServerListenAddressInt64() int64 {
	return *((apiExplorerServerListenAddressInt64Cacher.Get()).(*int64))
}

// ApiExplorerServerListenAddressUint returns the cached uint of API_EXPLORER_SERVER_LISTEN_ADDRESS variable.
func ApiExplorerServerListenAddressUint() uint {
	return *((apiExplorerServerListenAddressUintCacher.Get()).(*uint))
}

// ApiExplorerServerListenAddressBool returns the cached bool of API_EXPLORER_SERVER_LISTEN_ADDRESS variable.
func ApiExplorerServerListenAddressBool() bool {
	return *((apiExplorerServerListenAddressBoolCacher.Get()).(*bool))
}

// ApiExplorerServerListenAddressMs returns the cached millisecond of API_EXPLORER_SERVER_LISTEN_ADDRESS variable.
func ApiExplorerServerListenAddressMs() time.Duration {
	return *((apiExplorerServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetApiExplorerServerListenAddress sets the cached value.
func SetApiExplorerServerListenAddress(v string) {
	apiExplorerServerListenAddressStr = v
	apiExplorerServerListenAddressIntCacher.Clear()
	apiExplorerServerListenAddressInt64Cacher.Clear()
	apiExplorerServerListenAddressUintCacher.Clear()
	apiExplorerServerListenAddressBoolCacher.Clear()
	apiExplorerServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// API_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	apiServerListenAddressStr = os.Getenv("API_SERVER_LISTEN_ADDRESS")

	apiServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	apiServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", apiServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	apiServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(apiServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", apiServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	apiServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(apiServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", apiServerListenAddressStr))
		}
		return &v
	})
	apiServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(apiServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", apiServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ApiServerListenAddress returns the cached API_SERVER_LISTEN_ADDRESS variable.
func ApiServerListenAddress() string {
	return apiServerListenAddressStr
}

// ApiServerListenAddressInt returns the cached int of API_SERVER_LISTEN_ADDRESS variable.
func ApiServerListenAddressInt() int {
	return *((apiServerListenAddressIntCacher.Get()).(*int))
}

// ApiServerListenAddressInt64 returns the cached int64 of API_SERVER_LISTEN_ADDRESS variable.
func ApiServerListenAddressInt64() int64 {
	return *((apiServerListenAddressInt64Cacher.Get()).(*int64))
}

// ApiServerListenAddressUint returns the cached uint of API_SERVER_LISTEN_ADDRESS variable.
func ApiServerListenAddressUint() uint {
	return *((apiServerListenAddressUintCacher.Get()).(*uint))
}

// ApiServerListenAddressBool returns the cached bool of API_SERVER_LISTEN_ADDRESS variable.
func ApiServerListenAddressBool() bool {
	return *((apiServerListenAddressBoolCacher.Get()).(*bool))
}

// ApiServerListenAddressMs returns the cached millisecond of API_SERVER_LISTEN_ADDRESS variable.
func ApiServerListenAddressMs() time.Duration {
	return *((apiServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetApiServerListenAddress sets the cached value.
func SetApiServerListenAddress(v string) {
	apiServerListenAddressStr = v
	apiServerListenAddressIntCacher.Clear()
	apiServerListenAddressInt64Cacher.Clear()
	apiServerListenAddressUintCacher.Clear()
	apiServerListenAddressBoolCacher.Clear()
	apiServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// APP_NOTIFICATION_SERVICE
// --------------------------------------
var (
	appNotificationServiceStr = os.Getenv("APP_NOTIFICATION_SERVICE")

	appNotificationServiceIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(appNotificationServiceStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", appNotificationServiceStr))
		}
		val := int(v)
		return &val
	})
	appNotificationServiceInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(appNotificationServiceStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", appNotificationServiceStr))
		}
		val := int64(v)
		return &val
	})
	appNotificationServiceUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(appNotificationServiceStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", appNotificationServiceStr))
		}
		val := uint(v)
		return &val
	})
	appNotificationServiceBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(appNotificationServiceStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", appNotificationServiceStr))
		}
		return &v
	})
	appNotificationServiceMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(appNotificationServiceStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", appNotificationServiceStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// AppNotificationService returns the cached APP_NOTIFICATION_SERVICE variable.
func AppNotificationService() string {
	return appNotificationServiceStr
}

// AppNotificationServiceInt returns the cached int of APP_NOTIFICATION_SERVICE variable.
func AppNotificationServiceInt() int {
	return *((appNotificationServiceIntCacher.Get()).(*int))
}

// AppNotificationServiceInt64 returns the cached int64 of APP_NOTIFICATION_SERVICE variable.
func AppNotificationServiceInt64() int64 {
	return *((appNotificationServiceInt64Cacher.Get()).(*int64))
}

// AppNotificationServiceUint returns the cached uint of APP_NOTIFICATION_SERVICE variable.
func AppNotificationServiceUint() uint {
	return *((appNotificationServiceUintCacher.Get()).(*uint))
}

// AppNotificationServiceBool returns the cached bool of APP_NOTIFICATION_SERVICE variable.
func AppNotificationServiceBool() bool {
	return *((appNotificationServiceBoolCacher.Get()).(*bool))
}

// AppNotificationServiceMs returns the cached millisecond of APP_NOTIFICATION_SERVICE variable.
func AppNotificationServiceMs() time.Duration {
	return *((appNotificationServiceMsCacher.Get()).(*time.Duration))
}

// SetAppNotificationService sets the cached value.
func SetAppNotificationService(v string) {
	appNotificationServiceStr = v
	appNotificationServiceIntCacher.Clear()
	appNotificationServiceInt64Cacher.Clear()
	appNotificationServiceUintCacher.Clear()
	appNotificationServiceBoolCacher.Clear()
	appNotificationServiceMsCacher.Clear()
}

// --------------------------------------
// BANK_ACCOUNT_LIMIT
// --------------------------------------
var (
	bankAccountLimitStr = os.Getenv("BANK_ACCOUNT_LIMIT")

	bankAccountLimitIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(bankAccountLimitStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", bankAccountLimitStr))
		}
		val := int(v)
		return &val
	})
	bankAccountLimitInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(bankAccountLimitStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", bankAccountLimitStr))
		}
		val := int64(v)
		return &val
	})
	bankAccountLimitUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(bankAccountLimitStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", bankAccountLimitStr))
		}
		val := uint(v)
		return &val
	})
	bankAccountLimitBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(bankAccountLimitStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", bankAccountLimitStr))
		}
		return &v
	})
	bankAccountLimitMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(bankAccountLimitStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", bankAccountLimitStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BankAccountLimit returns the cached BANK_ACCOUNT_LIMIT variable.
func BankAccountLimit() string {
	return bankAccountLimitStr
}

// BankAccountLimitInt returns the cached int of BANK_ACCOUNT_LIMIT variable.
func BankAccountLimitInt() int {
	return *((bankAccountLimitIntCacher.Get()).(*int))
}

// BankAccountLimitInt64 returns the cached int64 of BANK_ACCOUNT_LIMIT variable.
func BankAccountLimitInt64() int64 {
	return *((bankAccountLimitInt64Cacher.Get()).(*int64))
}

// BankAccountLimitUint returns the cached uint of BANK_ACCOUNT_LIMIT variable.
func BankAccountLimitUint() uint {
	return *((bankAccountLimitUintCacher.Get()).(*uint))
}

// BankAccountLimitBool returns the cached bool of BANK_ACCOUNT_LIMIT variable.
func BankAccountLimitBool() bool {
	return *((bankAccountLimitBoolCacher.Get()).(*bool))
}

// BankAccountLimitMs returns the cached millisecond of BANK_ACCOUNT_LIMIT variable.
func BankAccountLimitMs() time.Duration {
	return *((bankAccountLimitMsCacher.Get()).(*time.Duration))
}

// SetBankAccountLimit sets the cached value.
func SetBankAccountLimit(v string) {
	bankAccountLimitStr = v
	bankAccountLimitIntCacher.Clear()
	bankAccountLimitInt64Cacher.Clear()
	bankAccountLimitUintCacher.Clear()
	bankAccountLimitBoolCacher.Clear()
	bankAccountLimitMsCacher.Clear()
}

// --------------------------------------
// CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT
// --------------------------------------
var (
	changeEmailEmailTokenTimeoutStr = os.Getenv("CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT")

	changeEmailEmailTokenTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(changeEmailEmailTokenTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", changeEmailEmailTokenTimeoutStr))
		}
		val := int(v)
		return &val
	})
	changeEmailEmailTokenTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(changeEmailEmailTokenTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", changeEmailEmailTokenTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	changeEmailEmailTokenTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(changeEmailEmailTokenTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", changeEmailEmailTokenTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	changeEmailEmailTokenTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(changeEmailEmailTokenTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", changeEmailEmailTokenTimeoutStr))
		}
		return &v
	})
	changeEmailEmailTokenTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(changeEmailEmailTokenTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", changeEmailEmailTokenTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ChangeEmailEmailTokenTimeout returns the cached CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT variable.
func ChangeEmailEmailTokenTimeout() string {
	return changeEmailEmailTokenTimeoutStr
}

// ChangeEmailEmailTokenTimeoutInt returns the cached int of CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT variable.
func ChangeEmailEmailTokenTimeoutInt() int {
	return *((changeEmailEmailTokenTimeoutIntCacher.Get()).(*int))
}

// ChangeEmailEmailTokenTimeoutInt64 returns the cached int64 of CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT variable.
func ChangeEmailEmailTokenTimeoutInt64() int64 {
	return *((changeEmailEmailTokenTimeoutInt64Cacher.Get()).(*int64))
}

// ChangeEmailEmailTokenTimeoutUint returns the cached uint of CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT variable.
func ChangeEmailEmailTokenTimeoutUint() uint {
	return *((changeEmailEmailTokenTimeoutUintCacher.Get()).(*uint))
}

// ChangeEmailEmailTokenTimeoutBool returns the cached bool of CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT variable.
func ChangeEmailEmailTokenTimeoutBool() bool {
	return *((changeEmailEmailTokenTimeoutBoolCacher.Get()).(*bool))
}

// ChangeEmailEmailTokenTimeoutMs returns the cached millisecond of CHANGE_EMAIL_EMAIL_TOKEN_TIMEOUT variable.
func ChangeEmailEmailTokenTimeoutMs() time.Duration {
	return *((changeEmailEmailTokenTimeoutMsCacher.Get()).(*time.Duration))
}

// SetChangeEmailEmailTokenTimeout sets the cached value.
func SetChangeEmailEmailTokenTimeout(v string) {
	changeEmailEmailTokenTimeoutStr = v
	changeEmailEmailTokenTimeoutIntCacher.Clear()
	changeEmailEmailTokenTimeoutInt64Cacher.Clear()
	changeEmailEmailTokenTimeoutUintCacher.Clear()
	changeEmailEmailTokenTimeoutBoolCacher.Clear()
	changeEmailEmailTokenTimeoutMsCacher.Clear()
}

// --------------------------------------
// COMPUTING_WORKER_NUM
// --------------------------------------
var (
	computingWorkerNumStr = os.Getenv("COMPUTING_WORKER_NUM")

	computingWorkerNumIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(computingWorkerNumStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", computingWorkerNumStr))
		}
		val := int(v)
		return &val
	})
	computingWorkerNumInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(computingWorkerNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", computingWorkerNumStr))
		}
		val := int64(v)
		return &val
	})
	computingWorkerNumUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(computingWorkerNumStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", computingWorkerNumStr))
		}
		val := uint(v)
		return &val
	})
	computingWorkerNumBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(computingWorkerNumStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", computingWorkerNumStr))
		}
		return &v
	})
	computingWorkerNumMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(computingWorkerNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", computingWorkerNumStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ComputingWorkerNum returns the cached COMPUTING_WORKER_NUM variable.
func ComputingWorkerNum() string {
	return computingWorkerNumStr
}

// ComputingWorkerNumInt returns the cached int of COMPUTING_WORKER_NUM variable.
func ComputingWorkerNumInt() int {
	return *((computingWorkerNumIntCacher.Get()).(*int))
}

// ComputingWorkerNumInt64 returns the cached int64 of COMPUTING_WORKER_NUM variable.
func ComputingWorkerNumInt64() int64 {
	return *((computingWorkerNumInt64Cacher.Get()).(*int64))
}

// ComputingWorkerNumUint returns the cached uint of COMPUTING_WORKER_NUM variable.
func ComputingWorkerNumUint() uint {
	return *((computingWorkerNumUintCacher.Get()).(*uint))
}

// ComputingWorkerNumBool returns the cached bool of COMPUTING_WORKER_NUM variable.
func ComputingWorkerNumBool() bool {
	return *((computingWorkerNumBoolCacher.Get()).(*bool))
}

// ComputingWorkerNumMs returns the cached millisecond of COMPUTING_WORKER_NUM variable.
func ComputingWorkerNumMs() time.Duration {
	return *((computingWorkerNumMsCacher.Get()).(*time.Duration))
}

// SetComputingWorkerNum sets the cached value.
func SetComputingWorkerNum(v string) {
	computingWorkerNumStr = v
	computingWorkerNumIntCacher.Clear()
	computingWorkerNumInt64Cacher.Clear()
	computingWorkerNumUintCacher.Clear()
	computingWorkerNumBoolCacher.Clear()
	computingWorkerNumMsCacher.Clear()
}

// --------------------------------------
// DOMAIN
// --------------------------------------
var (
	domainStr = os.Getenv("DOMAIN")

	domainIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(domainStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", domainStr))
		}
		val := int(v)
		return &val
	})
	domainInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(domainStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", domainStr))
		}
		val := int64(v)
		return &val
	})
	domainUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(domainStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", domainStr))
		}
		val := uint(v)
		return &val
	})
	domainBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(domainStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", domainStr))
		}
		return &v
	})
	domainMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(domainStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", domainStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Domain returns the cached DOMAIN variable.
func Domain() string {
	return domainStr
}

// DomainInt returns the cached int of DOMAIN variable.
func DomainInt() int {
	return *((domainIntCacher.Get()).(*int))
}

// DomainInt64 returns the cached int64 of DOMAIN variable.
func DomainInt64() int64 {
	return *((domainInt64Cacher.Get()).(*int64))
}

// DomainUint returns the cached uint of DOMAIN variable.
func DomainUint() uint {
	return *((domainUintCacher.Get()).(*uint))
}

// DomainBool returns the cached bool of DOMAIN variable.
func DomainBool() bool {
	return *((domainBoolCacher.Get()).(*bool))
}

// DomainMs returns the cached millisecond of DOMAIN variable.
func DomainMs() time.Duration {
	return *((domainMsCacher.Get()).(*time.Duration))
}

// SetDomain sets the cached value.
func SetDomain(v string) {
	domainStr = v
	domainIntCacher.Clear()
	domainInt64Cacher.Clear()
	domainUintCacher.Clear()
	domainBoolCacher.Clear()
	domainMsCacher.Clear()
}

// --------------------------------------
// COBINHOOD_SECRET_PATH
// --------------------------------------
var (
	cobinhoodSecretPathStr = os.Getenv("COBINHOOD_SECRET_PATH")

	cobinhoodSecretPathIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(cobinhoodSecretPathStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", cobinhoodSecretPathStr))
		}
		val := int(v)
		return &val
	})
	cobinhoodSecretPathInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(cobinhoodSecretPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", cobinhoodSecretPathStr))
		}
		val := int64(v)
		return &val
	})
	cobinhoodSecretPathUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(cobinhoodSecretPathStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", cobinhoodSecretPathStr))
		}
		val := uint(v)
		return &val
	})
	cobinhoodSecretPathBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(cobinhoodSecretPathStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", cobinhoodSecretPathStr))
		}
		return &v
	})
	cobinhoodSecretPathMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(cobinhoodSecretPathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", cobinhoodSecretPathStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// CobinhoodSecretPath returns the cached COBINHOOD_SECRET_PATH variable.
func CobinhoodSecretPath() string {
	return cobinhoodSecretPathStr
}

// CobinhoodSecretPathInt returns the cached int of COBINHOOD_SECRET_PATH variable.
func CobinhoodSecretPathInt() int {
	return *((cobinhoodSecretPathIntCacher.Get()).(*int))
}

// CobinhoodSecretPathInt64 returns the cached int64 of COBINHOOD_SECRET_PATH variable.
func CobinhoodSecretPathInt64() int64 {
	return *((cobinhoodSecretPathInt64Cacher.Get()).(*int64))
}

// CobinhoodSecretPathUint returns the cached uint of COBINHOOD_SECRET_PATH variable.
func CobinhoodSecretPathUint() uint {
	return *((cobinhoodSecretPathUintCacher.Get()).(*uint))
}

// CobinhoodSecretPathBool returns the cached bool of COBINHOOD_SECRET_PATH variable.
func CobinhoodSecretPathBool() bool {
	return *((cobinhoodSecretPathBoolCacher.Get()).(*bool))
}

// CobinhoodSecretPathMs returns the cached millisecond of COBINHOOD_SECRET_PATH variable.
func CobinhoodSecretPathMs() time.Duration {
	return *((cobinhoodSecretPathMsCacher.Get()).(*time.Duration))
}

// SetCobinhoodSecretPath sets the cached value.
func SetCobinhoodSecretPath(v string) {
	cobinhoodSecretPathStr = v
	cobinhoodSecretPathIntCacher.Clear()
	cobinhoodSecretPathInt64Cacher.Clear()
	cobinhoodSecretPathUintCacher.Clear()
	cobinhoodSecretPathBoolCacher.Clear()
	cobinhoodSecretPathMsCacher.Clear()
}

// --------------------------------------
// CLOUD_IP
// --------------------------------------
var (
	cloudIpStr = os.Getenv("CLOUD_IP")

	cloudIpIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(cloudIpStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", cloudIpStr))
		}
		val := int(v)
		return &val
	})
	cloudIpInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(cloudIpStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", cloudIpStr))
		}
		val := int64(v)
		return &val
	})
	cloudIpUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(cloudIpStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", cloudIpStr))
		}
		val := uint(v)
		return &val
	})
	cloudIpBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(cloudIpStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", cloudIpStr))
		}
		return &v
	})
	cloudIpMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(cloudIpStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", cloudIpStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// CloudIp returns the cached CLOUD_IP variable.
func CloudIp() string {
	return cloudIpStr
}

// CloudIpInt returns the cached int of CLOUD_IP variable.
func CloudIpInt() int {
	return *((cloudIpIntCacher.Get()).(*int))
}

// CloudIpInt64 returns the cached int64 of CLOUD_IP variable.
func CloudIpInt64() int64 {
	return *((cloudIpInt64Cacher.Get()).(*int64))
}

// CloudIpUint returns the cached uint of CLOUD_IP variable.
func CloudIpUint() uint {
	return *((cloudIpUintCacher.Get()).(*uint))
}

// CloudIpBool returns the cached bool of CLOUD_IP variable.
func CloudIpBool() bool {
	return *((cloudIpBoolCacher.Get()).(*bool))
}

// CloudIpMs returns the cached millisecond of CLOUD_IP variable.
func CloudIpMs() time.Duration {
	return *((cloudIpMsCacher.Get()).(*time.Duration))
}

// SetCloudIp sets the cached value.
func SetCloudIp(v string) {
	cloudIpStr = v
	cloudIpIntCacher.Clear()
	cloudIpInt64Cacher.Clear()
	cloudIpUintCacher.Clear()
	cloudIpBoolCacher.Clear()
	cloudIpMsCacher.Clear()
}

// --------------------------------------
// CURRENCY_RANKS
// --------------------------------------
var (
	currencyRanksStr = os.Getenv("CURRENCY_RANKS")

	currencyRanksIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencyRanksStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", currencyRanksStr))
		}
		val := int(v)
		return &val
	})
	currencyRanksInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencyRanksStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", currencyRanksStr))
		}
		val := int64(v)
		return &val
	})
	currencyRanksUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(currencyRanksStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", currencyRanksStr))
		}
		val := uint(v)
		return &val
	})
	currencyRanksBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(currencyRanksStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", currencyRanksStr))
		}
		return &v
	})
	currencyRanksMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(currencyRanksStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", currencyRanksStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// CurrencyRanks returns the cached CURRENCY_RANKS variable.
func CurrencyRanks() string {
	return currencyRanksStr
}

// CurrencyRanksInt returns the cached int of CURRENCY_RANKS variable.
func CurrencyRanksInt() int {
	return *((currencyRanksIntCacher.Get()).(*int))
}

// CurrencyRanksInt64 returns the cached int64 of CURRENCY_RANKS variable.
func CurrencyRanksInt64() int64 {
	return *((currencyRanksInt64Cacher.Get()).(*int64))
}

// CurrencyRanksUint returns the cached uint of CURRENCY_RANKS variable.
func CurrencyRanksUint() uint {
	return *((currencyRanksUintCacher.Get()).(*uint))
}

// CurrencyRanksBool returns the cached bool of CURRENCY_RANKS variable.
func CurrencyRanksBool() bool {
	return *((currencyRanksBoolCacher.Get()).(*bool))
}

// CurrencyRanksMs returns the cached millisecond of CURRENCY_RANKS variable.
func CurrencyRanksMs() time.Duration {
	return *((currencyRanksMsCacher.Get()).(*time.Duration))
}

// SetCurrencyRanks sets the cached value.
func SetCurrencyRanks(v string) {
	currencyRanksStr = v
	currencyRanksIntCacher.Clear()
	currencyRanksInt64Cacher.Clear()
	currencyRanksUintCacher.Clear()
	currencyRanksBoolCacher.Clear()
	currencyRanksMsCacher.Clear()
}

// --------------------------------------
// DB_DIALECT
// --------------------------------------
var (
	dbDialectStr = os.Getenv("DB_DIALECT")

	dbDialectIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbDialectStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbDialectStr))
		}
		val := int(v)
		return &val
	})
	dbDialectInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbDialectStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dbDialectStr))
		}
		val := int64(v)
		return &val
	})
	dbDialectUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dbDialectStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbDialectStr))
		}
		val := uint(v)
		return &val
	})
	dbDialectBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dbDialectStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dbDialectStr))
		}
		return &v
	})
	dbDialectMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbDialectStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dbDialectStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DbDialect returns the cached DB_DIALECT variable.
func DbDialect() string {
	return dbDialectStr
}

// DbDialectInt returns the cached int of DB_DIALECT variable.
func DbDialectInt() int {
	return *((dbDialectIntCacher.Get()).(*int))
}

// DbDialectInt64 returns the cached int64 of DB_DIALECT variable.
func DbDialectInt64() int64 {
	return *((dbDialectInt64Cacher.Get()).(*int64))
}

// DbDialectUint returns the cached uint of DB_DIALECT variable.
func DbDialectUint() uint {
	return *((dbDialectUintCacher.Get()).(*uint))
}

// DbDialectBool returns the cached bool of DB_DIALECT variable.
func DbDialectBool() bool {
	return *((dbDialectBoolCacher.Get()).(*bool))
}

// DbDialectMs returns the cached millisecond of DB_DIALECT variable.
func DbDialectMs() time.Duration {
	return *((dbDialectMsCacher.Get()).(*time.Duration))
}

// SetDbDialect sets the cached value.
func SetDbDialect(v string) {
	dbDialectStr = v
	dbDialectIntCacher.Clear()
	dbDialectInt64Cacher.Clear()
	dbDialectUintCacher.Clear()
	dbDialectBoolCacher.Clear()
	dbDialectMsCacher.Clear()
}

// --------------------------------------
// DB_MAX_IDLE_CONNS
// --------------------------------------
var (
	dbMaxIdleConnsStr = os.Getenv("DB_MAX_IDLE_CONNS")

	dbMaxIdleConnsIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbMaxIdleConnsStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbMaxIdleConnsStr))
		}
		val := int(v)
		return &val
	})
	dbMaxIdleConnsInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbMaxIdleConnsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dbMaxIdleConnsStr))
		}
		val := int64(v)
		return &val
	})
	dbMaxIdleConnsUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dbMaxIdleConnsStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbMaxIdleConnsStr))
		}
		val := uint(v)
		return &val
	})
	dbMaxIdleConnsBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dbMaxIdleConnsStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dbMaxIdleConnsStr))
		}
		return &v
	})
	dbMaxIdleConnsMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbMaxIdleConnsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dbMaxIdleConnsStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DbMaxIdleConns returns the cached DB_MAX_IDLE_CONNS variable.
func DbMaxIdleConns() string {
	return dbMaxIdleConnsStr
}

// DbMaxIdleConnsInt returns the cached int of DB_MAX_IDLE_CONNS variable.
func DbMaxIdleConnsInt() int {
	return *((dbMaxIdleConnsIntCacher.Get()).(*int))
}

// DbMaxIdleConnsInt64 returns the cached int64 of DB_MAX_IDLE_CONNS variable.
func DbMaxIdleConnsInt64() int64 {
	return *((dbMaxIdleConnsInt64Cacher.Get()).(*int64))
}

// DbMaxIdleConnsUint returns the cached uint of DB_MAX_IDLE_CONNS variable.
func DbMaxIdleConnsUint() uint {
	return *((dbMaxIdleConnsUintCacher.Get()).(*uint))
}

// DbMaxIdleConnsBool returns the cached bool of DB_MAX_IDLE_CONNS variable.
func DbMaxIdleConnsBool() bool {
	return *((dbMaxIdleConnsBoolCacher.Get()).(*bool))
}

// DbMaxIdleConnsMs returns the cached millisecond of DB_MAX_IDLE_CONNS variable.
func DbMaxIdleConnsMs() time.Duration {
	return *((dbMaxIdleConnsMsCacher.Get()).(*time.Duration))
}

// SetDbMaxIdleConns sets the cached value.
func SetDbMaxIdleConns(v string) {
	dbMaxIdleConnsStr = v
	dbMaxIdleConnsIntCacher.Clear()
	dbMaxIdleConnsInt64Cacher.Clear()
	dbMaxIdleConnsUintCacher.Clear()
	dbMaxIdleConnsBoolCacher.Clear()
	dbMaxIdleConnsMsCacher.Clear()
}

// --------------------------------------
// DB_MAX_OPEN_CONNS
// --------------------------------------
var (
	dbMaxOpenConnsStr = os.Getenv("DB_MAX_OPEN_CONNS")

	dbMaxOpenConnsIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbMaxOpenConnsStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbMaxOpenConnsStr))
		}
		val := int(v)
		return &val
	})
	dbMaxOpenConnsInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbMaxOpenConnsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dbMaxOpenConnsStr))
		}
		val := int64(v)
		return &val
	})
	dbMaxOpenConnsUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dbMaxOpenConnsStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbMaxOpenConnsStr))
		}
		val := uint(v)
		return &val
	})
	dbMaxOpenConnsBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dbMaxOpenConnsStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dbMaxOpenConnsStr))
		}
		return &v
	})
	dbMaxOpenConnsMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbMaxOpenConnsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dbMaxOpenConnsStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DbMaxOpenConns returns the cached DB_MAX_OPEN_CONNS variable.
func DbMaxOpenConns() string {
	return dbMaxOpenConnsStr
}

// DbMaxOpenConnsInt returns the cached int of DB_MAX_OPEN_CONNS variable.
func DbMaxOpenConnsInt() int {
	return *((dbMaxOpenConnsIntCacher.Get()).(*int))
}

// DbMaxOpenConnsInt64 returns the cached int64 of DB_MAX_OPEN_CONNS variable.
func DbMaxOpenConnsInt64() int64 {
	return *((dbMaxOpenConnsInt64Cacher.Get()).(*int64))
}

// DbMaxOpenConnsUint returns the cached uint of DB_MAX_OPEN_CONNS variable.
func DbMaxOpenConnsUint() uint {
	return *((dbMaxOpenConnsUintCacher.Get()).(*uint))
}

// DbMaxOpenConnsBool returns the cached bool of DB_MAX_OPEN_CONNS variable.
func DbMaxOpenConnsBool() bool {
	return *((dbMaxOpenConnsBoolCacher.Get()).(*bool))
}

// DbMaxOpenConnsMs returns the cached millisecond of DB_MAX_OPEN_CONNS variable.
func DbMaxOpenConnsMs() time.Duration {
	return *((dbMaxOpenConnsMsCacher.Get()).(*time.Duration))
}

// SetDbMaxOpenConns sets the cached value.
func SetDbMaxOpenConns(v string) {
	dbMaxOpenConnsStr = v
	dbMaxOpenConnsIntCacher.Clear()
	dbMaxOpenConnsInt64Cacher.Clear()
	dbMaxOpenConnsUintCacher.Clear()
	dbMaxOpenConnsBoolCacher.Clear()
	dbMaxOpenConnsMsCacher.Clear()
}

// --------------------------------------
// DB_TRACE_ENABLED
// --------------------------------------
var (
	dbTraceEnabledStr = os.Getenv("DB_TRACE_ENABLED")

	dbTraceEnabledIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbTraceEnabledStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbTraceEnabledStr))
		}
		val := int(v)
		return &val
	})
	dbTraceEnabledInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbTraceEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dbTraceEnabledStr))
		}
		val := int64(v)
		return &val
	})
	dbTraceEnabledUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dbTraceEnabledStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dbTraceEnabledStr))
		}
		val := uint(v)
		return &val
	})
	dbTraceEnabledBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dbTraceEnabledStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dbTraceEnabledStr))
		}
		return &v
	})
	dbTraceEnabledMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dbTraceEnabledStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dbTraceEnabledStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DbTraceEnabled returns the cached DB_TRACE_ENABLED variable.
func DbTraceEnabled() string {
	return dbTraceEnabledStr
}

// DbTraceEnabledInt returns the cached int of DB_TRACE_ENABLED variable.
func DbTraceEnabledInt() int {
	return *((dbTraceEnabledIntCacher.Get()).(*int))
}

// DbTraceEnabledInt64 returns the cached int64 of DB_TRACE_ENABLED variable.
func DbTraceEnabledInt64() int64 {
	return *((dbTraceEnabledInt64Cacher.Get()).(*int64))
}

// DbTraceEnabledUint returns the cached uint of DB_TRACE_ENABLED variable.
func DbTraceEnabledUint() uint {
	return *((dbTraceEnabledUintCacher.Get()).(*uint))
}

// DbTraceEnabledBool returns the cached bool of DB_TRACE_ENABLED variable.
func DbTraceEnabledBool() bool {
	return *((dbTraceEnabledBoolCacher.Get()).(*bool))
}

// DbTraceEnabledMs returns the cached millisecond of DB_TRACE_ENABLED variable.
func DbTraceEnabledMs() time.Duration {
	return *((dbTraceEnabledMsCacher.Get()).(*time.Duration))
}

// SetDbTraceEnabled sets the cached value.
func SetDbTraceEnabled(v string) {
	dbTraceEnabledStr = v
	dbTraceEnabledIntCacher.Clear()
	dbTraceEnabledInt64Cacher.Clear()
	dbTraceEnabledUintCacher.Clear()
	dbTraceEnabledBoolCacher.Clear()
	dbTraceEnabledMsCacher.Clear()
}

// --------------------------------------
// DEPLOY_DIR
// --------------------------------------
var (
	deployDirStr = os.Getenv("DEPLOY_DIR")

	deployDirIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(deployDirStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", deployDirStr))
		}
		val := int(v)
		return &val
	})
	deployDirInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(deployDirStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", deployDirStr))
		}
		val := int64(v)
		return &val
	})
	deployDirUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(deployDirStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", deployDirStr))
		}
		val := uint(v)
		return &val
	})
	deployDirBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(deployDirStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", deployDirStr))
		}
		return &v
	})
	deployDirMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(deployDirStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", deployDirStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DeployDir returns the cached DEPLOY_DIR variable.
func DeployDir() string {
	return deployDirStr
}

// DeployDirInt returns the cached int of DEPLOY_DIR variable.
func DeployDirInt() int {
	return *((deployDirIntCacher.Get()).(*int))
}

// DeployDirInt64 returns the cached int64 of DEPLOY_DIR variable.
func DeployDirInt64() int64 {
	return *((deployDirInt64Cacher.Get()).(*int64))
}

// DeployDirUint returns the cached uint of DEPLOY_DIR variable.
func DeployDirUint() uint {
	return *((deployDirUintCacher.Get()).(*uint))
}

// DeployDirBool returns the cached bool of DEPLOY_DIR variable.
func DeployDirBool() bool {
	return *((deployDirBoolCacher.Get()).(*bool))
}

// DeployDirMs returns the cached millisecond of DEPLOY_DIR variable.
func DeployDirMs() time.Duration {
	return *((deployDirMsCacher.Get()).(*time.Duration))
}

// SetDeployDir sets the cached value.
func SetDeployDir(v string) {
	deployDirStr = v
	deployDirIntCacher.Clear()
	deployDirInt64Cacher.Clear()
	deployDirUintCacher.Clear()
	deployDirBoolCacher.Clear()
	deployDirMsCacher.Clear()
}

// --------------------------------------
// DISABLE_TWO_FA_DELAY_TIME_IN_HOUR
// --------------------------------------
var (
	disableTwoFaDelayTimeInHourStr = os.Getenv("DISABLE_TWO_FA_DELAY_TIME_IN_HOUR")

	disableTwoFaDelayTimeInHourIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(disableTwoFaDelayTimeInHourStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", disableTwoFaDelayTimeInHourStr))
		}
		val := int(v)
		return &val
	})
	disableTwoFaDelayTimeInHourInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(disableTwoFaDelayTimeInHourStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", disableTwoFaDelayTimeInHourStr))
		}
		val := int64(v)
		return &val
	})
	disableTwoFaDelayTimeInHourUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(disableTwoFaDelayTimeInHourStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", disableTwoFaDelayTimeInHourStr))
		}
		val := uint(v)
		return &val
	})
	disableTwoFaDelayTimeInHourBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(disableTwoFaDelayTimeInHourStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", disableTwoFaDelayTimeInHourStr))
		}
		return &v
	})
	disableTwoFaDelayTimeInHourMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(disableTwoFaDelayTimeInHourStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", disableTwoFaDelayTimeInHourStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DisableTwoFaDelayTimeInHour returns the cached DISABLE_TWO_FA_DELAY_TIME_IN_HOUR variable.
func DisableTwoFaDelayTimeInHour() string {
	return disableTwoFaDelayTimeInHourStr
}

// DisableTwoFaDelayTimeInHourInt returns the cached int of DISABLE_TWO_FA_DELAY_TIME_IN_HOUR variable.
func DisableTwoFaDelayTimeInHourInt() int {
	return *((disableTwoFaDelayTimeInHourIntCacher.Get()).(*int))
}

// DisableTwoFaDelayTimeInHourInt64 returns the cached int64 of DISABLE_TWO_FA_DELAY_TIME_IN_HOUR variable.
func DisableTwoFaDelayTimeInHourInt64() int64 {
	return *((disableTwoFaDelayTimeInHourInt64Cacher.Get()).(*int64))
}

// DisableTwoFaDelayTimeInHourUint returns the cached uint of DISABLE_TWO_FA_DELAY_TIME_IN_HOUR variable.
func DisableTwoFaDelayTimeInHourUint() uint {
	return *((disableTwoFaDelayTimeInHourUintCacher.Get()).(*uint))
}

// DisableTwoFaDelayTimeInHourBool returns the cached bool of DISABLE_TWO_FA_DELAY_TIME_IN_HOUR variable.
func DisableTwoFaDelayTimeInHourBool() bool {
	return *((disableTwoFaDelayTimeInHourBoolCacher.Get()).(*bool))
}

// DisableTwoFaDelayTimeInHourMs returns the cached millisecond of DISABLE_TWO_FA_DELAY_TIME_IN_HOUR variable.
func DisableTwoFaDelayTimeInHourMs() time.Duration {
	return *((disableTwoFaDelayTimeInHourMsCacher.Get()).(*time.Duration))
}

// SetDisableTwoFaDelayTimeInHour sets the cached value.
func SetDisableTwoFaDelayTimeInHour(v string) {
	disableTwoFaDelayTimeInHourStr = v
	disableTwoFaDelayTimeInHourIntCacher.Clear()
	disableTwoFaDelayTimeInHourInt64Cacher.Clear()
	disableTwoFaDelayTimeInHourUintCacher.Clear()
	disableTwoFaDelayTimeInHourBoolCacher.Clear()
	disableTwoFaDelayTimeInHourMsCacher.Clear()
}

// --------------------------------------
// DEXON_FULLNODE_WS_ENDPOINT
// --------------------------------------
var (
	dexonFullnodeWsEndpointStr = os.Getenv("DEXON_FULLNODE_WS_ENDPOINT")

	dexonFullnodeWsEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dexonFullnodeWsEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dexonFullnodeWsEndpointStr))
		}
		val := int(v)
		return &val
	})
	dexonFullnodeWsEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dexonFullnodeWsEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dexonFullnodeWsEndpointStr))
		}
		val := int64(v)
		return &val
	})
	dexonFullnodeWsEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dexonFullnodeWsEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dexonFullnodeWsEndpointStr))
		}
		val := uint(v)
		return &val
	})
	dexonFullnodeWsEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dexonFullnodeWsEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dexonFullnodeWsEndpointStr))
		}
		return &v
	})
	dexonFullnodeWsEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dexonFullnodeWsEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dexonFullnodeWsEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DexonFullnodeWsEndpoint returns the cached DEXON_FULLNODE_WS_ENDPOINT variable.
func DexonFullnodeWsEndpoint() string {
	return dexonFullnodeWsEndpointStr
}

// DexonFullnodeWsEndpointInt returns the cached int of DEXON_FULLNODE_WS_ENDPOINT variable.
func DexonFullnodeWsEndpointInt() int {
	return *((dexonFullnodeWsEndpointIntCacher.Get()).(*int))
}

// DexonFullnodeWsEndpointInt64 returns the cached int64 of DEXON_FULLNODE_WS_ENDPOINT variable.
func DexonFullnodeWsEndpointInt64() int64 {
	return *((dexonFullnodeWsEndpointInt64Cacher.Get()).(*int64))
}

// DexonFullnodeWsEndpointUint returns the cached uint of DEXON_FULLNODE_WS_ENDPOINT variable.
func DexonFullnodeWsEndpointUint() uint {
	return *((dexonFullnodeWsEndpointUintCacher.Get()).(*uint))
}

// DexonFullnodeWsEndpointBool returns the cached bool of DEXON_FULLNODE_WS_ENDPOINT variable.
func DexonFullnodeWsEndpointBool() bool {
	return *((dexonFullnodeWsEndpointBoolCacher.Get()).(*bool))
}

// DexonFullnodeWsEndpointMs returns the cached millisecond of DEXON_FULLNODE_WS_ENDPOINT variable.
func DexonFullnodeWsEndpointMs() time.Duration {
	return *((dexonFullnodeWsEndpointMsCacher.Get()).(*time.Duration))
}

// SetDexonFullnodeWsEndpoint sets the cached value.
func SetDexonFullnodeWsEndpoint(v string) {
	dexonFullnodeWsEndpointStr = v
	dexonFullnodeWsEndpointIntCacher.Clear()
	dexonFullnodeWsEndpointInt64Cacher.Clear()
	dexonFullnodeWsEndpointUintCacher.Clear()
	dexonFullnodeWsEndpointBoolCacher.Clear()
	dexonFullnodeWsEndpointMsCacher.Clear()
}

// --------------------------------------
// DEXON_FULLNODE_RPC_ENDPOINT
// --------------------------------------
var (
	dexonFullnodeRpcEndpointStr = os.Getenv("DEXON_FULLNODE_RPC_ENDPOINT")

	dexonFullnodeRpcEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dexonFullnodeRpcEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dexonFullnodeRpcEndpointStr))
		}
		val := int(v)
		return &val
	})
	dexonFullnodeRpcEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dexonFullnodeRpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", dexonFullnodeRpcEndpointStr))
		}
		val := int64(v)
		return &val
	})
	dexonFullnodeRpcEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(dexonFullnodeRpcEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", dexonFullnodeRpcEndpointStr))
		}
		val := uint(v)
		return &val
	})
	dexonFullnodeRpcEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(dexonFullnodeRpcEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", dexonFullnodeRpcEndpointStr))
		}
		return &v
	})
	dexonFullnodeRpcEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(dexonFullnodeRpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", dexonFullnodeRpcEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// DexonFullnodeRpcEndpoint returns the cached DEXON_FULLNODE_RPC_ENDPOINT variable.
func DexonFullnodeRpcEndpoint() string {
	return dexonFullnodeRpcEndpointStr
}

// DexonFullnodeRpcEndpointInt returns the cached int of DEXON_FULLNODE_RPC_ENDPOINT variable.
func DexonFullnodeRpcEndpointInt() int {
	return *((dexonFullnodeRpcEndpointIntCacher.Get()).(*int))
}

// DexonFullnodeRpcEndpointInt64 returns the cached int64 of DEXON_FULLNODE_RPC_ENDPOINT variable.
func DexonFullnodeRpcEndpointInt64() int64 {
	return *((dexonFullnodeRpcEndpointInt64Cacher.Get()).(*int64))
}

// DexonFullnodeRpcEndpointUint returns the cached uint of DEXON_FULLNODE_RPC_ENDPOINT variable.
func DexonFullnodeRpcEndpointUint() uint {
	return *((dexonFullnodeRpcEndpointUintCacher.Get()).(*uint))
}

// DexonFullnodeRpcEndpointBool returns the cached bool of DEXON_FULLNODE_RPC_ENDPOINT variable.
func DexonFullnodeRpcEndpointBool() bool {
	return *((dexonFullnodeRpcEndpointBoolCacher.Get()).(*bool))
}

// DexonFullnodeRpcEndpointMs returns the cached millisecond of DEXON_FULLNODE_RPC_ENDPOINT variable.
func DexonFullnodeRpcEndpointMs() time.Duration {
	return *((dexonFullnodeRpcEndpointMsCacher.Get()).(*time.Duration))
}

// SetDexonFullnodeRpcEndpoint sets the cached value.
func SetDexonFullnodeRpcEndpoint(v string) {
	dexonFullnodeRpcEndpointStr = v
	dexonFullnodeRpcEndpointIntCacher.Clear()
	dexonFullnodeRpcEndpointInt64Cacher.Clear()
	dexonFullnodeRpcEndpointUintCacher.Clear()
	dexonFullnodeRpcEndpointBoolCacher.Clear()
	dexonFullnodeRpcEndpointMsCacher.Clear()
}

// --------------------------------------
// EMAIL_EVENT_NO_DEPOSIT_DAYS
// --------------------------------------
var (
	emailEventNoDepositDaysStr = os.Getenv("EMAIL_EVENT_NO_DEPOSIT_DAYS")

	emailEventNoDepositDaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoDepositDaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailEventNoDepositDaysStr))
		}
		val := int(v)
		return &val
	})
	emailEventNoDepositDaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoDepositDaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", emailEventNoDepositDaysStr))
		}
		val := int64(v)
		return &val
	})
	emailEventNoDepositDaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(emailEventNoDepositDaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailEventNoDepositDaysStr))
		}
		val := uint(v)
		return &val
	})
	emailEventNoDepositDaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(emailEventNoDepositDaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", emailEventNoDepositDaysStr))
		}
		return &v
	})
	emailEventNoDepositDaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoDepositDaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", emailEventNoDepositDaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EmailEventNoDepositDays returns the cached EMAIL_EVENT_NO_DEPOSIT_DAYS variable.
func EmailEventNoDepositDays() string {
	return emailEventNoDepositDaysStr
}

// EmailEventNoDepositDaysInt returns the cached int of EMAIL_EVENT_NO_DEPOSIT_DAYS variable.
func EmailEventNoDepositDaysInt() int {
	return *((emailEventNoDepositDaysIntCacher.Get()).(*int))
}

// EmailEventNoDepositDaysInt64 returns the cached int64 of EMAIL_EVENT_NO_DEPOSIT_DAYS variable.
func EmailEventNoDepositDaysInt64() int64 {
	return *((emailEventNoDepositDaysInt64Cacher.Get()).(*int64))
}

// EmailEventNoDepositDaysUint returns the cached uint of EMAIL_EVENT_NO_DEPOSIT_DAYS variable.
func EmailEventNoDepositDaysUint() uint {
	return *((emailEventNoDepositDaysUintCacher.Get()).(*uint))
}

// EmailEventNoDepositDaysBool returns the cached bool of EMAIL_EVENT_NO_DEPOSIT_DAYS variable.
func EmailEventNoDepositDaysBool() bool {
	return *((emailEventNoDepositDaysBoolCacher.Get()).(*bool))
}

// EmailEventNoDepositDaysMs returns the cached millisecond of EMAIL_EVENT_NO_DEPOSIT_DAYS variable.
func EmailEventNoDepositDaysMs() time.Duration {
	return *((emailEventNoDepositDaysMsCacher.Get()).(*time.Duration))
}

// SetEmailEventNoDepositDays sets the cached value.
func SetEmailEventNoDepositDays(v string) {
	emailEventNoDepositDaysStr = v
	emailEventNoDepositDaysIntCacher.Clear()
	emailEventNoDepositDaysInt64Cacher.Clear()
	emailEventNoDepositDaysUintCacher.Clear()
	emailEventNoDepositDaysBoolCacher.Clear()
	emailEventNoDepositDaysMsCacher.Clear()
}

// --------------------------------------
// EMAIL_EVENT_NO_LOGIN_DAYS
// --------------------------------------
var (
	emailEventNoLoginDaysStr = os.Getenv("EMAIL_EVENT_NO_LOGIN_DAYS")

	emailEventNoLoginDaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoLoginDaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailEventNoLoginDaysStr))
		}
		val := int(v)
		return &val
	})
	emailEventNoLoginDaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoLoginDaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", emailEventNoLoginDaysStr))
		}
		val := int64(v)
		return &val
	})
	emailEventNoLoginDaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(emailEventNoLoginDaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailEventNoLoginDaysStr))
		}
		val := uint(v)
		return &val
	})
	emailEventNoLoginDaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(emailEventNoLoginDaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", emailEventNoLoginDaysStr))
		}
		return &v
	})
	emailEventNoLoginDaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoLoginDaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", emailEventNoLoginDaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EmailEventNoLoginDays returns the cached EMAIL_EVENT_NO_LOGIN_DAYS variable.
func EmailEventNoLoginDays() string {
	return emailEventNoLoginDaysStr
}

// EmailEventNoLoginDaysInt returns the cached int of EMAIL_EVENT_NO_LOGIN_DAYS variable.
func EmailEventNoLoginDaysInt() int {
	return *((emailEventNoLoginDaysIntCacher.Get()).(*int))
}

// EmailEventNoLoginDaysInt64 returns the cached int64 of EMAIL_EVENT_NO_LOGIN_DAYS variable.
func EmailEventNoLoginDaysInt64() int64 {
	return *((emailEventNoLoginDaysInt64Cacher.Get()).(*int64))
}

// EmailEventNoLoginDaysUint returns the cached uint of EMAIL_EVENT_NO_LOGIN_DAYS variable.
func EmailEventNoLoginDaysUint() uint {
	return *((emailEventNoLoginDaysUintCacher.Get()).(*uint))
}

// EmailEventNoLoginDaysBool returns the cached bool of EMAIL_EVENT_NO_LOGIN_DAYS variable.
func EmailEventNoLoginDaysBool() bool {
	return *((emailEventNoLoginDaysBoolCacher.Get()).(*bool))
}

// EmailEventNoLoginDaysMs returns the cached millisecond of EMAIL_EVENT_NO_LOGIN_DAYS variable.
func EmailEventNoLoginDaysMs() time.Duration {
	return *((emailEventNoLoginDaysMsCacher.Get()).(*time.Duration))
}

// SetEmailEventNoLoginDays sets the cached value.
func SetEmailEventNoLoginDays(v string) {
	emailEventNoLoginDaysStr = v
	emailEventNoLoginDaysIntCacher.Clear()
	emailEventNoLoginDaysInt64Cacher.Clear()
	emailEventNoLoginDaysUintCacher.Clear()
	emailEventNoLoginDaysBoolCacher.Clear()
	emailEventNoLoginDaysMsCacher.Clear()
}

// --------------------------------------
// EMAIL_EVENT_NO_TRADING_DAYS
// --------------------------------------
var (
	emailEventNoTradingDaysStr = os.Getenv("EMAIL_EVENT_NO_TRADING_DAYS")

	emailEventNoTradingDaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoTradingDaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailEventNoTradingDaysStr))
		}
		val := int(v)
		return &val
	})
	emailEventNoTradingDaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoTradingDaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", emailEventNoTradingDaysStr))
		}
		val := int64(v)
		return &val
	})
	emailEventNoTradingDaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(emailEventNoTradingDaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailEventNoTradingDaysStr))
		}
		val := uint(v)
		return &val
	})
	emailEventNoTradingDaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(emailEventNoTradingDaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", emailEventNoTradingDaysStr))
		}
		return &v
	})
	emailEventNoTradingDaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailEventNoTradingDaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", emailEventNoTradingDaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EmailEventNoTradingDays returns the cached EMAIL_EVENT_NO_TRADING_DAYS variable.
func EmailEventNoTradingDays() string {
	return emailEventNoTradingDaysStr
}

// EmailEventNoTradingDaysInt returns the cached int of EMAIL_EVENT_NO_TRADING_DAYS variable.
func EmailEventNoTradingDaysInt() int {
	return *((emailEventNoTradingDaysIntCacher.Get()).(*int))
}

// EmailEventNoTradingDaysInt64 returns the cached int64 of EMAIL_EVENT_NO_TRADING_DAYS variable.
func EmailEventNoTradingDaysInt64() int64 {
	return *((emailEventNoTradingDaysInt64Cacher.Get()).(*int64))
}

// EmailEventNoTradingDaysUint returns the cached uint of EMAIL_EVENT_NO_TRADING_DAYS variable.
func EmailEventNoTradingDaysUint() uint {
	return *((emailEventNoTradingDaysUintCacher.Get()).(*uint))
}

// EmailEventNoTradingDaysBool returns the cached bool of EMAIL_EVENT_NO_TRADING_DAYS variable.
func EmailEventNoTradingDaysBool() bool {
	return *((emailEventNoTradingDaysBoolCacher.Get()).(*bool))
}

// EmailEventNoTradingDaysMs returns the cached millisecond of EMAIL_EVENT_NO_TRADING_DAYS variable.
func EmailEventNoTradingDaysMs() time.Duration {
	return *((emailEventNoTradingDaysMsCacher.Get()).(*time.Duration))
}

// SetEmailEventNoTradingDays sets the cached value.
func SetEmailEventNoTradingDays(v string) {
	emailEventNoTradingDaysStr = v
	emailEventNoTradingDaysIntCacher.Clear()
	emailEventNoTradingDaysInt64Cacher.Clear()
	emailEventNoTradingDaysUintCacher.Clear()
	emailEventNoTradingDaysBoolCacher.Clear()
	emailEventNoTradingDaysMsCacher.Clear()
}

// --------------------------------------
// EMAIL_SERVICE
// --------------------------------------
var (
	emailServiceStr = os.Getenv("EMAIL_SERVICE")

	emailServiceIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailServiceStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailServiceStr))
		}
		val := int(v)
		return &val
	})
	emailServiceInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailServiceStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", emailServiceStr))
		}
		val := int64(v)
		return &val
	})
	emailServiceUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(emailServiceStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", emailServiceStr))
		}
		val := uint(v)
		return &val
	})
	emailServiceBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(emailServiceStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", emailServiceStr))
		}
		return &v
	})
	emailServiceMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(emailServiceStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", emailServiceStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// EmailService returns the cached EMAIL_SERVICE variable.
func EmailService() string {
	return emailServiceStr
}

// EmailServiceInt returns the cached int of EMAIL_SERVICE variable.
func EmailServiceInt() int {
	return *((emailServiceIntCacher.Get()).(*int))
}

// EmailServiceInt64 returns the cached int64 of EMAIL_SERVICE variable.
func EmailServiceInt64() int64 {
	return *((emailServiceInt64Cacher.Get()).(*int64))
}

// EmailServiceUint returns the cached uint of EMAIL_SERVICE variable.
func EmailServiceUint() uint {
	return *((emailServiceUintCacher.Get()).(*uint))
}

// EmailServiceBool returns the cached bool of EMAIL_SERVICE variable.
func EmailServiceBool() bool {
	return *((emailServiceBoolCacher.Get()).(*bool))
}

// EmailServiceMs returns the cached millisecond of EMAIL_SERVICE variable.
func EmailServiceMs() time.Duration {
	return *((emailServiceMsCacher.Get()).(*time.Duration))
}

// SetEmailService sets the cached value.
func SetEmailService(v string) {
	emailServiceStr = v
	emailServiceIntCacher.Clear()
	emailServiceInt64Cacher.Clear()
	emailServiceUintCacher.Clear()
	emailServiceBoolCacher.Clear()
	emailServiceMsCacher.Clear()
}

// --------------------------------------
// FIAT_RECONCILIATION_CHANNEL
// --------------------------------------
var (
	fiatReconciliationChannelStr = os.Getenv("FIAT_RECONCILIATION_CHANNEL")

	fiatReconciliationChannelIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fiatReconciliationChannelStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fiatReconciliationChannelStr))
		}
		val := int(v)
		return &val
	})
	fiatReconciliationChannelInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fiatReconciliationChannelStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", fiatReconciliationChannelStr))
		}
		val := int64(v)
		return &val
	})
	fiatReconciliationChannelUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(fiatReconciliationChannelStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fiatReconciliationChannelStr))
		}
		val := uint(v)
		return &val
	})
	fiatReconciliationChannelBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(fiatReconciliationChannelStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", fiatReconciliationChannelStr))
		}
		return &v
	})
	fiatReconciliationChannelMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fiatReconciliationChannelStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", fiatReconciliationChannelStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// FiatReconciliationChannel returns the cached FIAT_RECONCILIATION_CHANNEL variable.
func FiatReconciliationChannel() string {
	return fiatReconciliationChannelStr
}

// FiatReconciliationChannelInt returns the cached int of FIAT_RECONCILIATION_CHANNEL variable.
func FiatReconciliationChannelInt() int {
	return *((fiatReconciliationChannelIntCacher.Get()).(*int))
}

// FiatReconciliationChannelInt64 returns the cached int64 of FIAT_RECONCILIATION_CHANNEL variable.
func FiatReconciliationChannelInt64() int64 {
	return *((fiatReconciliationChannelInt64Cacher.Get()).(*int64))
}

// FiatReconciliationChannelUint returns the cached uint of FIAT_RECONCILIATION_CHANNEL variable.
func FiatReconciliationChannelUint() uint {
	return *((fiatReconciliationChannelUintCacher.Get()).(*uint))
}

// FiatReconciliationChannelBool returns the cached bool of FIAT_RECONCILIATION_CHANNEL variable.
func FiatReconciliationChannelBool() bool {
	return *((fiatReconciliationChannelBoolCacher.Get()).(*bool))
}

// FiatReconciliationChannelMs returns the cached millisecond of FIAT_RECONCILIATION_CHANNEL variable.
func FiatReconciliationChannelMs() time.Duration {
	return *((fiatReconciliationChannelMsCacher.Get()).(*time.Duration))
}

// SetFiatReconciliationChannel sets the cached value.
func SetFiatReconciliationChannel(v string) {
	fiatReconciliationChannelStr = v
	fiatReconciliationChannelIntCacher.Clear()
	fiatReconciliationChannelInt64Cacher.Clear()
	fiatReconciliationChannelUintCacher.Clear()
	fiatReconciliationChannelBoolCacher.Clear()
	fiatReconciliationChannelMsCacher.Clear()
}

// --------------------------------------
// GEOLITE2_DATABASE_CITY_SHA512SUM
// --------------------------------------
var (
	geolite2DatabaseCitySha512sumStr = os.Getenv("GEOLITE2_DATABASE_CITY_SHA512SUM")

	geolite2DatabaseCitySha512sumIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseCitySha512sumStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabaseCitySha512sumStr))
		}
		val := int(v)
		return &val
	})
	geolite2DatabaseCitySha512sumInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseCitySha512sumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", geolite2DatabaseCitySha512sumStr))
		}
		val := int64(v)
		return &val
	})
	geolite2DatabaseCitySha512sumUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(geolite2DatabaseCitySha512sumStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabaseCitySha512sumStr))
		}
		val := uint(v)
		return &val
	})
	geolite2DatabaseCitySha512sumBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(geolite2DatabaseCitySha512sumStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", geolite2DatabaseCitySha512sumStr))
		}
		return &v
	})
	geolite2DatabaseCitySha512sumMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseCitySha512sumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", geolite2DatabaseCitySha512sumStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Geolite2DatabaseCitySha512sum returns the cached GEOLITE2_DATABASE_CITY_SHA512SUM variable.
func Geolite2DatabaseCitySha512sum() string {
	return geolite2DatabaseCitySha512sumStr
}

// Geolite2DatabaseCitySha512sumInt returns the cached int of GEOLITE2_DATABASE_CITY_SHA512SUM variable.
func Geolite2DatabaseCitySha512sumInt() int {
	return *((geolite2DatabaseCitySha512sumIntCacher.Get()).(*int))
}

// Geolite2DatabaseCitySha512sumInt64 returns the cached int64 of GEOLITE2_DATABASE_CITY_SHA512SUM variable.
func Geolite2DatabaseCitySha512sumInt64() int64 {
	return *((geolite2DatabaseCitySha512sumInt64Cacher.Get()).(*int64))
}

// Geolite2DatabaseCitySha512sumUint returns the cached uint of GEOLITE2_DATABASE_CITY_SHA512SUM variable.
func Geolite2DatabaseCitySha512sumUint() uint {
	return *((geolite2DatabaseCitySha512sumUintCacher.Get()).(*uint))
}

// Geolite2DatabaseCitySha512sumBool returns the cached bool of GEOLITE2_DATABASE_CITY_SHA512SUM variable.
func Geolite2DatabaseCitySha512sumBool() bool {
	return *((geolite2DatabaseCitySha512sumBoolCacher.Get()).(*bool))
}

// Geolite2DatabaseCitySha512sumMs returns the cached millisecond of GEOLITE2_DATABASE_CITY_SHA512SUM variable.
func Geolite2DatabaseCitySha512sumMs() time.Duration {
	return *((geolite2DatabaseCitySha512sumMsCacher.Get()).(*time.Duration))
}

// SetGeolite2DatabaseCitySha512sum sets the cached value.
func SetGeolite2DatabaseCitySha512sum(v string) {
	geolite2DatabaseCitySha512sumStr = v
	geolite2DatabaseCitySha512sumIntCacher.Clear()
	geolite2DatabaseCitySha512sumInt64Cacher.Clear()
	geolite2DatabaseCitySha512sumUintCacher.Clear()
	geolite2DatabaseCitySha512sumBoolCacher.Clear()
	geolite2DatabaseCitySha512sumMsCacher.Clear()
}

// --------------------------------------
// GEOLITE2_DATABASE_COUNTRY_SHA512SUM
// --------------------------------------
var (
	geolite2DatabaseCountrySha512sumStr = os.Getenv("GEOLITE2_DATABASE_COUNTRY_SHA512SUM")

	geolite2DatabaseCountrySha512sumIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseCountrySha512sumStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabaseCountrySha512sumStr))
		}
		val := int(v)
		return &val
	})
	geolite2DatabaseCountrySha512sumInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseCountrySha512sumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", geolite2DatabaseCountrySha512sumStr))
		}
		val := int64(v)
		return &val
	})
	geolite2DatabaseCountrySha512sumUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(geolite2DatabaseCountrySha512sumStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabaseCountrySha512sumStr))
		}
		val := uint(v)
		return &val
	})
	geolite2DatabaseCountrySha512sumBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(geolite2DatabaseCountrySha512sumStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", geolite2DatabaseCountrySha512sumStr))
		}
		return &v
	})
	geolite2DatabaseCountrySha512sumMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseCountrySha512sumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", geolite2DatabaseCountrySha512sumStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Geolite2DatabaseCountrySha512sum returns the cached GEOLITE2_DATABASE_COUNTRY_SHA512SUM variable.
func Geolite2DatabaseCountrySha512sum() string {
	return geolite2DatabaseCountrySha512sumStr
}

// Geolite2DatabaseCountrySha512sumInt returns the cached int of GEOLITE2_DATABASE_COUNTRY_SHA512SUM variable.
func Geolite2DatabaseCountrySha512sumInt() int {
	return *((geolite2DatabaseCountrySha512sumIntCacher.Get()).(*int))
}

// Geolite2DatabaseCountrySha512sumInt64 returns the cached int64 of GEOLITE2_DATABASE_COUNTRY_SHA512SUM variable.
func Geolite2DatabaseCountrySha512sumInt64() int64 {
	return *((geolite2DatabaseCountrySha512sumInt64Cacher.Get()).(*int64))
}

// Geolite2DatabaseCountrySha512sumUint returns the cached uint of GEOLITE2_DATABASE_COUNTRY_SHA512SUM variable.
func Geolite2DatabaseCountrySha512sumUint() uint {
	return *((geolite2DatabaseCountrySha512sumUintCacher.Get()).(*uint))
}

// Geolite2DatabaseCountrySha512sumBool returns the cached bool of GEOLITE2_DATABASE_COUNTRY_SHA512SUM variable.
func Geolite2DatabaseCountrySha512sumBool() bool {
	return *((geolite2DatabaseCountrySha512sumBoolCacher.Get()).(*bool))
}

// Geolite2DatabaseCountrySha512sumMs returns the cached millisecond of GEOLITE2_DATABASE_COUNTRY_SHA512SUM variable.
func Geolite2DatabaseCountrySha512sumMs() time.Duration {
	return *((geolite2DatabaseCountrySha512sumMsCacher.Get()).(*time.Duration))
}

// SetGeolite2DatabaseCountrySha512sum sets the cached value.
func SetGeolite2DatabaseCountrySha512sum(v string) {
	geolite2DatabaseCountrySha512sumStr = v
	geolite2DatabaseCountrySha512sumIntCacher.Clear()
	geolite2DatabaseCountrySha512sumInt64Cacher.Clear()
	geolite2DatabaseCountrySha512sumUintCacher.Clear()
	geolite2DatabaseCountrySha512sumBoolCacher.Clear()
	geolite2DatabaseCountrySha512sumMsCacher.Clear()
}

// --------------------------------------
// GEOLITE2_DATABASE_PATH
// --------------------------------------
var (
	geolite2DatabasePathStr = os.Getenv("GEOLITE2_DATABASE_PATH")

	geolite2DatabasePathIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabasePathStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabasePathStr))
		}
		val := int(v)
		return &val
	})
	geolite2DatabasePathInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabasePathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", geolite2DatabasePathStr))
		}
		val := int64(v)
		return &val
	})
	geolite2DatabasePathUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(geolite2DatabasePathStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabasePathStr))
		}
		val := uint(v)
		return &val
	})
	geolite2DatabasePathBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(geolite2DatabasePathStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", geolite2DatabasePathStr))
		}
		return &v
	})
	geolite2DatabasePathMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabasePathStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", geolite2DatabasePathStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Geolite2DatabasePath returns the cached GEOLITE2_DATABASE_PATH variable.
func Geolite2DatabasePath() string {
	return geolite2DatabasePathStr
}

// Geolite2DatabasePathInt returns the cached int of GEOLITE2_DATABASE_PATH variable.
func Geolite2DatabasePathInt() int {
	return *((geolite2DatabasePathIntCacher.Get()).(*int))
}

// Geolite2DatabasePathInt64 returns the cached int64 of GEOLITE2_DATABASE_PATH variable.
func Geolite2DatabasePathInt64() int64 {
	return *((geolite2DatabasePathInt64Cacher.Get()).(*int64))
}

// Geolite2DatabasePathUint returns the cached uint of GEOLITE2_DATABASE_PATH variable.
func Geolite2DatabasePathUint() uint {
	return *((geolite2DatabasePathUintCacher.Get()).(*uint))
}

// Geolite2DatabasePathBool returns the cached bool of GEOLITE2_DATABASE_PATH variable.
func Geolite2DatabasePathBool() bool {
	return *((geolite2DatabasePathBoolCacher.Get()).(*bool))
}

// Geolite2DatabasePathMs returns the cached millisecond of GEOLITE2_DATABASE_PATH variable.
func Geolite2DatabasePathMs() time.Duration {
	return *((geolite2DatabasePathMsCacher.Get()).(*time.Duration))
}

// SetGeolite2DatabasePath sets the cached value.
func SetGeolite2DatabasePath(v string) {
	geolite2DatabasePathStr = v
	geolite2DatabasePathIntCacher.Clear()
	geolite2DatabasePathInt64Cacher.Clear()
	geolite2DatabasePathUintCacher.Clear()
	geolite2DatabasePathBoolCacher.Clear()
	geolite2DatabasePathMsCacher.Clear()
}

// --------------------------------------
// GEOLITE2_DATABASE_VERSION
// --------------------------------------
var (
	geolite2DatabaseVersionStr = os.Getenv("GEOLITE2_DATABASE_VERSION")

	geolite2DatabaseVersionIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseVersionStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabaseVersionStr))
		}
		val := int(v)
		return &val
	})
	geolite2DatabaseVersionInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseVersionStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", geolite2DatabaseVersionStr))
		}
		val := int64(v)
		return &val
	})
	geolite2DatabaseVersionUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(geolite2DatabaseVersionStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", geolite2DatabaseVersionStr))
		}
		val := uint(v)
		return &val
	})
	geolite2DatabaseVersionBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(geolite2DatabaseVersionStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", geolite2DatabaseVersionStr))
		}
		return &v
	})
	geolite2DatabaseVersionMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(geolite2DatabaseVersionStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", geolite2DatabaseVersionStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Geolite2DatabaseVersion returns the cached GEOLITE2_DATABASE_VERSION variable.
func Geolite2DatabaseVersion() string {
	return geolite2DatabaseVersionStr
}

// Geolite2DatabaseVersionInt returns the cached int of GEOLITE2_DATABASE_VERSION variable.
func Geolite2DatabaseVersionInt() int {
	return *((geolite2DatabaseVersionIntCacher.Get()).(*int))
}

// Geolite2DatabaseVersionInt64 returns the cached int64 of GEOLITE2_DATABASE_VERSION variable.
func Geolite2DatabaseVersionInt64() int64 {
	return *((geolite2DatabaseVersionInt64Cacher.Get()).(*int64))
}

// Geolite2DatabaseVersionUint returns the cached uint of GEOLITE2_DATABASE_VERSION variable.
func Geolite2DatabaseVersionUint() uint {
	return *((geolite2DatabaseVersionUintCacher.Get()).(*uint))
}

// Geolite2DatabaseVersionBool returns the cached bool of GEOLITE2_DATABASE_VERSION variable.
func Geolite2DatabaseVersionBool() bool {
	return *((geolite2DatabaseVersionBoolCacher.Get()).(*bool))
}

// Geolite2DatabaseVersionMs returns the cached millisecond of GEOLITE2_DATABASE_VERSION variable.
func Geolite2DatabaseVersionMs() time.Duration {
	return *((geolite2DatabaseVersionMsCacher.Get()).(*time.Duration))
}

// SetGeolite2DatabaseVersion sets the cached value.
func SetGeolite2DatabaseVersion(v string) {
	geolite2DatabaseVersionStr = v
	geolite2DatabaseVersionIntCacher.Clear()
	geolite2DatabaseVersionInt64Cacher.Clear()
	geolite2DatabaseVersionUintCacher.Clear()
	geolite2DatabaseVersionBoolCacher.Clear()
	geolite2DatabaseVersionMsCacher.Clear()
}

// --------------------------------------
// HEALTH_CHECK_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	healthCheckServerListenAddressStr = os.Getenv("HEALTH_CHECK_SERVER_LISTEN_ADDRESS")

	healthCheckServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", healthCheckServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	healthCheckServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", healthCheckServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	healthCheckServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(healthCheckServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", healthCheckServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	healthCheckServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(healthCheckServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", healthCheckServerListenAddressStr))
		}
		return &v
	})
	healthCheckServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", healthCheckServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// HealthCheckServerListenAddress returns the cached HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddress() string {
	return healthCheckServerListenAddressStr
}

// HealthCheckServerListenAddressInt returns the cached int of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressInt() int {
	return *((healthCheckServerListenAddressIntCacher.Get()).(*int))
}

// HealthCheckServerListenAddressInt64 returns the cached int64 of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressInt64() int64 {
	return *((healthCheckServerListenAddressInt64Cacher.Get()).(*int64))
}

// HealthCheckServerListenAddressUint returns the cached uint of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressUint() uint {
	return *((healthCheckServerListenAddressUintCacher.Get()).(*uint))
}

// HealthCheckServerListenAddressBool returns the cached bool of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressBool() bool {
	return *((healthCheckServerListenAddressBoolCacher.Get()).(*bool))
}

// HealthCheckServerListenAddressMs returns the cached millisecond of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressMs() time.Duration {
	return *((healthCheckServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetHealthCheckServerListenAddress sets the cached value.
func SetHealthCheckServerListenAddress(v string) {
	healthCheckServerListenAddressStr = v
	healthCheckServerListenAddressIntCacher.Clear()
	healthCheckServerListenAddressInt64Cacher.Clear()
	healthCheckServerListenAddressUintCacher.Clear()
	healthCheckServerListenAddressBoolCacher.Clear()
	healthCheckServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// HOSTNAME
// --------------------------------------
var (
	hostnameStr = os.Getenv("HOSTNAME")

	hostnameIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(hostnameStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", hostnameStr))
		}
		val := int(v)
		return &val
	})
	hostnameInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(hostnameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", hostnameStr))
		}
		val := int64(v)
		return &val
	})
	hostnameUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(hostnameStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", hostnameStr))
		}
		val := uint(v)
		return &val
	})
	hostnameBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(hostnameStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", hostnameStr))
		}
		return &v
	})
	hostnameMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(hostnameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", hostnameStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Hostname returns the cached HOSTNAME variable.
func Hostname() string {
	return hostnameStr
}

// HostnameInt returns the cached int of HOSTNAME variable.
func HostnameInt() int {
	return *((hostnameIntCacher.Get()).(*int))
}

// HostnameInt64 returns the cached int64 of HOSTNAME variable.
func HostnameInt64() int64 {
	return *((hostnameInt64Cacher.Get()).(*int64))
}

// HostnameUint returns the cached uint of HOSTNAME variable.
func HostnameUint() uint {
	return *((hostnameUintCacher.Get()).(*uint))
}

// HostnameBool returns the cached bool of HOSTNAME variable.
func HostnameBool() bool {
	return *((hostnameBoolCacher.Get()).(*bool))
}

// HostnameMs returns the cached millisecond of HOSTNAME variable.
func HostnameMs() time.Duration {
	return *((hostnameMsCacher.Get()).(*time.Duration))
}

// SetHostname sets the cached value.
func SetHostname(v string) {
	hostnameStr = v
	hostnameIntCacher.Clear()
	hostnameInt64Cacher.Clear()
	hostnameUintCacher.Clear()
	hostnameBoolCacher.Clear()
	hostnameMsCacher.Clear()
}

// --------------------------------------
// INFLUXDB_ENDPOINT
// --------------------------------------
var (
	influxdbEndpointStr = os.Getenv("INFLUXDB_ENDPOINT")

	influxdbEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(influxdbEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", influxdbEndpointStr))
		}
		val := int(v)
		return &val
	})
	influxdbEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(influxdbEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", influxdbEndpointStr))
		}
		val := int64(v)
		return &val
	})
	influxdbEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(influxdbEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", influxdbEndpointStr))
		}
		val := uint(v)
		return &val
	})
	influxdbEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(influxdbEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", influxdbEndpointStr))
		}
		return &v
	})
	influxdbEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(influxdbEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", influxdbEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// InfluxdbEndpoint returns the cached INFLUXDB_ENDPOINT variable.
func InfluxdbEndpoint() string {
	return influxdbEndpointStr
}

// InfluxdbEndpointInt returns the cached int of INFLUXDB_ENDPOINT variable.
func InfluxdbEndpointInt() int {
	return *((influxdbEndpointIntCacher.Get()).(*int))
}

// InfluxdbEndpointInt64 returns the cached int64 of INFLUXDB_ENDPOINT variable.
func InfluxdbEndpointInt64() int64 {
	return *((influxdbEndpointInt64Cacher.Get()).(*int64))
}

// InfluxdbEndpointUint returns the cached uint of INFLUXDB_ENDPOINT variable.
func InfluxdbEndpointUint() uint {
	return *((influxdbEndpointUintCacher.Get()).(*uint))
}

// InfluxdbEndpointBool returns the cached bool of INFLUXDB_ENDPOINT variable.
func InfluxdbEndpointBool() bool {
	return *((influxdbEndpointBoolCacher.Get()).(*bool))
}

// InfluxdbEndpointMs returns the cached millisecond of INFLUXDB_ENDPOINT variable.
func InfluxdbEndpointMs() time.Duration {
	return *((influxdbEndpointMsCacher.Get()).(*time.Duration))
}

// SetInfluxdbEndpoint sets the cached value.
func SetInfluxdbEndpoint(v string) {
	influxdbEndpointStr = v
	influxdbEndpointIntCacher.Clear()
	influxdbEndpointInt64Cacher.Clear()
	influxdbEndpointUintCacher.Clear()
	influxdbEndpointBoolCacher.Clear()
	influxdbEndpointMsCacher.Clear()
}

// --------------------------------------
// INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	influxdbProxyServerListenAddressStr = os.Getenv("INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS")

	influxdbProxyServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(influxdbProxyServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", influxdbProxyServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	influxdbProxyServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(influxdbProxyServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", influxdbProxyServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	influxdbProxyServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(influxdbProxyServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", influxdbProxyServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	influxdbProxyServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(influxdbProxyServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", influxdbProxyServerListenAddressStr))
		}
		return &v
	})
	influxdbProxyServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(influxdbProxyServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", influxdbProxyServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// InfluxdbProxyServerListenAddress returns the cached INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS variable.
func InfluxdbProxyServerListenAddress() string {
	return influxdbProxyServerListenAddressStr
}

// InfluxdbProxyServerListenAddressInt returns the cached int of INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS variable.
func InfluxdbProxyServerListenAddressInt() int {
	return *((influxdbProxyServerListenAddressIntCacher.Get()).(*int))
}

// InfluxdbProxyServerListenAddressInt64 returns the cached int64 of INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS variable.
func InfluxdbProxyServerListenAddressInt64() int64 {
	return *((influxdbProxyServerListenAddressInt64Cacher.Get()).(*int64))
}

// InfluxdbProxyServerListenAddressUint returns the cached uint of INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS variable.
func InfluxdbProxyServerListenAddressUint() uint {
	return *((influxdbProxyServerListenAddressUintCacher.Get()).(*uint))
}

// InfluxdbProxyServerListenAddressBool returns the cached bool of INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS variable.
func InfluxdbProxyServerListenAddressBool() bool {
	return *((influxdbProxyServerListenAddressBoolCacher.Get()).(*bool))
}

// InfluxdbProxyServerListenAddressMs returns the cached millisecond of INFLUXDB_PROXY_SERVER_LISTEN_ADDRESS variable.
func InfluxdbProxyServerListenAddressMs() time.Duration {
	return *((influxdbProxyServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetInfluxdbProxyServerListenAddress sets the cached value.
func SetInfluxdbProxyServerListenAddress(v string) {
	influxdbProxyServerListenAddressStr = v
	influxdbProxyServerListenAddressIntCacher.Clear()
	influxdbProxyServerListenAddressInt64Cacher.Clear()
	influxdbProxyServerListenAddressUintCacher.Clear()
	influxdbProxyServerListenAddressBoolCacher.Clear()
	influxdbProxyServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// KUBE_MONITOR_RPC_SERVICE_ENDPOINT
// --------------------------------------
var (
	kubeMonitorRpcServiceEndpointStr = os.Getenv("KUBE_MONITOR_RPC_SERVICE_ENDPOINT")

	kubeMonitorRpcServiceEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kubeMonitorRpcServiceEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", kubeMonitorRpcServiceEndpointStr))
		}
		val := int(v)
		return &val
	})
	kubeMonitorRpcServiceEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kubeMonitorRpcServiceEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", kubeMonitorRpcServiceEndpointStr))
		}
		val := int64(v)
		return &val
	})
	kubeMonitorRpcServiceEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(kubeMonitorRpcServiceEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", kubeMonitorRpcServiceEndpointStr))
		}
		val := uint(v)
		return &val
	})
	kubeMonitorRpcServiceEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(kubeMonitorRpcServiceEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", kubeMonitorRpcServiceEndpointStr))
		}
		return &v
	})
	kubeMonitorRpcServiceEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kubeMonitorRpcServiceEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", kubeMonitorRpcServiceEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// KubeMonitorRpcServiceEndpoint returns the cached KUBE_MONITOR_RPC_SERVICE_ENDPOINT variable.
func KubeMonitorRpcServiceEndpoint() string {
	return kubeMonitorRpcServiceEndpointStr
}

// KubeMonitorRpcServiceEndpointInt returns the cached int of KUBE_MONITOR_RPC_SERVICE_ENDPOINT variable.
func KubeMonitorRpcServiceEndpointInt() int {
	return *((kubeMonitorRpcServiceEndpointIntCacher.Get()).(*int))
}

// KubeMonitorRpcServiceEndpointInt64 returns the cached int64 of KUBE_MONITOR_RPC_SERVICE_ENDPOINT variable.
func KubeMonitorRpcServiceEndpointInt64() int64 {
	return *((kubeMonitorRpcServiceEndpointInt64Cacher.Get()).(*int64))
}

// KubeMonitorRpcServiceEndpointUint returns the cached uint of KUBE_MONITOR_RPC_SERVICE_ENDPOINT variable.
func KubeMonitorRpcServiceEndpointUint() uint {
	return *((kubeMonitorRpcServiceEndpointUintCacher.Get()).(*uint))
}

// KubeMonitorRpcServiceEndpointBool returns the cached bool of KUBE_MONITOR_RPC_SERVICE_ENDPOINT variable.
func KubeMonitorRpcServiceEndpointBool() bool {
	return *((kubeMonitorRpcServiceEndpointBoolCacher.Get()).(*bool))
}

// KubeMonitorRpcServiceEndpointMs returns the cached millisecond of KUBE_MONITOR_RPC_SERVICE_ENDPOINT variable.
func KubeMonitorRpcServiceEndpointMs() time.Duration {
	return *((kubeMonitorRpcServiceEndpointMsCacher.Get()).(*time.Duration))
}

// SetKubeMonitorRpcServiceEndpoint sets the cached value.
func SetKubeMonitorRpcServiceEndpoint(v string) {
	kubeMonitorRpcServiceEndpointStr = v
	kubeMonitorRpcServiceEndpointIntCacher.Clear()
	kubeMonitorRpcServiceEndpointInt64Cacher.Clear()
	kubeMonitorRpcServiceEndpointUintCacher.Clear()
	kubeMonitorRpcServiceEndpointBoolCacher.Clear()
	kubeMonitorRpcServiceEndpointMsCacher.Clear()
}

// --------------------------------------
// KUBE_MONITOR_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	kubeMonitorServerListenAddressStr = os.Getenv("KUBE_MONITOR_SERVER_LISTEN_ADDRESS")

	kubeMonitorServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kubeMonitorServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", kubeMonitorServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	kubeMonitorServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kubeMonitorServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", kubeMonitorServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	kubeMonitorServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(kubeMonitorServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", kubeMonitorServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	kubeMonitorServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(kubeMonitorServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", kubeMonitorServerListenAddressStr))
		}
		return &v
	})
	kubeMonitorServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(kubeMonitorServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", kubeMonitorServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// KubeMonitorServerListenAddress returns the cached KUBE_MONITOR_SERVER_LISTEN_ADDRESS variable.
func KubeMonitorServerListenAddress() string {
	return kubeMonitorServerListenAddressStr
}

// KubeMonitorServerListenAddressInt returns the cached int of KUBE_MONITOR_SERVER_LISTEN_ADDRESS variable.
func KubeMonitorServerListenAddressInt() int {
	return *((kubeMonitorServerListenAddressIntCacher.Get()).(*int))
}

// KubeMonitorServerListenAddressInt64 returns the cached int64 of KUBE_MONITOR_SERVER_LISTEN_ADDRESS variable.
func KubeMonitorServerListenAddressInt64() int64 {
	return *((kubeMonitorServerListenAddressInt64Cacher.Get()).(*int64))
}

// KubeMonitorServerListenAddressUint returns the cached uint of KUBE_MONITOR_SERVER_LISTEN_ADDRESS variable.
func KubeMonitorServerListenAddressUint() uint {
	return *((kubeMonitorServerListenAddressUintCacher.Get()).(*uint))
}

// KubeMonitorServerListenAddressBool returns the cached bool of KUBE_MONITOR_SERVER_LISTEN_ADDRESS variable.
func KubeMonitorServerListenAddressBool() bool {
	return *((kubeMonitorServerListenAddressBoolCacher.Get()).(*bool))
}

// KubeMonitorServerListenAddressMs returns the cached millisecond of KUBE_MONITOR_SERVER_LISTEN_ADDRESS variable.
func KubeMonitorServerListenAddressMs() time.Duration {
	return *((kubeMonitorServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetKubeMonitorServerListenAddress sets the cached value.
func SetKubeMonitorServerListenAddress(v string) {
	kubeMonitorServerListenAddressStr = v
	kubeMonitorServerListenAddressIntCacher.Clear()
	kubeMonitorServerListenAddressInt64Cacher.Clear()
	kubeMonitorServerListenAddressUintCacher.Clear()
	kubeMonitorServerListenAddressBoolCacher.Clear()
	kubeMonitorServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// LICENSE_SERVER_ENDPOINT
// --------------------------------------
var (
	licenseServerEndpointStr = os.Getenv("LICENSE_SERVER_ENDPOINT")

	licenseServerEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(licenseServerEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", licenseServerEndpointStr))
		}
		val := int(v)
		return &val
	})
	licenseServerEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(licenseServerEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", licenseServerEndpointStr))
		}
		val := int64(v)
		return &val
	})
	licenseServerEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(licenseServerEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", licenseServerEndpointStr))
		}
		val := uint(v)
		return &val
	})
	licenseServerEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(licenseServerEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", licenseServerEndpointStr))
		}
		return &v
	})
	licenseServerEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(licenseServerEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", licenseServerEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// LicenseServerEndpoint returns the cached LICENSE_SERVER_ENDPOINT variable.
func LicenseServerEndpoint() string {
	return licenseServerEndpointStr
}

// LicenseServerEndpointInt returns the cached int of LICENSE_SERVER_ENDPOINT variable.
func LicenseServerEndpointInt() int {
	return *((licenseServerEndpointIntCacher.Get()).(*int))
}

// LicenseServerEndpointInt64 returns the cached int64 of LICENSE_SERVER_ENDPOINT variable.
func LicenseServerEndpointInt64() int64 {
	return *((licenseServerEndpointInt64Cacher.Get()).(*int64))
}

// LicenseServerEndpointUint returns the cached uint of LICENSE_SERVER_ENDPOINT variable.
func LicenseServerEndpointUint() uint {
	return *((licenseServerEndpointUintCacher.Get()).(*uint))
}

// LicenseServerEndpointBool returns the cached bool of LICENSE_SERVER_ENDPOINT variable.
func LicenseServerEndpointBool() bool {
	return *((licenseServerEndpointBoolCacher.Get()).(*bool))
}

// LicenseServerEndpointMs returns the cached millisecond of LICENSE_SERVER_ENDPOINT variable.
func LicenseServerEndpointMs() time.Duration {
	return *((licenseServerEndpointMsCacher.Get()).(*time.Duration))
}

// SetLicenseServerEndpoint sets the cached value.
func SetLicenseServerEndpoint(v string) {
	licenseServerEndpointStr = v
	licenseServerEndpointIntCacher.Clear()
	licenseServerEndpointInt64Cacher.Clear()
	licenseServerEndpointUintCacher.Clear()
	licenseServerEndpointBoolCacher.Clear()
	licenseServerEndpointMsCacher.Clear()
}

// --------------------------------------
// LICENSE_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	licenseServerListenAddressStr = os.Getenv("LICENSE_SERVER_LISTEN_ADDRESS")

	licenseServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(licenseServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", licenseServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	licenseServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(licenseServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", licenseServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	licenseServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(licenseServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", licenseServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	licenseServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(licenseServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", licenseServerListenAddressStr))
		}
		return &v
	})
	licenseServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(licenseServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", licenseServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// LicenseServerListenAddress returns the cached LICENSE_SERVER_LISTEN_ADDRESS variable.
func LicenseServerListenAddress() string {
	return licenseServerListenAddressStr
}

// LicenseServerListenAddressInt returns the cached int of LICENSE_SERVER_LISTEN_ADDRESS variable.
func LicenseServerListenAddressInt() int {
	return *((licenseServerListenAddressIntCacher.Get()).(*int))
}

// LicenseServerListenAddressInt64 returns the cached int64 of LICENSE_SERVER_LISTEN_ADDRESS variable.
func LicenseServerListenAddressInt64() int64 {
	return *((licenseServerListenAddressInt64Cacher.Get()).(*int64))
}

// LicenseServerListenAddressUint returns the cached uint of LICENSE_SERVER_LISTEN_ADDRESS variable.
func LicenseServerListenAddressUint() uint {
	return *((licenseServerListenAddressUintCacher.Get()).(*uint))
}

// LicenseServerListenAddressBool returns the cached bool of LICENSE_SERVER_LISTEN_ADDRESS variable.
func LicenseServerListenAddressBool() bool {
	return *((licenseServerListenAddressBoolCacher.Get()).(*bool))
}

// LicenseServerListenAddressMs returns the cached millisecond of LICENSE_SERVER_LISTEN_ADDRESS variable.
func LicenseServerListenAddressMs() time.Duration {
	return *((licenseServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetLicenseServerListenAddress sets the cached value.
func SetLicenseServerListenAddress(v string) {
	licenseServerListenAddressStr = v
	licenseServerListenAddressIntCacher.Clear()
	licenseServerListenAddressInt64Cacher.Clear()
	licenseServerListenAddressUintCacher.Clear()
	licenseServerListenAddressBoolCacher.Clear()
	licenseServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// MAX_UNPROCESSED_CONDITIONAL_ORDER
// --------------------------------------
var (
	maxUnprocessedConditionalOrderStr = os.Getenv("MAX_UNPROCESSED_CONDITIONAL_ORDER")

	maxUnprocessedConditionalOrderIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(maxUnprocessedConditionalOrderStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", maxUnprocessedConditionalOrderStr))
		}
		val := int(v)
		return &val
	})
	maxUnprocessedConditionalOrderInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(maxUnprocessedConditionalOrderStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", maxUnprocessedConditionalOrderStr))
		}
		val := int64(v)
		return &val
	})
	maxUnprocessedConditionalOrderUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(maxUnprocessedConditionalOrderStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", maxUnprocessedConditionalOrderStr))
		}
		val := uint(v)
		return &val
	})
	maxUnprocessedConditionalOrderBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(maxUnprocessedConditionalOrderStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", maxUnprocessedConditionalOrderStr))
		}
		return &v
	})
	maxUnprocessedConditionalOrderMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(maxUnprocessedConditionalOrderStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", maxUnprocessedConditionalOrderStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// MaxUnprocessedConditionalOrder returns the cached MAX_UNPROCESSED_CONDITIONAL_ORDER variable.
func MaxUnprocessedConditionalOrder() string {
	return maxUnprocessedConditionalOrderStr
}

// MaxUnprocessedConditionalOrderInt returns the cached int of MAX_UNPROCESSED_CONDITIONAL_ORDER variable.
func MaxUnprocessedConditionalOrderInt() int {
	return *((maxUnprocessedConditionalOrderIntCacher.Get()).(*int))
}

// MaxUnprocessedConditionalOrderInt64 returns the cached int64 of MAX_UNPROCESSED_CONDITIONAL_ORDER variable.
func MaxUnprocessedConditionalOrderInt64() int64 {
	return *((maxUnprocessedConditionalOrderInt64Cacher.Get()).(*int64))
}

// MaxUnprocessedConditionalOrderUint returns the cached uint of MAX_UNPROCESSED_CONDITIONAL_ORDER variable.
func MaxUnprocessedConditionalOrderUint() uint {
	return *((maxUnprocessedConditionalOrderUintCacher.Get()).(*uint))
}

// MaxUnprocessedConditionalOrderBool returns the cached bool of MAX_UNPROCESSED_CONDITIONAL_ORDER variable.
func MaxUnprocessedConditionalOrderBool() bool {
	return *((maxUnprocessedConditionalOrderBoolCacher.Get()).(*bool))
}

// MaxUnprocessedConditionalOrderMs returns the cached millisecond of MAX_UNPROCESSED_CONDITIONAL_ORDER variable.
func MaxUnprocessedConditionalOrderMs() time.Duration {
	return *((maxUnprocessedConditionalOrderMsCacher.Get()).(*time.Duration))
}

// SetMaxUnprocessedConditionalOrder sets the cached value.
func SetMaxUnprocessedConditionalOrder(v string) {
	maxUnprocessedConditionalOrderStr = v
	maxUnprocessedConditionalOrderIntCacher.Clear()
	maxUnprocessedConditionalOrderInt64Cacher.Clear()
	maxUnprocessedConditionalOrderUintCacher.Clear()
	maxUnprocessedConditionalOrderBoolCacher.Clear()
	maxUnprocessedConditionalOrderMsCacher.Clear()
}

// --------------------------------------
// MAX_UNPROCESSED_ORDER
// --------------------------------------
var (
	maxUnprocessedOrderStr = os.Getenv("MAX_UNPROCESSED_ORDER")

	maxUnprocessedOrderIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(maxUnprocessedOrderStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", maxUnprocessedOrderStr))
		}
		val := int(v)
		return &val
	})
	maxUnprocessedOrderInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(maxUnprocessedOrderStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", maxUnprocessedOrderStr))
		}
		val := int64(v)
		return &val
	})
	maxUnprocessedOrderUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(maxUnprocessedOrderStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", maxUnprocessedOrderStr))
		}
		val := uint(v)
		return &val
	})
	maxUnprocessedOrderBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(maxUnprocessedOrderStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", maxUnprocessedOrderStr))
		}
		return &v
	})
	maxUnprocessedOrderMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(maxUnprocessedOrderStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", maxUnprocessedOrderStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// MaxUnprocessedOrder returns the cached MAX_UNPROCESSED_ORDER variable.
func MaxUnprocessedOrder() string {
	return maxUnprocessedOrderStr
}

// MaxUnprocessedOrderInt returns the cached int of MAX_UNPROCESSED_ORDER variable.
func MaxUnprocessedOrderInt() int {
	return *((maxUnprocessedOrderIntCacher.Get()).(*int))
}

// MaxUnprocessedOrderInt64 returns the cached int64 of MAX_UNPROCESSED_ORDER variable.
func MaxUnprocessedOrderInt64() int64 {
	return *((maxUnprocessedOrderInt64Cacher.Get()).(*int64))
}

// MaxUnprocessedOrderUint returns the cached uint of MAX_UNPROCESSED_ORDER variable.
func MaxUnprocessedOrderUint() uint {
	return *((maxUnprocessedOrderUintCacher.Get()).(*uint))
}

// MaxUnprocessedOrderBool returns the cached bool of MAX_UNPROCESSED_ORDER variable.
func MaxUnprocessedOrderBool() bool {
	return *((maxUnprocessedOrderBoolCacher.Get()).(*bool))
}

// MaxUnprocessedOrderMs returns the cached millisecond of MAX_UNPROCESSED_ORDER variable.
func MaxUnprocessedOrderMs() time.Duration {
	return *((maxUnprocessedOrderMsCacher.Get()).(*time.Duration))
}

// SetMaxUnprocessedOrder sets the cached value.
func SetMaxUnprocessedOrder(v string) {
	maxUnprocessedOrderStr = v
	maxUnprocessedOrderIntCacher.Clear()
	maxUnprocessedOrderInt64Cacher.Clear()
	maxUnprocessedOrderUintCacher.Clear()
	maxUnprocessedOrderBoolCacher.Clear()
	maxUnprocessedOrderMsCacher.Clear()
}

// --------------------------------------
// NATS_STREAMING_CLUSTER
// --------------------------------------
var (
	natsStreamingClusterStr = os.Getenv("NATS_STREAMING_CLUSTER")

	natsStreamingClusterIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingClusterStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingClusterStr))
		}
		val := int(v)
		return &val
	})
	natsStreamingClusterInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingClusterStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", natsStreamingClusterStr))
		}
		val := int64(v)
		return &val
	})
	natsStreamingClusterUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(natsStreamingClusterStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingClusterStr))
		}
		val := uint(v)
		return &val
	})
	natsStreamingClusterBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(natsStreamingClusterStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", natsStreamingClusterStr))
		}
		return &v
	})
	natsStreamingClusterMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingClusterStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", natsStreamingClusterStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NatsStreamingCluster returns the cached NATS_STREAMING_CLUSTER variable.
func NatsStreamingCluster() string {
	return natsStreamingClusterStr
}

// NatsStreamingClusterInt returns the cached int of NATS_STREAMING_CLUSTER variable.
func NatsStreamingClusterInt() int {
	return *((natsStreamingClusterIntCacher.Get()).(*int))
}

// NatsStreamingClusterInt64 returns the cached int64 of NATS_STREAMING_CLUSTER variable.
func NatsStreamingClusterInt64() int64 {
	return *((natsStreamingClusterInt64Cacher.Get()).(*int64))
}

// NatsStreamingClusterUint returns the cached uint of NATS_STREAMING_CLUSTER variable.
func NatsStreamingClusterUint() uint {
	return *((natsStreamingClusterUintCacher.Get()).(*uint))
}

// NatsStreamingClusterBool returns the cached bool of NATS_STREAMING_CLUSTER variable.
func NatsStreamingClusterBool() bool {
	return *((natsStreamingClusterBoolCacher.Get()).(*bool))
}

// NatsStreamingClusterMs returns the cached millisecond of NATS_STREAMING_CLUSTER variable.
func NatsStreamingClusterMs() time.Duration {
	return *((natsStreamingClusterMsCacher.Get()).(*time.Duration))
}

// SetNatsStreamingCluster sets the cached value.
func SetNatsStreamingCluster(v string) {
	natsStreamingClusterStr = v
	natsStreamingClusterIntCacher.Clear()
	natsStreamingClusterInt64Cacher.Clear()
	natsStreamingClusterUintCacher.Clear()
	natsStreamingClusterBoolCacher.Clear()
	natsStreamingClusterMsCacher.Clear()
}

// --------------------------------------
// NATS_STREAMING_ENDPOINT
// --------------------------------------
var (
	natsStreamingEndpointStr = os.Getenv("NATS_STREAMING_ENDPOINT")

	natsStreamingEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingEndpointStr))
		}
		val := int(v)
		return &val
	})
	natsStreamingEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", natsStreamingEndpointStr))
		}
		val := int64(v)
		return &val
	})
	natsStreamingEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(natsStreamingEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingEndpointStr))
		}
		val := uint(v)
		return &val
	})
	natsStreamingEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(natsStreamingEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", natsStreamingEndpointStr))
		}
		return &v
	})
	natsStreamingEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", natsStreamingEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NatsStreamingEndpoint returns the cached NATS_STREAMING_ENDPOINT variable.
func NatsStreamingEndpoint() string {
	return natsStreamingEndpointStr
}

// NatsStreamingEndpointInt returns the cached int of NATS_STREAMING_ENDPOINT variable.
func NatsStreamingEndpointInt() int {
	return *((natsStreamingEndpointIntCacher.Get()).(*int))
}

// NatsStreamingEndpointInt64 returns the cached int64 of NATS_STREAMING_ENDPOINT variable.
func NatsStreamingEndpointInt64() int64 {
	return *((natsStreamingEndpointInt64Cacher.Get()).(*int64))
}

// NatsStreamingEndpointUint returns the cached uint of NATS_STREAMING_ENDPOINT variable.
func NatsStreamingEndpointUint() uint {
	return *((natsStreamingEndpointUintCacher.Get()).(*uint))
}

// NatsStreamingEndpointBool returns the cached bool of NATS_STREAMING_ENDPOINT variable.
func NatsStreamingEndpointBool() bool {
	return *((natsStreamingEndpointBoolCacher.Get()).(*bool))
}

// NatsStreamingEndpointMs returns the cached millisecond of NATS_STREAMING_ENDPOINT variable.
func NatsStreamingEndpointMs() time.Duration {
	return *((natsStreamingEndpointMsCacher.Get()).(*time.Duration))
}

// SetNatsStreamingEndpoint sets the cached value.
func SetNatsStreamingEndpoint(v string) {
	natsStreamingEndpointStr = v
	natsStreamingEndpointIntCacher.Clear()
	natsStreamingEndpointInt64Cacher.Clear()
	natsStreamingEndpointUintCacher.Clear()
	natsStreamingEndpointBoolCacher.Clear()
	natsStreamingEndpointMsCacher.Clear()
}

// --------------------------------------
// NATS_STREAMING_MONITOR_ENDPOINT
// --------------------------------------
var (
	natsStreamingMonitorEndpointStr = os.Getenv("NATS_STREAMING_MONITOR_ENDPOINT")

	natsStreamingMonitorEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingMonitorEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingMonitorEndpointStr))
		}
		val := int(v)
		return &val
	})
	natsStreamingMonitorEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingMonitorEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", natsStreamingMonitorEndpointStr))
		}
		val := int64(v)
		return &val
	})
	natsStreamingMonitorEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(natsStreamingMonitorEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingMonitorEndpointStr))
		}
		val := uint(v)
		return &val
	})
	natsStreamingMonitorEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(natsStreamingMonitorEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", natsStreamingMonitorEndpointStr))
		}
		return &v
	})
	natsStreamingMonitorEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingMonitorEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", natsStreamingMonitorEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NatsStreamingMonitorEndpoint returns the cached NATS_STREAMING_MONITOR_ENDPOINT variable.
func NatsStreamingMonitorEndpoint() string {
	return natsStreamingMonitorEndpointStr
}

// NatsStreamingMonitorEndpointInt returns the cached int of NATS_STREAMING_MONITOR_ENDPOINT variable.
func NatsStreamingMonitorEndpointInt() int {
	return *((natsStreamingMonitorEndpointIntCacher.Get()).(*int))
}

// NatsStreamingMonitorEndpointInt64 returns the cached int64 of NATS_STREAMING_MONITOR_ENDPOINT variable.
func NatsStreamingMonitorEndpointInt64() int64 {
	return *((natsStreamingMonitorEndpointInt64Cacher.Get()).(*int64))
}

// NatsStreamingMonitorEndpointUint returns the cached uint of NATS_STREAMING_MONITOR_ENDPOINT variable.
func NatsStreamingMonitorEndpointUint() uint {
	return *((natsStreamingMonitorEndpointUintCacher.Get()).(*uint))
}

// NatsStreamingMonitorEndpointBool returns the cached bool of NATS_STREAMING_MONITOR_ENDPOINT variable.
func NatsStreamingMonitorEndpointBool() bool {
	return *((natsStreamingMonitorEndpointBoolCacher.Get()).(*bool))
}

// NatsStreamingMonitorEndpointMs returns the cached millisecond of NATS_STREAMING_MONITOR_ENDPOINT variable.
func NatsStreamingMonitorEndpointMs() time.Duration {
	return *((natsStreamingMonitorEndpointMsCacher.Get()).(*time.Duration))
}

// SetNatsStreamingMonitorEndpoint sets the cached value.
func SetNatsStreamingMonitorEndpoint(v string) {
	natsStreamingMonitorEndpointStr = v
	natsStreamingMonitorEndpointIntCacher.Clear()
	natsStreamingMonitorEndpointInt64Cacher.Clear()
	natsStreamingMonitorEndpointUintCacher.Clear()
	natsStreamingMonitorEndpointBoolCacher.Clear()
	natsStreamingMonitorEndpointMsCacher.Clear()
}

// --------------------------------------
// NATS_STREAMING_NUM
// --------------------------------------
var (
	natsStreamingNumStr = os.Getenv("NATS_STREAMING_NUM")

	natsStreamingNumIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingNumStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingNumStr))
		}
		val := int(v)
		return &val
	})
	natsStreamingNumInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", natsStreamingNumStr))
		}
		val := int64(v)
		return &val
	})
	natsStreamingNumUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(natsStreamingNumStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", natsStreamingNumStr))
		}
		val := uint(v)
		return &val
	})
	natsStreamingNumBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(natsStreamingNumStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", natsStreamingNumStr))
		}
		return &v
	})
	natsStreamingNumMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(natsStreamingNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", natsStreamingNumStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NatsStreamingNum returns the cached NATS_STREAMING_NUM variable.
func NatsStreamingNum() string {
	return natsStreamingNumStr
}

// NatsStreamingNumInt returns the cached int of NATS_STREAMING_NUM variable.
func NatsStreamingNumInt() int {
	return *((natsStreamingNumIntCacher.Get()).(*int))
}

// NatsStreamingNumInt64 returns the cached int64 of NATS_STREAMING_NUM variable.
func NatsStreamingNumInt64() int64 {
	return *((natsStreamingNumInt64Cacher.Get()).(*int64))
}

// NatsStreamingNumUint returns the cached uint of NATS_STREAMING_NUM variable.
func NatsStreamingNumUint() uint {
	return *((natsStreamingNumUintCacher.Get()).(*uint))
}

// NatsStreamingNumBool returns the cached bool of NATS_STREAMING_NUM variable.
func NatsStreamingNumBool() bool {
	return *((natsStreamingNumBoolCacher.Get()).(*bool))
}

// NatsStreamingNumMs returns the cached millisecond of NATS_STREAMING_NUM variable.
func NatsStreamingNumMs() time.Duration {
	return *((natsStreamingNumMsCacher.Get()).(*time.Duration))
}

// SetNatsStreamingNum sets the cached value.
func SetNatsStreamingNum(v string) {
	natsStreamingNumStr = v
	natsStreamingNumIntCacher.Clear()
	natsStreamingNumInt64Cacher.Clear()
	natsStreamingNumUintCacher.Clear()
	natsStreamingNumBoolCacher.Clear()
	natsStreamingNumMsCacher.Clear()
}

// --------------------------------------
// NOTIFIER_QUEUED_REQ_NUM
// --------------------------------------
var (
	notifierQueuedReqNumStr = os.Getenv("NOTIFIER_QUEUED_REQ_NUM")

	notifierQueuedReqNumIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(notifierQueuedReqNumStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", notifierQueuedReqNumStr))
		}
		val := int(v)
		return &val
	})
	notifierQueuedReqNumInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(notifierQueuedReqNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", notifierQueuedReqNumStr))
		}
		val := int64(v)
		return &val
	})
	notifierQueuedReqNumUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(notifierQueuedReqNumStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", notifierQueuedReqNumStr))
		}
		val := uint(v)
		return &val
	})
	notifierQueuedReqNumBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(notifierQueuedReqNumStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", notifierQueuedReqNumStr))
		}
		return &v
	})
	notifierQueuedReqNumMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(notifierQueuedReqNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", notifierQueuedReqNumStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NotifierQueuedReqNum returns the cached NOTIFIER_QUEUED_REQ_NUM variable.
func NotifierQueuedReqNum() string {
	return notifierQueuedReqNumStr
}

// NotifierQueuedReqNumInt returns the cached int of NOTIFIER_QUEUED_REQ_NUM variable.
func NotifierQueuedReqNumInt() int {
	return *((notifierQueuedReqNumIntCacher.Get()).(*int))
}

// NotifierQueuedReqNumInt64 returns the cached int64 of NOTIFIER_QUEUED_REQ_NUM variable.
func NotifierQueuedReqNumInt64() int64 {
	return *((notifierQueuedReqNumInt64Cacher.Get()).(*int64))
}

// NotifierQueuedReqNumUint returns the cached uint of NOTIFIER_QUEUED_REQ_NUM variable.
func NotifierQueuedReqNumUint() uint {
	return *((notifierQueuedReqNumUintCacher.Get()).(*uint))
}

// NotifierQueuedReqNumBool returns the cached bool of NOTIFIER_QUEUED_REQ_NUM variable.
func NotifierQueuedReqNumBool() bool {
	return *((notifierQueuedReqNumBoolCacher.Get()).(*bool))
}

// NotifierQueuedReqNumMs returns the cached millisecond of NOTIFIER_QUEUED_REQ_NUM variable.
func NotifierQueuedReqNumMs() time.Duration {
	return *((notifierQueuedReqNumMsCacher.Get()).(*time.Duration))
}

// SetNotifierQueuedReqNum sets the cached value.
func SetNotifierQueuedReqNum(v string) {
	notifierQueuedReqNumStr = v
	notifierQueuedReqNumIntCacher.Clear()
	notifierQueuedReqNumInt64Cacher.Clear()
	notifierQueuedReqNumUintCacher.Clear()
	notifierQueuedReqNumBoolCacher.Clear()
	notifierQueuedReqNumMsCacher.Clear()
}

// --------------------------------------
// NOTIFIER_WORKER_NUM
// --------------------------------------
var (
	notifierWorkerNumStr = os.Getenv("NOTIFIER_WORKER_NUM")

	notifierWorkerNumIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(notifierWorkerNumStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", notifierWorkerNumStr))
		}
		val := int(v)
		return &val
	})
	notifierWorkerNumInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(notifierWorkerNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", notifierWorkerNumStr))
		}
		val := int64(v)
		return &val
	})
	notifierWorkerNumUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(notifierWorkerNumStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", notifierWorkerNumStr))
		}
		val := uint(v)
		return &val
	})
	notifierWorkerNumBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(notifierWorkerNumStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", notifierWorkerNumStr))
		}
		return &v
	})
	notifierWorkerNumMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(notifierWorkerNumStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", notifierWorkerNumStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// NotifierWorkerNum returns the cached NOTIFIER_WORKER_NUM variable.
func NotifierWorkerNum() string {
	return notifierWorkerNumStr
}

// NotifierWorkerNumInt returns the cached int of NOTIFIER_WORKER_NUM variable.
func NotifierWorkerNumInt() int {
	return *((notifierWorkerNumIntCacher.Get()).(*int))
}

// NotifierWorkerNumInt64 returns the cached int64 of NOTIFIER_WORKER_NUM variable.
func NotifierWorkerNumInt64() int64 {
	return *((notifierWorkerNumInt64Cacher.Get()).(*int64))
}

// NotifierWorkerNumUint returns the cached uint of NOTIFIER_WORKER_NUM variable.
func NotifierWorkerNumUint() uint {
	return *((notifierWorkerNumUintCacher.Get()).(*uint))
}

// NotifierWorkerNumBool returns the cached bool of NOTIFIER_WORKER_NUM variable.
func NotifierWorkerNumBool() bool {
	return *((notifierWorkerNumBoolCacher.Get()).(*bool))
}

// NotifierWorkerNumMs returns the cached millisecond of NOTIFIER_WORKER_NUM variable.
func NotifierWorkerNumMs() time.Duration {
	return *((notifierWorkerNumMsCacher.Get()).(*time.Duration))
}

// SetNotifierWorkerNum sets the cached value.
func SetNotifierWorkerNum(v string) {
	notifierWorkerNumStr = v
	notifierWorkerNumIntCacher.Clear()
	notifierWorkerNumInt64Cacher.Clear()
	notifierWorkerNumUintCacher.Clear()
	notifierWorkerNumBoolCacher.Clear()
	notifierWorkerNumMsCacher.Clear()
}

// --------------------------------------
// OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT
// --------------------------------------
var (
	oauth2AccessTokenExpiredTimeoutStr = os.Getenv("OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT")

	oauth2AccessTokenExpiredTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2AccessTokenExpiredTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", oauth2AccessTokenExpiredTimeoutStr))
		}
		val := int(v)
		return &val
	})
	oauth2AccessTokenExpiredTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2AccessTokenExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", oauth2AccessTokenExpiredTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	oauth2AccessTokenExpiredTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(oauth2AccessTokenExpiredTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", oauth2AccessTokenExpiredTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	oauth2AccessTokenExpiredTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(oauth2AccessTokenExpiredTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", oauth2AccessTokenExpiredTimeoutStr))
		}
		return &v
	})
	oauth2AccessTokenExpiredTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2AccessTokenExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", oauth2AccessTokenExpiredTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Oauth2AccessTokenExpiredTimeout returns the cached OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2AccessTokenExpiredTimeout() string {
	return oauth2AccessTokenExpiredTimeoutStr
}

// Oauth2AccessTokenExpiredTimeoutInt returns the cached int of OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2AccessTokenExpiredTimeoutInt() int {
	return *((oauth2AccessTokenExpiredTimeoutIntCacher.Get()).(*int))
}

// Oauth2AccessTokenExpiredTimeoutInt64 returns the cached int64 of OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2AccessTokenExpiredTimeoutInt64() int64 {
	return *((oauth2AccessTokenExpiredTimeoutInt64Cacher.Get()).(*int64))
}

// Oauth2AccessTokenExpiredTimeoutUint returns the cached uint of OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2AccessTokenExpiredTimeoutUint() uint {
	return *((oauth2AccessTokenExpiredTimeoutUintCacher.Get()).(*uint))
}

// Oauth2AccessTokenExpiredTimeoutBool returns the cached bool of OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2AccessTokenExpiredTimeoutBool() bool {
	return *((oauth2AccessTokenExpiredTimeoutBoolCacher.Get()).(*bool))
}

// Oauth2AccessTokenExpiredTimeoutMs returns the cached millisecond of OAUTH2_ACCESS_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2AccessTokenExpiredTimeoutMs() time.Duration {
	return *((oauth2AccessTokenExpiredTimeoutMsCacher.Get()).(*time.Duration))
}

// SetOauth2AccessTokenExpiredTimeout sets the cached value.
func SetOauth2AccessTokenExpiredTimeout(v string) {
	oauth2AccessTokenExpiredTimeoutStr = v
	oauth2AccessTokenExpiredTimeoutIntCacher.Clear()
	oauth2AccessTokenExpiredTimeoutInt64Cacher.Clear()
	oauth2AccessTokenExpiredTimeoutUintCacher.Clear()
	oauth2AccessTokenExpiredTimeoutBoolCacher.Clear()
	oauth2AccessTokenExpiredTimeoutMsCacher.Clear()
}

// --------------------------------------
// OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT
// --------------------------------------
var (
	oauth2AuthorizationCodeExpiredTimeoutStr = os.Getenv("OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT")

	oauth2AuthorizationCodeExpiredTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2AuthorizationCodeExpiredTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", oauth2AuthorizationCodeExpiredTimeoutStr))
		}
		val := int(v)
		return &val
	})
	oauth2AuthorizationCodeExpiredTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2AuthorizationCodeExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", oauth2AuthorizationCodeExpiredTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	oauth2AuthorizationCodeExpiredTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(oauth2AuthorizationCodeExpiredTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", oauth2AuthorizationCodeExpiredTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	oauth2AuthorizationCodeExpiredTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(oauth2AuthorizationCodeExpiredTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", oauth2AuthorizationCodeExpiredTimeoutStr))
		}
		return &v
	})
	oauth2AuthorizationCodeExpiredTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2AuthorizationCodeExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", oauth2AuthorizationCodeExpiredTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Oauth2AuthorizationCodeExpiredTimeout returns the cached OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT variable.
func Oauth2AuthorizationCodeExpiredTimeout() string {
	return oauth2AuthorizationCodeExpiredTimeoutStr
}

// Oauth2AuthorizationCodeExpiredTimeoutInt returns the cached int of OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT variable.
func Oauth2AuthorizationCodeExpiredTimeoutInt() int {
	return *((oauth2AuthorizationCodeExpiredTimeoutIntCacher.Get()).(*int))
}

// Oauth2AuthorizationCodeExpiredTimeoutInt64 returns the cached int64 of OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT variable.
func Oauth2AuthorizationCodeExpiredTimeoutInt64() int64 {
	return *((oauth2AuthorizationCodeExpiredTimeoutInt64Cacher.Get()).(*int64))
}

// Oauth2AuthorizationCodeExpiredTimeoutUint returns the cached uint of OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT variable.
func Oauth2AuthorizationCodeExpiredTimeoutUint() uint {
	return *((oauth2AuthorizationCodeExpiredTimeoutUintCacher.Get()).(*uint))
}

// Oauth2AuthorizationCodeExpiredTimeoutBool returns the cached bool of OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT variable.
func Oauth2AuthorizationCodeExpiredTimeoutBool() bool {
	return *((oauth2AuthorizationCodeExpiredTimeoutBoolCacher.Get()).(*bool))
}

// Oauth2AuthorizationCodeExpiredTimeoutMs returns the cached millisecond of OAUTH2_AUTHORIZATION_CODE_EXPIRED_TIMEOUT variable.
func Oauth2AuthorizationCodeExpiredTimeoutMs() time.Duration {
	return *((oauth2AuthorizationCodeExpiredTimeoutMsCacher.Get()).(*time.Duration))
}

// SetOauth2AuthorizationCodeExpiredTimeout sets the cached value.
func SetOauth2AuthorizationCodeExpiredTimeout(v string) {
	oauth2AuthorizationCodeExpiredTimeoutStr = v
	oauth2AuthorizationCodeExpiredTimeoutIntCacher.Clear()
	oauth2AuthorizationCodeExpiredTimeoutInt64Cacher.Clear()
	oauth2AuthorizationCodeExpiredTimeoutUintCacher.Clear()
	oauth2AuthorizationCodeExpiredTimeoutBoolCacher.Clear()
	oauth2AuthorizationCodeExpiredTimeoutMsCacher.Clear()
}

// --------------------------------------
// OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT
// --------------------------------------
var (
	oauth2RefreshTokenExpiredTimeoutStr = os.Getenv("OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT")

	oauth2RefreshTokenExpiredTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2RefreshTokenExpiredTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", oauth2RefreshTokenExpiredTimeoutStr))
		}
		val := int(v)
		return &val
	})
	oauth2RefreshTokenExpiredTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2RefreshTokenExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", oauth2RefreshTokenExpiredTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	oauth2RefreshTokenExpiredTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(oauth2RefreshTokenExpiredTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", oauth2RefreshTokenExpiredTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	oauth2RefreshTokenExpiredTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(oauth2RefreshTokenExpiredTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", oauth2RefreshTokenExpiredTimeoutStr))
		}
		return &v
	})
	oauth2RefreshTokenExpiredTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(oauth2RefreshTokenExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", oauth2RefreshTokenExpiredTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Oauth2RefreshTokenExpiredTimeout returns the cached OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2RefreshTokenExpiredTimeout() string {
	return oauth2RefreshTokenExpiredTimeoutStr
}

// Oauth2RefreshTokenExpiredTimeoutInt returns the cached int of OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2RefreshTokenExpiredTimeoutInt() int {
	return *((oauth2RefreshTokenExpiredTimeoutIntCacher.Get()).(*int))
}

// Oauth2RefreshTokenExpiredTimeoutInt64 returns the cached int64 of OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2RefreshTokenExpiredTimeoutInt64() int64 {
	return *((oauth2RefreshTokenExpiredTimeoutInt64Cacher.Get()).(*int64))
}

// Oauth2RefreshTokenExpiredTimeoutUint returns the cached uint of OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2RefreshTokenExpiredTimeoutUint() uint {
	return *((oauth2RefreshTokenExpiredTimeoutUintCacher.Get()).(*uint))
}

// Oauth2RefreshTokenExpiredTimeoutBool returns the cached bool of OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2RefreshTokenExpiredTimeoutBool() bool {
	return *((oauth2RefreshTokenExpiredTimeoutBoolCacher.Get()).(*bool))
}

// Oauth2RefreshTokenExpiredTimeoutMs returns the cached millisecond of OAUTH2_REFRESH_TOKEN_EXPIRED_TIMEOUT variable.
func Oauth2RefreshTokenExpiredTimeoutMs() time.Duration {
	return *((oauth2RefreshTokenExpiredTimeoutMsCacher.Get()).(*time.Duration))
}

// SetOauth2RefreshTokenExpiredTimeout sets the cached value.
func SetOauth2RefreshTokenExpiredTimeout(v string) {
	oauth2RefreshTokenExpiredTimeoutStr = v
	oauth2RefreshTokenExpiredTimeoutIntCacher.Clear()
	oauth2RefreshTokenExpiredTimeoutInt64Cacher.Clear()
	oauth2RefreshTokenExpiredTimeoutUintCacher.Clear()
	oauth2RefreshTokenExpiredTimeoutBoolCacher.Clear()
	oauth2RefreshTokenExpiredTimeoutMsCacher.Clear()
}

// --------------------------------------
// ORDERBOOK_CHANNEL_DIR
// --------------------------------------
var (
	orderbookChannelDirStr = os.Getenv("ORDERBOOK_CHANNEL_DIR")

	orderbookChannelDirIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(orderbookChannelDirStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", orderbookChannelDirStr))
		}
		val := int(v)
		return &val
	})
	orderbookChannelDirInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(orderbookChannelDirStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", orderbookChannelDirStr))
		}
		val := int64(v)
		return &val
	})
	orderbookChannelDirUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(orderbookChannelDirStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", orderbookChannelDirStr))
		}
		val := uint(v)
		return &val
	})
	orderbookChannelDirBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(orderbookChannelDirStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", orderbookChannelDirStr))
		}
		return &v
	})
	orderbookChannelDirMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(orderbookChannelDirStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", orderbookChannelDirStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// OrderbookChannelDir returns the cached ORDERBOOK_CHANNEL_DIR variable.
func OrderbookChannelDir() string {
	return orderbookChannelDirStr
}

// OrderbookChannelDirInt returns the cached int of ORDERBOOK_CHANNEL_DIR variable.
func OrderbookChannelDirInt() int {
	return *((orderbookChannelDirIntCacher.Get()).(*int))
}

// OrderbookChannelDirInt64 returns the cached int64 of ORDERBOOK_CHANNEL_DIR variable.
func OrderbookChannelDirInt64() int64 {
	return *((orderbookChannelDirInt64Cacher.Get()).(*int64))
}

// OrderbookChannelDirUint returns the cached uint of ORDERBOOK_CHANNEL_DIR variable.
func OrderbookChannelDirUint() uint {
	return *((orderbookChannelDirUintCacher.Get()).(*uint))
}

// OrderbookChannelDirBool returns the cached bool of ORDERBOOK_CHANNEL_DIR variable.
func OrderbookChannelDirBool() bool {
	return *((orderbookChannelDirBoolCacher.Get()).(*bool))
}

// OrderbookChannelDirMs returns the cached millisecond of ORDERBOOK_CHANNEL_DIR variable.
func OrderbookChannelDirMs() time.Duration {
	return *((orderbookChannelDirMsCacher.Get()).(*time.Duration))
}

// SetOrderbookChannelDir sets the cached value.
func SetOrderbookChannelDir(v string) {
	orderbookChannelDirStr = v
	orderbookChannelDirIntCacher.Clear()
	orderbookChannelDirInt64Cacher.Clear()
	orderbookChannelDirUintCacher.Clear()
	orderbookChannelDirBoolCacher.Clear()
	orderbookChannelDirMsCacher.Clear()
}

// --------------------------------------
// ORDERBOOK_GRPC_ENDPOINT
// --------------------------------------
var (
	orderbookGrpcEndpointStr = os.Getenv("ORDERBOOK_GRPC_ENDPOINT")

	orderbookGrpcEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(orderbookGrpcEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", orderbookGrpcEndpointStr))
		}
		val := int(v)
		return &val
	})
	orderbookGrpcEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(orderbookGrpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", orderbookGrpcEndpointStr))
		}
		val := int64(v)
		return &val
	})
	orderbookGrpcEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(orderbookGrpcEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", orderbookGrpcEndpointStr))
		}
		val := uint(v)
		return &val
	})
	orderbookGrpcEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(orderbookGrpcEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", orderbookGrpcEndpointStr))
		}
		return &v
	})
	orderbookGrpcEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(orderbookGrpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", orderbookGrpcEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// OrderbookGrpcEndpoint returns the cached ORDERBOOK_GRPC_ENDPOINT variable.
func OrderbookGrpcEndpoint() string {
	return orderbookGrpcEndpointStr
}

// OrderbookGrpcEndpointInt returns the cached int of ORDERBOOK_GRPC_ENDPOINT variable.
func OrderbookGrpcEndpointInt() int {
	return *((orderbookGrpcEndpointIntCacher.Get()).(*int))
}

// OrderbookGrpcEndpointInt64 returns the cached int64 of ORDERBOOK_GRPC_ENDPOINT variable.
func OrderbookGrpcEndpointInt64() int64 {
	return *((orderbookGrpcEndpointInt64Cacher.Get()).(*int64))
}

// OrderbookGrpcEndpointUint returns the cached uint of ORDERBOOK_GRPC_ENDPOINT variable.
func OrderbookGrpcEndpointUint() uint {
	return *((orderbookGrpcEndpointUintCacher.Get()).(*uint))
}

// OrderbookGrpcEndpointBool returns the cached bool of ORDERBOOK_GRPC_ENDPOINT variable.
func OrderbookGrpcEndpointBool() bool {
	return *((orderbookGrpcEndpointBoolCacher.Get()).(*bool))
}

// OrderbookGrpcEndpointMs returns the cached millisecond of ORDERBOOK_GRPC_ENDPOINT variable.
func OrderbookGrpcEndpointMs() time.Duration {
	return *((orderbookGrpcEndpointMsCacher.Get()).(*time.Duration))
}

// SetOrderbookGrpcEndpoint sets the cached value.
func SetOrderbookGrpcEndpoint(v string) {
	orderbookGrpcEndpointStr = v
	orderbookGrpcEndpointIntCacher.Clear()
	orderbookGrpcEndpointInt64Cacher.Clear()
	orderbookGrpcEndpointUintCacher.Clear()
	orderbookGrpcEndpointBoolCacher.Clear()
	orderbookGrpcEndpointMsCacher.Clear()
}

// --------------------------------------
// POSTMAN_SERVER_ENDPOINT
// --------------------------------------
var (
	postmanServerEndpointStr = os.Getenv("POSTMAN_SERVER_ENDPOINT")

	postmanServerEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanServerEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanServerEndpointStr))
		}
		val := int(v)
		return &val
	})
	postmanServerEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanServerEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", postmanServerEndpointStr))
		}
		val := int64(v)
		return &val
	})
	postmanServerEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(postmanServerEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanServerEndpointStr))
		}
		val := uint(v)
		return &val
	})
	postmanServerEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(postmanServerEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", postmanServerEndpointStr))
		}
		return &v
	})
	postmanServerEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanServerEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", postmanServerEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// PostmanServerEndpoint returns the cached POSTMAN_SERVER_ENDPOINT variable.
func PostmanServerEndpoint() string {
	return postmanServerEndpointStr
}

// PostmanServerEndpointInt returns the cached int of POSTMAN_SERVER_ENDPOINT variable.
func PostmanServerEndpointInt() int {
	return *((postmanServerEndpointIntCacher.Get()).(*int))
}

// PostmanServerEndpointInt64 returns the cached int64 of POSTMAN_SERVER_ENDPOINT variable.
func PostmanServerEndpointInt64() int64 {
	return *((postmanServerEndpointInt64Cacher.Get()).(*int64))
}

// PostmanServerEndpointUint returns the cached uint of POSTMAN_SERVER_ENDPOINT variable.
func PostmanServerEndpointUint() uint {
	return *((postmanServerEndpointUintCacher.Get()).(*uint))
}

// PostmanServerEndpointBool returns the cached bool of POSTMAN_SERVER_ENDPOINT variable.
func PostmanServerEndpointBool() bool {
	return *((postmanServerEndpointBoolCacher.Get()).(*bool))
}

// PostmanServerEndpointMs returns the cached millisecond of POSTMAN_SERVER_ENDPOINT variable.
func PostmanServerEndpointMs() time.Duration {
	return *((postmanServerEndpointMsCacher.Get()).(*time.Duration))
}

// SetPostmanServerEndpoint sets the cached value.
func SetPostmanServerEndpoint(v string) {
	postmanServerEndpointStr = v
	postmanServerEndpointIntCacher.Clear()
	postmanServerEndpointInt64Cacher.Clear()
	postmanServerEndpointUintCacher.Clear()
	postmanServerEndpointBoolCacher.Clear()
	postmanServerEndpointMsCacher.Clear()
}

// --------------------------------------
// POSTMAN_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	postmanServerListenAddressStr = os.Getenv("POSTMAN_SERVER_LISTEN_ADDRESS")

	postmanServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	postmanServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", postmanServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	postmanServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(postmanServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	postmanServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(postmanServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", postmanServerListenAddressStr))
		}
		return &v
	})
	postmanServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", postmanServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// PostmanServerListenAddress returns the cached POSTMAN_SERVER_LISTEN_ADDRESS variable.
func PostmanServerListenAddress() string {
	return postmanServerListenAddressStr
}

// PostmanServerListenAddressInt returns the cached int of POSTMAN_SERVER_LISTEN_ADDRESS variable.
func PostmanServerListenAddressInt() int {
	return *((postmanServerListenAddressIntCacher.Get()).(*int))
}

// PostmanServerListenAddressInt64 returns the cached int64 of POSTMAN_SERVER_LISTEN_ADDRESS variable.
func PostmanServerListenAddressInt64() int64 {
	return *((postmanServerListenAddressInt64Cacher.Get()).(*int64))
}

// PostmanServerListenAddressUint returns the cached uint of POSTMAN_SERVER_LISTEN_ADDRESS variable.
func PostmanServerListenAddressUint() uint {
	return *((postmanServerListenAddressUintCacher.Get()).(*uint))
}

// PostmanServerListenAddressBool returns the cached bool of POSTMAN_SERVER_LISTEN_ADDRESS variable.
func PostmanServerListenAddressBool() bool {
	return *((postmanServerListenAddressBoolCacher.Get()).(*bool))
}

// PostmanServerListenAddressMs returns the cached millisecond of POSTMAN_SERVER_LISTEN_ADDRESS variable.
func PostmanServerListenAddressMs() time.Duration {
	return *((postmanServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetPostmanServerListenAddress sets the cached value.
func SetPostmanServerListenAddress(v string) {
	postmanServerListenAddressStr = v
	postmanServerListenAddressIntCacher.Clear()
	postmanServerListenAddressInt64Cacher.Clear()
	postmanServerListenAddressUintCacher.Clear()
	postmanServerListenAddressBoolCacher.Clear()
	postmanServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// POSTMAN_EMAIL_SENDER_TIMEOUT
// --------------------------------------
var (
	postmanEmailSenderTimeoutStr = os.Getenv("POSTMAN_EMAIL_SENDER_TIMEOUT")

	postmanEmailSenderTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanEmailSenderTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanEmailSenderTimeoutStr))
		}
		val := int(v)
		return &val
	})
	postmanEmailSenderTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanEmailSenderTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", postmanEmailSenderTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	postmanEmailSenderTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(postmanEmailSenderTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanEmailSenderTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	postmanEmailSenderTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(postmanEmailSenderTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", postmanEmailSenderTimeoutStr))
		}
		return &v
	})
	postmanEmailSenderTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanEmailSenderTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", postmanEmailSenderTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// PostmanEmailSenderTimeout returns the cached POSTMAN_EMAIL_SENDER_TIMEOUT variable.
func PostmanEmailSenderTimeout() string {
	return postmanEmailSenderTimeoutStr
}

// PostmanEmailSenderTimeoutInt returns the cached int of POSTMAN_EMAIL_SENDER_TIMEOUT variable.
func PostmanEmailSenderTimeoutInt() int {
	return *((postmanEmailSenderTimeoutIntCacher.Get()).(*int))
}

// PostmanEmailSenderTimeoutInt64 returns the cached int64 of POSTMAN_EMAIL_SENDER_TIMEOUT variable.
func PostmanEmailSenderTimeoutInt64() int64 {
	return *((postmanEmailSenderTimeoutInt64Cacher.Get()).(*int64))
}

// PostmanEmailSenderTimeoutUint returns the cached uint of POSTMAN_EMAIL_SENDER_TIMEOUT variable.
func PostmanEmailSenderTimeoutUint() uint {
	return *((postmanEmailSenderTimeoutUintCacher.Get()).(*uint))
}

// PostmanEmailSenderTimeoutBool returns the cached bool of POSTMAN_EMAIL_SENDER_TIMEOUT variable.
func PostmanEmailSenderTimeoutBool() bool {
	return *((postmanEmailSenderTimeoutBoolCacher.Get()).(*bool))
}

// PostmanEmailSenderTimeoutMs returns the cached millisecond of POSTMAN_EMAIL_SENDER_TIMEOUT variable.
func PostmanEmailSenderTimeoutMs() time.Duration {
	return *((postmanEmailSenderTimeoutMsCacher.Get()).(*time.Duration))
}

// SetPostmanEmailSenderTimeout sets the cached value.
func SetPostmanEmailSenderTimeout(v string) {
	postmanEmailSenderTimeoutStr = v
	postmanEmailSenderTimeoutIntCacher.Clear()
	postmanEmailSenderTimeoutInt64Cacher.Clear()
	postmanEmailSenderTimeoutUintCacher.Clear()
	postmanEmailSenderTimeoutBoolCacher.Clear()
	postmanEmailSenderTimeoutMsCacher.Clear()
}

// --------------------------------------
// POSTMAN_EMAIL_SENDER_RETRY_TIMES
// --------------------------------------
var (
	postmanEmailSenderRetryTimesStr = os.Getenv("POSTMAN_EMAIL_SENDER_RETRY_TIMES")

	postmanEmailSenderRetryTimesIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanEmailSenderRetryTimesStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanEmailSenderRetryTimesStr))
		}
		val := int(v)
		return &val
	})
	postmanEmailSenderRetryTimesInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanEmailSenderRetryTimesStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", postmanEmailSenderRetryTimesStr))
		}
		val := int64(v)
		return &val
	})
	postmanEmailSenderRetryTimesUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(postmanEmailSenderRetryTimesStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", postmanEmailSenderRetryTimesStr))
		}
		val := uint(v)
		return &val
	})
	postmanEmailSenderRetryTimesBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(postmanEmailSenderRetryTimesStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", postmanEmailSenderRetryTimesStr))
		}
		return &v
	})
	postmanEmailSenderRetryTimesMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(postmanEmailSenderRetryTimesStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", postmanEmailSenderRetryTimesStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// PostmanEmailSenderRetryTimes returns the cached POSTMAN_EMAIL_SENDER_RETRY_TIMES variable.
func PostmanEmailSenderRetryTimes() string {
	return postmanEmailSenderRetryTimesStr
}

// PostmanEmailSenderRetryTimesInt returns the cached int of POSTMAN_EMAIL_SENDER_RETRY_TIMES variable.
func PostmanEmailSenderRetryTimesInt() int {
	return *((postmanEmailSenderRetryTimesIntCacher.Get()).(*int))
}

// PostmanEmailSenderRetryTimesInt64 returns the cached int64 of POSTMAN_EMAIL_SENDER_RETRY_TIMES variable.
func PostmanEmailSenderRetryTimesInt64() int64 {
	return *((postmanEmailSenderRetryTimesInt64Cacher.Get()).(*int64))
}

// PostmanEmailSenderRetryTimesUint returns the cached uint of POSTMAN_EMAIL_SENDER_RETRY_TIMES variable.
func PostmanEmailSenderRetryTimesUint() uint {
	return *((postmanEmailSenderRetryTimesUintCacher.Get()).(*uint))
}

// PostmanEmailSenderRetryTimesBool returns the cached bool of POSTMAN_EMAIL_SENDER_RETRY_TIMES variable.
func PostmanEmailSenderRetryTimesBool() bool {
	return *((postmanEmailSenderRetryTimesBoolCacher.Get()).(*bool))
}

// PostmanEmailSenderRetryTimesMs returns the cached millisecond of POSTMAN_EMAIL_SENDER_RETRY_TIMES variable.
func PostmanEmailSenderRetryTimesMs() time.Duration {
	return *((postmanEmailSenderRetryTimesMsCacher.Get()).(*time.Duration))
}

// SetPostmanEmailSenderRetryTimes sets the cached value.
func SetPostmanEmailSenderRetryTimes(v string) {
	postmanEmailSenderRetryTimesStr = v
	postmanEmailSenderRetryTimesIntCacher.Clear()
	postmanEmailSenderRetryTimesInt64Cacher.Clear()
	postmanEmailSenderRetryTimesUintCacher.Clear()
	postmanEmailSenderRetryTimesBoolCacher.Clear()
	postmanEmailSenderRetryTimesMsCacher.Clear()
}

// --------------------------------------
// PRIVILEGED_IP_RANGE
// --------------------------------------
var (
	privilegedIpRangeStr = os.Getenv("PRIVILEGED_IP_RANGE")

	privilegedIpRangeIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(privilegedIpRangeStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", privilegedIpRangeStr))
		}
		val := int(v)
		return &val
	})
	privilegedIpRangeInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(privilegedIpRangeStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", privilegedIpRangeStr))
		}
		val := int64(v)
		return &val
	})
	privilegedIpRangeUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(privilegedIpRangeStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", privilegedIpRangeStr))
		}
		val := uint(v)
		return &val
	})
	privilegedIpRangeBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(privilegedIpRangeStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", privilegedIpRangeStr))
		}
		return &v
	})
	privilegedIpRangeMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(privilegedIpRangeStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", privilegedIpRangeStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// PrivilegedIpRange returns the cached PRIVILEGED_IP_RANGE variable.
func PrivilegedIpRange() string {
	return privilegedIpRangeStr
}

// PrivilegedIpRangeInt returns the cached int of PRIVILEGED_IP_RANGE variable.
func PrivilegedIpRangeInt() int {
	return *((privilegedIpRangeIntCacher.Get()).(*int))
}

// PrivilegedIpRangeInt64 returns the cached int64 of PRIVILEGED_IP_RANGE variable.
func PrivilegedIpRangeInt64() int64 {
	return *((privilegedIpRangeInt64Cacher.Get()).(*int64))
}

// PrivilegedIpRangeUint returns the cached uint of PRIVILEGED_IP_RANGE variable.
func PrivilegedIpRangeUint() uint {
	return *((privilegedIpRangeUintCacher.Get()).(*uint))
}

// PrivilegedIpRangeBool returns the cached bool of PRIVILEGED_IP_RANGE variable.
func PrivilegedIpRangeBool() bool {
	return *((privilegedIpRangeBoolCacher.Get()).(*bool))
}

// PrivilegedIpRangeMs returns the cached millisecond of PRIVILEGED_IP_RANGE variable.
func PrivilegedIpRangeMs() time.Duration {
	return *((privilegedIpRangeMsCacher.Get()).(*time.Duration))
}

// SetPrivilegedIpRange sets the cached value.
func SetPrivilegedIpRange(v string) {
	privilegedIpRangeStr = v
	privilegedIpRangeIntCacher.Clear()
	privilegedIpRangeInt64Cacher.Clear()
	privilegedIpRangeUintCacher.Clear()
	privilegedIpRangeBoolCacher.Clear()
	privilegedIpRangeMsCacher.Clear()
}

// --------------------------------------
// QUOTATION_PRICE_PREDICT_ENDPOINT
// --------------------------------------
var (
	quotationPricePredictEndpointStr = os.Getenv("QUOTATION_PRICE_PREDICT_ENDPOINT")

	quotationPricePredictEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationPricePredictEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", quotationPricePredictEndpointStr))
		}
		val := int(v)
		return &val
	})
	quotationPricePredictEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationPricePredictEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", quotationPricePredictEndpointStr))
		}
		val := int64(v)
		return &val
	})
	quotationPricePredictEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(quotationPricePredictEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", quotationPricePredictEndpointStr))
		}
		val := uint(v)
		return &val
	})
	quotationPricePredictEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(quotationPricePredictEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", quotationPricePredictEndpointStr))
		}
		return &v
	})
	quotationPricePredictEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationPricePredictEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", quotationPricePredictEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// QuotationPricePredictEndpoint returns the cached QUOTATION_PRICE_PREDICT_ENDPOINT variable.
func QuotationPricePredictEndpoint() string {
	return quotationPricePredictEndpointStr
}

// QuotationPricePredictEndpointInt returns the cached int of QUOTATION_PRICE_PREDICT_ENDPOINT variable.
func QuotationPricePredictEndpointInt() int {
	return *((quotationPricePredictEndpointIntCacher.Get()).(*int))
}

// QuotationPricePredictEndpointInt64 returns the cached int64 of QUOTATION_PRICE_PREDICT_ENDPOINT variable.
func QuotationPricePredictEndpointInt64() int64 {
	return *((quotationPricePredictEndpointInt64Cacher.Get()).(*int64))
}

// QuotationPricePredictEndpointUint returns the cached uint of QUOTATION_PRICE_PREDICT_ENDPOINT variable.
func QuotationPricePredictEndpointUint() uint {
	return *((quotationPricePredictEndpointUintCacher.Get()).(*uint))
}

// QuotationPricePredictEndpointBool returns the cached bool of QUOTATION_PRICE_PREDICT_ENDPOINT variable.
func QuotationPricePredictEndpointBool() bool {
	return *((quotationPricePredictEndpointBoolCacher.Get()).(*bool))
}

// QuotationPricePredictEndpointMs returns the cached millisecond of QUOTATION_PRICE_PREDICT_ENDPOINT variable.
func QuotationPricePredictEndpointMs() time.Duration {
	return *((quotationPricePredictEndpointMsCacher.Get()).(*time.Duration))
}

// SetQuotationPricePredictEndpoint sets the cached value.
func SetQuotationPricePredictEndpoint(v string) {
	quotationPricePredictEndpointStr = v
	quotationPricePredictEndpointIntCacher.Clear()
	quotationPricePredictEndpointInt64Cacher.Clear()
	quotationPricePredictEndpointUintCacher.Clear()
	quotationPricePredictEndpointBoolCacher.Clear()
	quotationPricePredictEndpointMsCacher.Clear()
}

// --------------------------------------
// QUOTATION_RPC_LISTEN_ADDRESS
// --------------------------------------
var (
	quotationRpcListenAddressStr = os.Getenv("QUOTATION_RPC_LISTEN_ADDRESS")

	quotationRpcListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationRpcListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", quotationRpcListenAddressStr))
		}
		val := int(v)
		return &val
	})
	quotationRpcListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationRpcListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", quotationRpcListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	quotationRpcListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(quotationRpcListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", quotationRpcListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	quotationRpcListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(quotationRpcListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", quotationRpcListenAddressStr))
		}
		return &v
	})
	quotationRpcListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationRpcListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", quotationRpcListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// QuotationRpcListenAddress returns the cached QUOTATION_RPC_LISTEN_ADDRESS variable.
func QuotationRpcListenAddress() string {
	return quotationRpcListenAddressStr
}

// QuotationRpcListenAddressInt returns the cached int of QUOTATION_RPC_LISTEN_ADDRESS variable.
func QuotationRpcListenAddressInt() int {
	return *((quotationRpcListenAddressIntCacher.Get()).(*int))
}

// QuotationRpcListenAddressInt64 returns the cached int64 of QUOTATION_RPC_LISTEN_ADDRESS variable.
func QuotationRpcListenAddressInt64() int64 {
	return *((quotationRpcListenAddressInt64Cacher.Get()).(*int64))
}

// QuotationRpcListenAddressUint returns the cached uint of QUOTATION_RPC_LISTEN_ADDRESS variable.
func QuotationRpcListenAddressUint() uint {
	return *((quotationRpcListenAddressUintCacher.Get()).(*uint))
}

// QuotationRpcListenAddressBool returns the cached bool of QUOTATION_RPC_LISTEN_ADDRESS variable.
func QuotationRpcListenAddressBool() bool {
	return *((quotationRpcListenAddressBoolCacher.Get()).(*bool))
}

// QuotationRpcListenAddressMs returns the cached millisecond of QUOTATION_RPC_LISTEN_ADDRESS variable.
func QuotationRpcListenAddressMs() time.Duration {
	return *((quotationRpcListenAddressMsCacher.Get()).(*time.Duration))
}

// SetQuotationRpcListenAddress sets the cached value.
func SetQuotationRpcListenAddress(v string) {
	quotationRpcListenAddressStr = v
	quotationRpcListenAddressIntCacher.Clear()
	quotationRpcListenAddressInt64Cacher.Clear()
	quotationRpcListenAddressUintCacher.Clear()
	quotationRpcListenAddressBoolCacher.Clear()
	quotationRpcListenAddressMsCacher.Clear()
}

// --------------------------------------
// QUOTATION_RPC_SERVICE_ENDPOINT
// --------------------------------------
var (
	quotationRpcServiceEndpointStr = os.Getenv("QUOTATION_RPC_SERVICE_ENDPOINT")

	quotationRpcServiceEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationRpcServiceEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", quotationRpcServiceEndpointStr))
		}
		val := int(v)
		return &val
	})
	quotationRpcServiceEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationRpcServiceEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", quotationRpcServiceEndpointStr))
		}
		val := int64(v)
		return &val
	})
	quotationRpcServiceEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(quotationRpcServiceEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", quotationRpcServiceEndpointStr))
		}
		val := uint(v)
		return &val
	})
	quotationRpcServiceEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(quotationRpcServiceEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", quotationRpcServiceEndpointStr))
		}
		return &v
	})
	quotationRpcServiceEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(quotationRpcServiceEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", quotationRpcServiceEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// QuotationRpcServiceEndpoint returns the cached QUOTATION_RPC_SERVICE_ENDPOINT variable.
func QuotationRpcServiceEndpoint() string {
	return quotationRpcServiceEndpointStr
}

// QuotationRpcServiceEndpointInt returns the cached int of QUOTATION_RPC_SERVICE_ENDPOINT variable.
func QuotationRpcServiceEndpointInt() int {
	return *((quotationRpcServiceEndpointIntCacher.Get()).(*int))
}

// QuotationRpcServiceEndpointInt64 returns the cached int64 of QUOTATION_RPC_SERVICE_ENDPOINT variable.
func QuotationRpcServiceEndpointInt64() int64 {
	return *((quotationRpcServiceEndpointInt64Cacher.Get()).(*int64))
}

// QuotationRpcServiceEndpointUint returns the cached uint of QUOTATION_RPC_SERVICE_ENDPOINT variable.
func QuotationRpcServiceEndpointUint() uint {
	return *((quotationRpcServiceEndpointUintCacher.Get()).(*uint))
}

// QuotationRpcServiceEndpointBool returns the cached bool of QUOTATION_RPC_SERVICE_ENDPOINT variable.
func QuotationRpcServiceEndpointBool() bool {
	return *((quotationRpcServiceEndpointBoolCacher.Get()).(*bool))
}

// QuotationRpcServiceEndpointMs returns the cached millisecond of QUOTATION_RPC_SERVICE_ENDPOINT variable.
func QuotationRpcServiceEndpointMs() time.Duration {
	return *((quotationRpcServiceEndpointMsCacher.Get()).(*time.Duration))
}

// SetQuotationRpcServiceEndpoint sets the cached value.
func SetQuotationRpcServiceEndpoint(v string) {
	quotationRpcServiceEndpointStr = v
	quotationRpcServiceEndpointIntCacher.Clear()
	quotationRpcServiceEndpointInt64Cacher.Clear()
	quotationRpcServiceEndpointUintCacher.Clear()
	quotationRpcServiceEndpointBoolCacher.Clear()
	quotationRpcServiceEndpointMsCacher.Clear()
}

// --------------------------------------
// REQUEST_CSV_LIMIT_MONTHS
// --------------------------------------
var (
	requestCsvLimitMonthsStr = os.Getenv("REQUEST_CSV_LIMIT_MONTHS")

	requestCsvLimitMonthsIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestCsvLimitMonthsStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", requestCsvLimitMonthsStr))
		}
		val := int(v)
		return &val
	})
	requestCsvLimitMonthsInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestCsvLimitMonthsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", requestCsvLimitMonthsStr))
		}
		val := int64(v)
		return &val
	})
	requestCsvLimitMonthsUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(requestCsvLimitMonthsStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", requestCsvLimitMonthsStr))
		}
		val := uint(v)
		return &val
	})
	requestCsvLimitMonthsBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(requestCsvLimitMonthsStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", requestCsvLimitMonthsStr))
		}
		return &v
	})
	requestCsvLimitMonthsMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestCsvLimitMonthsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", requestCsvLimitMonthsStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// RequestCsvLimitMonths returns the cached REQUEST_CSV_LIMIT_MONTHS variable.
func RequestCsvLimitMonths() string {
	return requestCsvLimitMonthsStr
}

// RequestCsvLimitMonthsInt returns the cached int of REQUEST_CSV_LIMIT_MONTHS variable.
func RequestCsvLimitMonthsInt() int {
	return *((requestCsvLimitMonthsIntCacher.Get()).(*int))
}

// RequestCsvLimitMonthsInt64 returns the cached int64 of REQUEST_CSV_LIMIT_MONTHS variable.
func RequestCsvLimitMonthsInt64() int64 {
	return *((requestCsvLimitMonthsInt64Cacher.Get()).(*int64))
}

// RequestCsvLimitMonthsUint returns the cached uint of REQUEST_CSV_LIMIT_MONTHS variable.
func RequestCsvLimitMonthsUint() uint {
	return *((requestCsvLimitMonthsUintCacher.Get()).(*uint))
}

// RequestCsvLimitMonthsBool returns the cached bool of REQUEST_CSV_LIMIT_MONTHS variable.
func RequestCsvLimitMonthsBool() bool {
	return *((requestCsvLimitMonthsBoolCacher.Get()).(*bool))
}

// RequestCsvLimitMonthsMs returns the cached millisecond of REQUEST_CSV_LIMIT_MONTHS variable.
func RequestCsvLimitMonthsMs() time.Duration {
	return *((requestCsvLimitMonthsMsCacher.Get()).(*time.Duration))
}

// SetRequestCsvLimitMonths sets the cached value.
func SetRequestCsvLimitMonths(v string) {
	requestCsvLimitMonthsStr = v
	requestCsvLimitMonthsIntCacher.Clear()
	requestCsvLimitMonthsInt64Cacher.Clear()
	requestCsvLimitMonthsUintCacher.Clear()
	requestCsvLimitMonthsBoolCacher.Clear()
	requestCsvLimitMonthsMsCacher.Clear()
}

// --------------------------------------
// REQUEST_CSV_LIMIT_RECORDS
// --------------------------------------
var (
	requestCsvLimitRecordsStr = os.Getenv("REQUEST_CSV_LIMIT_RECORDS")

	requestCsvLimitRecordsIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestCsvLimitRecordsStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", requestCsvLimitRecordsStr))
		}
		val := int(v)
		return &val
	})
	requestCsvLimitRecordsInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestCsvLimitRecordsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", requestCsvLimitRecordsStr))
		}
		val := int64(v)
		return &val
	})
	requestCsvLimitRecordsUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(requestCsvLimitRecordsStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", requestCsvLimitRecordsStr))
		}
		val := uint(v)
		return &val
	})
	requestCsvLimitRecordsBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(requestCsvLimitRecordsStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", requestCsvLimitRecordsStr))
		}
		return &v
	})
	requestCsvLimitRecordsMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestCsvLimitRecordsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", requestCsvLimitRecordsStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// RequestCsvLimitRecords returns the cached REQUEST_CSV_LIMIT_RECORDS variable.
func RequestCsvLimitRecords() string {
	return requestCsvLimitRecordsStr
}

// RequestCsvLimitRecordsInt returns the cached int of REQUEST_CSV_LIMIT_RECORDS variable.
func RequestCsvLimitRecordsInt() int {
	return *((requestCsvLimitRecordsIntCacher.Get()).(*int))
}

// RequestCsvLimitRecordsInt64 returns the cached int64 of REQUEST_CSV_LIMIT_RECORDS variable.
func RequestCsvLimitRecordsInt64() int64 {
	return *((requestCsvLimitRecordsInt64Cacher.Get()).(*int64))
}

// RequestCsvLimitRecordsUint returns the cached uint of REQUEST_CSV_LIMIT_RECORDS variable.
func RequestCsvLimitRecordsUint() uint {
	return *((requestCsvLimitRecordsUintCacher.Get()).(*uint))
}

// RequestCsvLimitRecordsBool returns the cached bool of REQUEST_CSV_LIMIT_RECORDS variable.
func RequestCsvLimitRecordsBool() bool {
	return *((requestCsvLimitRecordsBoolCacher.Get()).(*bool))
}

// RequestCsvLimitRecordsMs returns the cached millisecond of REQUEST_CSV_LIMIT_RECORDS variable.
func RequestCsvLimitRecordsMs() time.Duration {
	return *((requestCsvLimitRecordsMsCacher.Get()).(*time.Duration))
}

// SetRequestCsvLimitRecords sets the cached value.
func SetRequestCsvLimitRecords(v string) {
	requestCsvLimitRecordsStr = v
	requestCsvLimitRecordsIntCacher.Clear()
	requestCsvLimitRecordsInt64Cacher.Clear()
	requestCsvLimitRecordsUintCacher.Clear()
	requestCsvLimitRecordsBoolCacher.Clear()
	requestCsvLimitRecordsMsCacher.Clear()
}

// --------------------------------------
// REQUEST_TO_DISABLE_TWO_FA_TIMEOUT
// --------------------------------------
var (
	requestToDisableTwoFaTimeoutStr = os.Getenv("REQUEST_TO_DISABLE_TWO_FA_TIMEOUT")

	requestToDisableTwoFaTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestToDisableTwoFaTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", requestToDisableTwoFaTimeoutStr))
		}
		val := int(v)
		return &val
	})
	requestToDisableTwoFaTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestToDisableTwoFaTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", requestToDisableTwoFaTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	requestToDisableTwoFaTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(requestToDisableTwoFaTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", requestToDisableTwoFaTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	requestToDisableTwoFaTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(requestToDisableTwoFaTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", requestToDisableTwoFaTimeoutStr))
		}
		return &v
	})
	requestToDisableTwoFaTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(requestToDisableTwoFaTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", requestToDisableTwoFaTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// RequestToDisableTwoFaTimeout returns the cached REQUEST_TO_DISABLE_TWO_FA_TIMEOUT variable.
func RequestToDisableTwoFaTimeout() string {
	return requestToDisableTwoFaTimeoutStr
}

// RequestToDisableTwoFaTimeoutInt returns the cached int of REQUEST_TO_DISABLE_TWO_FA_TIMEOUT variable.
func RequestToDisableTwoFaTimeoutInt() int {
	return *((requestToDisableTwoFaTimeoutIntCacher.Get()).(*int))
}

// RequestToDisableTwoFaTimeoutInt64 returns the cached int64 of REQUEST_TO_DISABLE_TWO_FA_TIMEOUT variable.
func RequestToDisableTwoFaTimeoutInt64() int64 {
	return *((requestToDisableTwoFaTimeoutInt64Cacher.Get()).(*int64))
}

// RequestToDisableTwoFaTimeoutUint returns the cached uint of REQUEST_TO_DISABLE_TWO_FA_TIMEOUT variable.
func RequestToDisableTwoFaTimeoutUint() uint {
	return *((requestToDisableTwoFaTimeoutUintCacher.Get()).(*uint))
}

// RequestToDisableTwoFaTimeoutBool returns the cached bool of REQUEST_TO_DISABLE_TWO_FA_TIMEOUT variable.
func RequestToDisableTwoFaTimeoutBool() bool {
	return *((requestToDisableTwoFaTimeoutBoolCacher.Get()).(*bool))
}

// RequestToDisableTwoFaTimeoutMs returns the cached millisecond of REQUEST_TO_DISABLE_TWO_FA_TIMEOUT variable.
func RequestToDisableTwoFaTimeoutMs() time.Duration {
	return *((requestToDisableTwoFaTimeoutMsCacher.Get()).(*time.Duration))
}

// SetRequestToDisableTwoFaTimeout sets the cached value.
func SetRequestToDisableTwoFaTimeout(v string) {
	requestToDisableTwoFaTimeoutStr = v
	requestToDisableTwoFaTimeoutIntCacher.Clear()
	requestToDisableTwoFaTimeoutInt64Cacher.Clear()
	requestToDisableTwoFaTimeoutUintCacher.Clear()
	requestToDisableTwoFaTimeoutBoolCacher.Clear()
	requestToDisableTwoFaTimeoutMsCacher.Clear()
}

// --------------------------------------
// SERVER_ENVIRONMENT
// --------------------------------------
var (
	serverEnvironmentStr = os.Getenv("SERVER_ENVIRONMENT")

	serverEnvironmentIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverEnvironmentStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverEnvironmentStr))
		}
		val := int(v)
		return &val
	})
	serverEnvironmentInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverEnvironmentStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverEnvironmentStr))
		}
		val := int64(v)
		return &val
	})
	serverEnvironmentUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverEnvironmentStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverEnvironmentStr))
		}
		val := uint(v)
		return &val
	})
	serverEnvironmentBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverEnvironmentStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverEnvironmentStr))
		}
		return &v
	})
	serverEnvironmentMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverEnvironmentStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverEnvironmentStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerEnvironment returns the cached SERVER_ENVIRONMENT variable.
func ServerEnvironment() string {
	return serverEnvironmentStr
}

// ServerEnvironmentInt returns the cached int of SERVER_ENVIRONMENT variable.
func ServerEnvironmentInt() int {
	return *((serverEnvironmentIntCacher.Get()).(*int))
}

// ServerEnvironmentInt64 returns the cached int64 of SERVER_ENVIRONMENT variable.
func ServerEnvironmentInt64() int64 {
	return *((serverEnvironmentInt64Cacher.Get()).(*int64))
}

// ServerEnvironmentUint returns the cached uint of SERVER_ENVIRONMENT variable.
func ServerEnvironmentUint() uint {
	return *((serverEnvironmentUintCacher.Get()).(*uint))
}

// ServerEnvironmentBool returns the cached bool of SERVER_ENVIRONMENT variable.
func ServerEnvironmentBool() bool {
	return *((serverEnvironmentBoolCacher.Get()).(*bool))
}

// ServerEnvironmentMs returns the cached millisecond of SERVER_ENVIRONMENT variable.
func ServerEnvironmentMs() time.Duration {
	return *((serverEnvironmentMsCacher.Get()).(*time.Duration))
}

// SetServerEnvironment sets the cached value.
func SetServerEnvironment(v string) {
	serverEnvironmentStr = v
	serverEnvironmentIntCacher.Clear()
	serverEnvironmentInt64Cacher.Clear()
	serverEnvironmentUintCacher.Clear()
	serverEnvironmentBoolCacher.Clear()
	serverEnvironmentMsCacher.Clear()
}

// --------------------------------------
// SERVER_INSTANCE
// --------------------------------------
var (
	serverInstanceStr = os.Getenv("SERVER_INSTANCE")

	serverInstanceIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverInstanceStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverInstanceStr))
		}
		val := int(v)
		return &val
	})
	serverInstanceInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverInstanceStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverInstanceStr))
		}
		val := int64(v)
		return &val
	})
	serverInstanceUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverInstanceStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverInstanceStr))
		}
		val := uint(v)
		return &val
	})
	serverInstanceBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverInstanceStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverInstanceStr))
		}
		return &v
	})
	serverInstanceMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverInstanceStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverInstanceStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerInstance returns the cached SERVER_INSTANCE variable.
func ServerInstance() string {
	return serverInstanceStr
}

// ServerInstanceInt returns the cached int of SERVER_INSTANCE variable.
func ServerInstanceInt() int {
	return *((serverInstanceIntCacher.Get()).(*int))
}

// ServerInstanceInt64 returns the cached int64 of SERVER_INSTANCE variable.
func ServerInstanceInt64() int64 {
	return *((serverInstanceInt64Cacher.Get()).(*int64))
}

// ServerInstanceUint returns the cached uint of SERVER_INSTANCE variable.
func ServerInstanceUint() uint {
	return *((serverInstanceUintCacher.Get()).(*uint))
}

// ServerInstanceBool returns the cached bool of SERVER_INSTANCE variable.
func ServerInstanceBool() bool {
	return *((serverInstanceBoolCacher.Get()).(*bool))
}

// ServerInstanceMs returns the cached millisecond of SERVER_INSTANCE variable.
func ServerInstanceMs() time.Duration {
	return *((serverInstanceMsCacher.Get()).(*time.Duration))
}

// SetServerInstance sets the cached value.
func SetServerInstance(v string) {
	serverInstanceStr = v
	serverInstanceIntCacher.Clear()
	serverInstanceInt64Cacher.Clear()
	serverInstanceUintCacher.Clear()
	serverInstanceBoolCacher.Clear()
	serverInstanceMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOGLEVEL
// --------------------------------------
var (
	serverLoglevelStr = os.Getenv("SERVER_LOGLEVEL")

	serverLoglevelIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLoglevelStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLoglevelStr))
		}
		val := int(v)
		return &val
	})
	serverLoglevelInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLoglevelStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLoglevelStr))
		}
		val := int64(v)
		return &val
	})
	serverLoglevelUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLoglevelStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLoglevelStr))
		}
		val := uint(v)
		return &val
	})
	serverLoglevelBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLoglevelStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLoglevelStr))
		}
		return &v
	})
	serverLoglevelMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLoglevelStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLoglevelStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLoglevel returns the cached SERVER_LOGLEVEL variable.
func ServerLoglevel() string {
	return serverLoglevelStr
}

// ServerLoglevelInt returns the cached int of SERVER_LOGLEVEL variable.
func ServerLoglevelInt() int {
	return *((serverLoglevelIntCacher.Get()).(*int))
}

// ServerLoglevelInt64 returns the cached int64 of SERVER_LOGLEVEL variable.
func ServerLoglevelInt64() int64 {
	return *((serverLoglevelInt64Cacher.Get()).(*int64))
}

// ServerLoglevelUint returns the cached uint of SERVER_LOGLEVEL variable.
func ServerLoglevelUint() uint {
	return *((serverLoglevelUintCacher.Get()).(*uint))
}

// ServerLoglevelBool returns the cached bool of SERVER_LOGLEVEL variable.
func ServerLoglevelBool() bool {
	return *((serverLoglevelBoolCacher.Get()).(*bool))
}

// ServerLoglevelMs returns the cached millisecond of SERVER_LOGLEVEL variable.
func ServerLoglevelMs() time.Duration {
	return *((serverLoglevelMsCacher.Get()).(*time.Duration))
}

// SetServerLoglevel sets the cached value.
func SetServerLoglevel(v string) {
	serverLoglevelStr = v
	serverLoglevelIntCacher.Clear()
	serverLoglevelInt64Cacher.Clear()
	serverLoglevelUintCacher.Clear()
	serverLoglevelBoolCacher.Clear()
	serverLoglevelMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOG_BODY_ON_ERROR
// --------------------------------------
var (
	serverLogBodyOnErrorStr = os.Getenv("SERVER_LOG_BODY_ON_ERROR")

	serverLogBodyOnErrorIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogBodyOnErrorStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogBodyOnErrorStr))
		}
		val := int(v)
		return &val
	})
	serverLogBodyOnErrorInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogBodyOnErrorStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLogBodyOnErrorStr))
		}
		val := int64(v)
		return &val
	})
	serverLogBodyOnErrorUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLogBodyOnErrorStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogBodyOnErrorStr))
		}
		val := uint(v)
		return &val
	})
	serverLogBodyOnErrorBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLogBodyOnErrorStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLogBodyOnErrorStr))
		}
		return &v
	})
	serverLogBodyOnErrorMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogBodyOnErrorStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLogBodyOnErrorStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLogBodyOnError returns the cached SERVER_LOG_BODY_ON_ERROR variable.
func ServerLogBodyOnError() string {
	return serverLogBodyOnErrorStr
}

// ServerLogBodyOnErrorInt returns the cached int of SERVER_LOG_BODY_ON_ERROR variable.
func ServerLogBodyOnErrorInt() int {
	return *((serverLogBodyOnErrorIntCacher.Get()).(*int))
}

// ServerLogBodyOnErrorInt64 returns the cached int64 of SERVER_LOG_BODY_ON_ERROR variable.
func ServerLogBodyOnErrorInt64() int64 {
	return *((serverLogBodyOnErrorInt64Cacher.Get()).(*int64))
}

// ServerLogBodyOnErrorUint returns the cached uint of SERVER_LOG_BODY_ON_ERROR variable.
func ServerLogBodyOnErrorUint() uint {
	return *((serverLogBodyOnErrorUintCacher.Get()).(*uint))
}

// ServerLogBodyOnErrorBool returns the cached bool of SERVER_LOG_BODY_ON_ERROR variable.
func ServerLogBodyOnErrorBool() bool {
	return *((serverLogBodyOnErrorBoolCacher.Get()).(*bool))
}

// ServerLogBodyOnErrorMs returns the cached millisecond of SERVER_LOG_BODY_ON_ERROR variable.
func ServerLogBodyOnErrorMs() time.Duration {
	return *((serverLogBodyOnErrorMsCacher.Get()).(*time.Duration))
}

// SetServerLogBodyOnError sets the cached value.
func SetServerLogBodyOnError(v string) {
	serverLogBodyOnErrorStr = v
	serverLogBodyOnErrorIntCacher.Clear()
	serverLogBodyOnErrorInt64Cacher.Clear()
	serverLogBodyOnErrorUintCacher.Clear()
	serverLogBodyOnErrorBoolCacher.Clear()
	serverLogBodyOnErrorMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOG_TO_STACKDRIVER
// --------------------------------------
var (
	serverLogToStackdriverStr = os.Getenv("SERVER_LOG_TO_STACKDRIVER")

	serverLogToStackdriverIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStackdriverStr))
		}
		val := int(v)
		return &val
	})
	serverLogToStackdriverInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLogToStackdriverStr))
		}
		val := int64(v)
		return &val
	})
	serverLogToStackdriverUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLogToStackdriverStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStackdriverStr))
		}
		val := uint(v)
		return &val
	})
	serverLogToStackdriverBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLogToStackdriverStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLogToStackdriverStr))
		}
		return &v
	})
	serverLogToStackdriverMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLogToStackdriverStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLogToStackdriver returns the cached SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriver() string {
	return serverLogToStackdriverStr
}

// ServerLogToStackdriverInt returns the cached int of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverInt() int {
	return *((serverLogToStackdriverIntCacher.Get()).(*int))
}

// ServerLogToStackdriverInt64 returns the cached int64 of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverInt64() int64 {
	return *((serverLogToStackdriverInt64Cacher.Get()).(*int64))
}

// ServerLogToStackdriverUint returns the cached uint of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverUint() uint {
	return *((serverLogToStackdriverUintCacher.Get()).(*uint))
}

// ServerLogToStackdriverBool returns the cached bool of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverBool() bool {
	return *((serverLogToStackdriverBoolCacher.Get()).(*bool))
}

// ServerLogToStackdriverMs returns the cached millisecond of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverMs() time.Duration {
	return *((serverLogToStackdriverMsCacher.Get()).(*time.Duration))
}

// SetServerLogToStackdriver sets the cached value.
func SetServerLogToStackdriver(v string) {
	serverLogToStackdriverStr = v
	serverLogToStackdriverIntCacher.Clear()
	serverLogToStackdriverInt64Cacher.Clear()
	serverLogToStackdriverUintCacher.Clear()
	serverLogToStackdriverBoolCacher.Clear()
	serverLogToStackdriverMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOG_TO_STDOUT
// --------------------------------------
var (
	serverLogToStdoutStr = os.Getenv("SERVER_LOG_TO_STDOUT")

	serverLogToStdoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStdoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStdoutStr))
		}
		val := int(v)
		return &val
	})
	serverLogToStdoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStdoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLogToStdoutStr))
		}
		val := int64(v)
		return &val
	})
	serverLogToStdoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLogToStdoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStdoutStr))
		}
		val := uint(v)
		return &val
	})
	serverLogToStdoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLogToStdoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLogToStdoutStr))
		}
		return &v
	})
	serverLogToStdoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStdoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLogToStdoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLogToStdout returns the cached SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdout() string {
	return serverLogToStdoutStr
}

// ServerLogToStdoutInt returns the cached int of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutInt() int {
	return *((serverLogToStdoutIntCacher.Get()).(*int))
}

// ServerLogToStdoutInt64 returns the cached int64 of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutInt64() int64 {
	return *((serverLogToStdoutInt64Cacher.Get()).(*int64))
}

// ServerLogToStdoutUint returns the cached uint of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutUint() uint {
	return *((serverLogToStdoutUintCacher.Get()).(*uint))
}

// ServerLogToStdoutBool returns the cached bool of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutBool() bool {
	return *((serverLogToStdoutBoolCacher.Get()).(*bool))
}

// ServerLogToStdoutMs returns the cached millisecond of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutMs() time.Duration {
	return *((serverLogToStdoutMsCacher.Get()).(*time.Duration))
}

// SetServerLogToStdout sets the cached value.
func SetServerLogToStdout(v string) {
	serverLogToStdoutStr = v
	serverLogToStdoutIntCacher.Clear()
	serverLogToStdoutInt64Cacher.Clear()
	serverLogToStdoutUintCacher.Clear()
	serverLogToStdoutBoolCacher.Clear()
	serverLogToStdoutMsCacher.Clear()
}

// --------------------------------------
// SERVER_PROJECT_ID
// --------------------------------------
var (
	serverProjectIdStr = os.Getenv("SERVER_PROJECT_ID")

	serverProjectIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverProjectIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverProjectIdStr))
		}
		val := int(v)
		return &val
	})
	serverProjectIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverProjectIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverProjectIdStr))
		}
		val := int64(v)
		return &val
	})
	serverProjectIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverProjectIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverProjectIdStr))
		}
		val := uint(v)
		return &val
	})
	serverProjectIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverProjectIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverProjectIdStr))
		}
		return &v
	})
	serverProjectIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverProjectIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverProjectIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerProjectId returns the cached SERVER_PROJECT_ID variable.
func ServerProjectId() string {
	return serverProjectIdStr
}

// ServerProjectIdInt returns the cached int of SERVER_PROJECT_ID variable.
func ServerProjectIdInt() int {
	return *((serverProjectIdIntCacher.Get()).(*int))
}

// ServerProjectIdInt64 returns the cached int64 of SERVER_PROJECT_ID variable.
func ServerProjectIdInt64() int64 {
	return *((serverProjectIdInt64Cacher.Get()).(*int64))
}

// ServerProjectIdUint returns the cached uint of SERVER_PROJECT_ID variable.
func ServerProjectIdUint() uint {
	return *((serverProjectIdUintCacher.Get()).(*uint))
}

// ServerProjectIdBool returns the cached bool of SERVER_PROJECT_ID variable.
func ServerProjectIdBool() bool {
	return *((serverProjectIdBoolCacher.Get()).(*bool))
}

// ServerProjectIdMs returns the cached millisecond of SERVER_PROJECT_ID variable.
func ServerProjectIdMs() time.Duration {
	return *((serverProjectIdMsCacher.Get()).(*time.Duration))
}

// SetServerProjectId sets the cached value.
func SetServerProjectId(v string) {
	serverProjectIdStr = v
	serverProjectIdIntCacher.Clear()
	serverProjectIdInt64Cacher.Clear()
	serverProjectIdUintCacher.Clear()
	serverProjectIdBoolCacher.Clear()
	serverProjectIdMsCacher.Clear()
}

// --------------------------------------
// SERVER_SHUTDOWN_GRACE_PERIOD_MS
// --------------------------------------
var (
	serverShutdownGracePeriodMsStr = os.Getenv("SERVER_SHUTDOWN_GRACE_PERIOD_MS")

	serverShutdownGracePeriodMsIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverShutdownGracePeriodMsStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverShutdownGracePeriodMsStr))
		}
		val := int(v)
		return &val
	})
	serverShutdownGracePeriodMsInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverShutdownGracePeriodMsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverShutdownGracePeriodMsStr))
		}
		val := int64(v)
		return &val
	})
	serverShutdownGracePeriodMsUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverShutdownGracePeriodMsStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverShutdownGracePeriodMsStr))
		}
		val := uint(v)
		return &val
	})
	serverShutdownGracePeriodMsBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverShutdownGracePeriodMsStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverShutdownGracePeriodMsStr))
		}
		return &v
	})
	serverShutdownGracePeriodMsMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverShutdownGracePeriodMsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverShutdownGracePeriodMsStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerShutdownGracePeriodMs returns the cached SERVER_SHUTDOWN_GRACE_PERIOD_MS variable.
func ServerShutdownGracePeriodMs() string {
	return serverShutdownGracePeriodMsStr
}

// ServerShutdownGracePeriodMsInt returns the cached int of SERVER_SHUTDOWN_GRACE_PERIOD_MS variable.
func ServerShutdownGracePeriodMsInt() int {
	return *((serverShutdownGracePeriodMsIntCacher.Get()).(*int))
}

// ServerShutdownGracePeriodMsInt64 returns the cached int64 of SERVER_SHUTDOWN_GRACE_PERIOD_MS variable.
func ServerShutdownGracePeriodMsInt64() int64 {
	return *((serverShutdownGracePeriodMsInt64Cacher.Get()).(*int64))
}

// ServerShutdownGracePeriodMsUint returns the cached uint of SERVER_SHUTDOWN_GRACE_PERIOD_MS variable.
func ServerShutdownGracePeriodMsUint() uint {
	return *((serverShutdownGracePeriodMsUintCacher.Get()).(*uint))
}

// ServerShutdownGracePeriodMsBool returns the cached bool of SERVER_SHUTDOWN_GRACE_PERIOD_MS variable.
func ServerShutdownGracePeriodMsBool() bool {
	return *((serverShutdownGracePeriodMsBoolCacher.Get()).(*bool))
}

// ServerShutdownGracePeriodMsMs returns the cached millisecond of SERVER_SHUTDOWN_GRACE_PERIOD_MS variable.
func ServerShutdownGracePeriodMsMs() time.Duration {
	return *((serverShutdownGracePeriodMsMsCacher.Get()).(*time.Duration))
}

// SetServerShutdownGracePeriodMs sets the cached value.
func SetServerShutdownGracePeriodMs(v string) {
	serverShutdownGracePeriodMsStr = v
	serverShutdownGracePeriodMsIntCacher.Clear()
	serverShutdownGracePeriodMsInt64Cacher.Clear()
	serverShutdownGracePeriodMsUintCacher.Clear()
	serverShutdownGracePeriodMsBoolCacher.Clear()
	serverShutdownGracePeriodMsMsCacher.Clear()
}

// --------------------------------------
// SUSPICION_INVESTIGATION_TIMEOUT
// --------------------------------------
var (
	suspicionInvestigationTimeoutStr = os.Getenv("SUSPICION_INVESTIGATION_TIMEOUT")

	suspicionInvestigationTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionInvestigationTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspicionInvestigationTimeoutStr))
		}
		val := int(v)
		return &val
	})
	suspicionInvestigationTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionInvestigationTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspicionInvestigationTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	suspicionInvestigationTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspicionInvestigationTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspicionInvestigationTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	suspicionInvestigationTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspicionInvestigationTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspicionInvestigationTimeoutStr))
		}
		return &v
	})
	suspicionInvestigationTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspicionInvestigationTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspicionInvestigationTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspicionInvestigationTimeout returns the cached SUSPICION_INVESTIGATION_TIMEOUT variable.
func SuspicionInvestigationTimeout() string {
	return suspicionInvestigationTimeoutStr
}

// SuspicionInvestigationTimeoutInt returns the cached int of SUSPICION_INVESTIGATION_TIMEOUT variable.
func SuspicionInvestigationTimeoutInt() int {
	return *((suspicionInvestigationTimeoutIntCacher.Get()).(*int))
}

// SuspicionInvestigationTimeoutInt64 returns the cached int64 of SUSPICION_INVESTIGATION_TIMEOUT variable.
func SuspicionInvestigationTimeoutInt64() int64 {
	return *((suspicionInvestigationTimeoutInt64Cacher.Get()).(*int64))
}

// SuspicionInvestigationTimeoutUint returns the cached uint of SUSPICION_INVESTIGATION_TIMEOUT variable.
func SuspicionInvestigationTimeoutUint() uint {
	return *((suspicionInvestigationTimeoutUintCacher.Get()).(*uint))
}

// SuspicionInvestigationTimeoutBool returns the cached bool of SUSPICION_INVESTIGATION_TIMEOUT variable.
func SuspicionInvestigationTimeoutBool() bool {
	return *((suspicionInvestigationTimeoutBoolCacher.Get()).(*bool))
}

// SuspicionInvestigationTimeoutMs returns the cached millisecond of SUSPICION_INVESTIGATION_TIMEOUT variable.
func SuspicionInvestigationTimeoutMs() time.Duration {
	return *((suspicionInvestigationTimeoutMsCacher.Get()).(*time.Duration))
}

// SetSuspicionInvestigationTimeout sets the cached value.
func SetSuspicionInvestigationTimeout(v string) {
	suspicionInvestigationTimeoutStr = v
	suspicionInvestigationTimeoutIntCacher.Clear()
	suspicionInvestigationTimeoutInt64Cacher.Clear()
	suspicionInvestigationTimeoutUintCacher.Clear()
	suspicionInvestigationTimeoutBoolCacher.Clear()
	suspicionInvestigationTimeoutMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT
// --------------------------------------
var (
	suspiciousTransactionRule1AmountStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT")

	suspiciousTransactionRule1AmountIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule1AmountStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule1AmountStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule1AmountInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule1AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule1AmountStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule1AmountUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule1AmountStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule1AmountStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule1AmountBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule1AmountStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule1AmountStr))
		}
		return &v
	})
	suspiciousTransactionRule1AmountMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule1AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule1AmountStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule1Amount returns the cached SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT variable.
func SuspiciousTransactionRule1Amount() string {
	return suspiciousTransactionRule1AmountStr
}

// SuspiciousTransactionRule1AmountInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT variable.
func SuspiciousTransactionRule1AmountInt() int {
	return *((suspiciousTransactionRule1AmountIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule1AmountInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT variable.
func SuspiciousTransactionRule1AmountInt64() int64 {
	return *((suspiciousTransactionRule1AmountInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule1AmountUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT variable.
func SuspiciousTransactionRule1AmountUint() uint {
	return *((suspiciousTransactionRule1AmountUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule1AmountBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT variable.
func SuspiciousTransactionRule1AmountBool() bool {
	return *((suspiciousTransactionRule1AmountBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule1AmountMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_1_AMOUNT variable.
func SuspiciousTransactionRule1AmountMs() time.Duration {
	return *((suspiciousTransactionRule1AmountMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule1Amount sets the cached value.
func SetSuspiciousTransactionRule1Amount(v string) {
	suspiciousTransactionRule1AmountStr = v
	suspiciousTransactionRule1AmountIntCacher.Clear()
	suspiciousTransactionRule1AmountInt64Cacher.Clear()
	suspiciousTransactionRule1AmountUintCacher.Clear()
	suspiciousTransactionRule1AmountBoolCacher.Clear()
	suspiciousTransactionRule1AmountMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_1_DAYS
// --------------------------------------
var (
	suspiciousTransactionRule1DaysStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_1_DAYS")

	suspiciousTransactionRule1DaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule1DaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule1DaysStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule1DaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule1DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule1DaysStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule1DaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule1DaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule1DaysStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule1DaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule1DaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule1DaysStr))
		}
		return &v
	})
	suspiciousTransactionRule1DaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule1DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule1DaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule1Days returns the cached SUSPICIOUS_TRANSACTION_RULE_1_DAYS variable.
func SuspiciousTransactionRule1Days() string {
	return suspiciousTransactionRule1DaysStr
}

// SuspiciousTransactionRule1DaysInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_1_DAYS variable.
func SuspiciousTransactionRule1DaysInt() int {
	return *((suspiciousTransactionRule1DaysIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule1DaysInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_1_DAYS variable.
func SuspiciousTransactionRule1DaysInt64() int64 {
	return *((suspiciousTransactionRule1DaysInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule1DaysUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_1_DAYS variable.
func SuspiciousTransactionRule1DaysUint() uint {
	return *((suspiciousTransactionRule1DaysUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule1DaysBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_1_DAYS variable.
func SuspiciousTransactionRule1DaysBool() bool {
	return *((suspiciousTransactionRule1DaysBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule1DaysMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_1_DAYS variable.
func SuspiciousTransactionRule1DaysMs() time.Duration {
	return *((suspiciousTransactionRule1DaysMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule1Days sets the cached value.
func SetSuspiciousTransactionRule1Days(v string) {
	suspiciousTransactionRule1DaysStr = v
	suspiciousTransactionRule1DaysIntCacher.Clear()
	suspiciousTransactionRule1DaysInt64Cacher.Clear()
	suspiciousTransactionRule1DaysUintCacher.Clear()
	suspiciousTransactionRule1DaysBoolCacher.Clear()
	suspiciousTransactionRule1DaysMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT
// --------------------------------------
var (
	suspiciousTransactionRule2AmountStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT")

	suspiciousTransactionRule2AmountIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2AmountStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2AmountStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule2AmountInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule2AmountStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule2AmountUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule2AmountStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2AmountStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule2AmountBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule2AmountStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule2AmountStr))
		}
		return &v
	})
	suspiciousTransactionRule2AmountMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule2AmountStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule2Amount returns the cached SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT variable.
func SuspiciousTransactionRule2Amount() string {
	return suspiciousTransactionRule2AmountStr
}

// SuspiciousTransactionRule2AmountInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT variable.
func SuspiciousTransactionRule2AmountInt() int {
	return *((suspiciousTransactionRule2AmountIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule2AmountInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT variable.
func SuspiciousTransactionRule2AmountInt64() int64 {
	return *((suspiciousTransactionRule2AmountInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule2AmountUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT variable.
func SuspiciousTransactionRule2AmountUint() uint {
	return *((suspiciousTransactionRule2AmountUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule2AmountBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT variable.
func SuspiciousTransactionRule2AmountBool() bool {
	return *((suspiciousTransactionRule2AmountBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule2AmountMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_2_AMOUNT variable.
func SuspiciousTransactionRule2AmountMs() time.Duration {
	return *((suspiciousTransactionRule2AmountMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule2Amount sets the cached value.
func SetSuspiciousTransactionRule2Amount(v string) {
	suspiciousTransactionRule2AmountStr = v
	suspiciousTransactionRule2AmountIntCacher.Clear()
	suspiciousTransactionRule2AmountInt64Cacher.Clear()
	suspiciousTransactionRule2AmountUintCacher.Clear()
	suspiciousTransactionRule2AmountBoolCacher.Clear()
	suspiciousTransactionRule2AmountMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_2_DAYS
// --------------------------------------
var (
	suspiciousTransactionRule2DaysStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_2_DAYS")

	suspiciousTransactionRule2DaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2DaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2DaysStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule2DaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule2DaysStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule2DaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule2DaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2DaysStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule2DaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule2DaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule2DaysStr))
		}
		return &v
	})
	suspiciousTransactionRule2DaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule2DaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule2Days returns the cached SUSPICIOUS_TRANSACTION_RULE_2_DAYS variable.
func SuspiciousTransactionRule2Days() string {
	return suspiciousTransactionRule2DaysStr
}

// SuspiciousTransactionRule2DaysInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_2_DAYS variable.
func SuspiciousTransactionRule2DaysInt() int {
	return *((suspiciousTransactionRule2DaysIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule2DaysInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_2_DAYS variable.
func SuspiciousTransactionRule2DaysInt64() int64 {
	return *((suspiciousTransactionRule2DaysInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule2DaysUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_2_DAYS variable.
func SuspiciousTransactionRule2DaysUint() uint {
	return *((suspiciousTransactionRule2DaysUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule2DaysBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_2_DAYS variable.
func SuspiciousTransactionRule2DaysBool() bool {
	return *((suspiciousTransactionRule2DaysBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule2DaysMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_2_DAYS variable.
func SuspiciousTransactionRule2DaysMs() time.Duration {
	return *((suspiciousTransactionRule2DaysMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule2Days sets the cached value.
func SetSuspiciousTransactionRule2Days(v string) {
	suspiciousTransactionRule2DaysStr = v
	suspiciousTransactionRule2DaysIntCacher.Clear()
	suspiciousTransactionRule2DaysInt64Cacher.Clear()
	suspiciousTransactionRule2DaysUintCacher.Clear()
	suspiciousTransactionRule2DaysBoolCacher.Clear()
	suspiciousTransactionRule2DaysMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_2_FACTOR
// --------------------------------------
var (
	suspiciousTransactionRule2FactorStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_2_FACTOR")

	suspiciousTransactionRule2FactorIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2FactorStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2FactorStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule2FactorInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2FactorStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule2FactorStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule2FactorUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule2FactorStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2FactorStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule2FactorBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule2FactorStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule2FactorStr))
		}
		return &v
	})
	suspiciousTransactionRule2FactorMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2FactorStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule2FactorStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule2Factor returns the cached SUSPICIOUS_TRANSACTION_RULE_2_FACTOR variable.
func SuspiciousTransactionRule2Factor() string {
	return suspiciousTransactionRule2FactorStr
}

// SuspiciousTransactionRule2FactorInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_2_FACTOR variable.
func SuspiciousTransactionRule2FactorInt() int {
	return *((suspiciousTransactionRule2FactorIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule2FactorInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_2_FACTOR variable.
func SuspiciousTransactionRule2FactorInt64() int64 {
	return *((suspiciousTransactionRule2FactorInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule2FactorUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_2_FACTOR variable.
func SuspiciousTransactionRule2FactorUint() uint {
	return *((suspiciousTransactionRule2FactorUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule2FactorBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_2_FACTOR variable.
func SuspiciousTransactionRule2FactorBool() bool {
	return *((suspiciousTransactionRule2FactorBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule2FactorMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_2_FACTOR variable.
func SuspiciousTransactionRule2FactorMs() time.Duration {
	return *((suspiciousTransactionRule2FactorMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule2Factor sets the cached value.
func SetSuspiciousTransactionRule2Factor(v string) {
	suspiciousTransactionRule2FactorStr = v
	suspiciousTransactionRule2FactorIntCacher.Clear()
	suspiciousTransactionRule2FactorInt64Cacher.Clear()
	suspiciousTransactionRule2FactorUintCacher.Clear()
	suspiciousTransactionRule2FactorBoolCacher.Clear()
	suspiciousTransactionRule2FactorMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_2_MONTHS
// --------------------------------------
var (
	suspiciousTransactionRule2MonthsStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_2_MONTHS")

	suspiciousTransactionRule2MonthsIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2MonthsStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2MonthsStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule2MonthsInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2MonthsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule2MonthsStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule2MonthsUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule2MonthsStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule2MonthsStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule2MonthsBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule2MonthsStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule2MonthsStr))
		}
		return &v
	})
	suspiciousTransactionRule2MonthsMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule2MonthsStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule2MonthsStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule2Months returns the cached SUSPICIOUS_TRANSACTION_RULE_2_MONTHS variable.
func SuspiciousTransactionRule2Months() string {
	return suspiciousTransactionRule2MonthsStr
}

// SuspiciousTransactionRule2MonthsInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_2_MONTHS variable.
func SuspiciousTransactionRule2MonthsInt() int {
	return *((suspiciousTransactionRule2MonthsIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule2MonthsInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_2_MONTHS variable.
func SuspiciousTransactionRule2MonthsInt64() int64 {
	return *((suspiciousTransactionRule2MonthsInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule2MonthsUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_2_MONTHS variable.
func SuspiciousTransactionRule2MonthsUint() uint {
	return *((suspiciousTransactionRule2MonthsUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule2MonthsBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_2_MONTHS variable.
func SuspiciousTransactionRule2MonthsBool() bool {
	return *((suspiciousTransactionRule2MonthsBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule2MonthsMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_2_MONTHS variable.
func SuspiciousTransactionRule2MonthsMs() time.Duration {
	return *((suspiciousTransactionRule2MonthsMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule2Months sets the cached value.
func SetSuspiciousTransactionRule2Months(v string) {
	suspiciousTransactionRule2MonthsStr = v
	suspiciousTransactionRule2MonthsIntCacher.Clear()
	suspiciousTransactionRule2MonthsInt64Cacher.Clear()
	suspiciousTransactionRule2MonthsUintCacher.Clear()
	suspiciousTransactionRule2MonthsBoolCacher.Clear()
	suspiciousTransactionRule2MonthsMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT
// --------------------------------------
var (
	suspiciousTransactionRule3AmountStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT")

	suspiciousTransactionRule3AmountIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule3AmountStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule3AmountStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule3AmountInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule3AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule3AmountStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule3AmountUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule3AmountStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule3AmountStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule3AmountBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule3AmountStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule3AmountStr))
		}
		return &v
	})
	suspiciousTransactionRule3AmountMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule3AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule3AmountStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule3Amount returns the cached SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT variable.
func SuspiciousTransactionRule3Amount() string {
	return suspiciousTransactionRule3AmountStr
}

// SuspiciousTransactionRule3AmountInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT variable.
func SuspiciousTransactionRule3AmountInt() int {
	return *((suspiciousTransactionRule3AmountIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule3AmountInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT variable.
func SuspiciousTransactionRule3AmountInt64() int64 {
	return *((suspiciousTransactionRule3AmountInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule3AmountUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT variable.
func SuspiciousTransactionRule3AmountUint() uint {
	return *((suspiciousTransactionRule3AmountUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule3AmountBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT variable.
func SuspiciousTransactionRule3AmountBool() bool {
	return *((suspiciousTransactionRule3AmountBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule3AmountMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_3_AMOUNT variable.
func SuspiciousTransactionRule3AmountMs() time.Duration {
	return *((suspiciousTransactionRule3AmountMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule3Amount sets the cached value.
func SetSuspiciousTransactionRule3Amount(v string) {
	suspiciousTransactionRule3AmountStr = v
	suspiciousTransactionRule3AmountIntCacher.Clear()
	suspiciousTransactionRule3AmountInt64Cacher.Clear()
	suspiciousTransactionRule3AmountUintCacher.Clear()
	suspiciousTransactionRule3AmountBoolCacher.Clear()
	suspiciousTransactionRule3AmountMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_3_DAYS
// --------------------------------------
var (
	suspiciousTransactionRule3DaysStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_3_DAYS")

	suspiciousTransactionRule3DaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule3DaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule3DaysStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule3DaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule3DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule3DaysStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule3DaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule3DaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule3DaysStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule3DaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule3DaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule3DaysStr))
		}
		return &v
	})
	suspiciousTransactionRule3DaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule3DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule3DaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule3Days returns the cached SUSPICIOUS_TRANSACTION_RULE_3_DAYS variable.
func SuspiciousTransactionRule3Days() string {
	return suspiciousTransactionRule3DaysStr
}

// SuspiciousTransactionRule3DaysInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_3_DAYS variable.
func SuspiciousTransactionRule3DaysInt() int {
	return *((suspiciousTransactionRule3DaysIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule3DaysInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_3_DAYS variable.
func SuspiciousTransactionRule3DaysInt64() int64 {
	return *((suspiciousTransactionRule3DaysInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule3DaysUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_3_DAYS variable.
func SuspiciousTransactionRule3DaysUint() uint {
	return *((suspiciousTransactionRule3DaysUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule3DaysBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_3_DAYS variable.
func SuspiciousTransactionRule3DaysBool() bool {
	return *((suspiciousTransactionRule3DaysBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule3DaysMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_3_DAYS variable.
func SuspiciousTransactionRule3DaysMs() time.Duration {
	return *((suspiciousTransactionRule3DaysMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule3Days sets the cached value.
func SetSuspiciousTransactionRule3Days(v string) {
	suspiciousTransactionRule3DaysStr = v
	suspiciousTransactionRule3DaysIntCacher.Clear()
	suspiciousTransactionRule3DaysInt64Cacher.Clear()
	suspiciousTransactionRule3DaysUintCacher.Clear()
	suspiciousTransactionRule3DaysBoolCacher.Clear()
	suspiciousTransactionRule3DaysMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX
// --------------------------------------
var (
	suspiciousTransactionRule4AgeMaxStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX")

	suspiciousTransactionRule4AgeMaxIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AgeMaxStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4AgeMaxStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule4AgeMaxInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AgeMaxStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule4AgeMaxStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule4AgeMaxUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule4AgeMaxStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4AgeMaxStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule4AgeMaxBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule4AgeMaxStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule4AgeMaxStr))
		}
		return &v
	})
	suspiciousTransactionRule4AgeMaxMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AgeMaxStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule4AgeMaxStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule4AgeMax returns the cached SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX variable.
func SuspiciousTransactionRule4AgeMax() string {
	return suspiciousTransactionRule4AgeMaxStr
}

// SuspiciousTransactionRule4AgeMaxInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX variable.
func SuspiciousTransactionRule4AgeMaxInt() int {
	return *((suspiciousTransactionRule4AgeMaxIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule4AgeMaxInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX variable.
func SuspiciousTransactionRule4AgeMaxInt64() int64 {
	return *((suspiciousTransactionRule4AgeMaxInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule4AgeMaxUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX variable.
func SuspiciousTransactionRule4AgeMaxUint() uint {
	return *((suspiciousTransactionRule4AgeMaxUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule4AgeMaxBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX variable.
func SuspiciousTransactionRule4AgeMaxBool() bool {
	return *((suspiciousTransactionRule4AgeMaxBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule4AgeMaxMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MAX variable.
func SuspiciousTransactionRule4AgeMaxMs() time.Duration {
	return *((suspiciousTransactionRule4AgeMaxMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule4AgeMax sets the cached value.
func SetSuspiciousTransactionRule4AgeMax(v string) {
	suspiciousTransactionRule4AgeMaxStr = v
	suspiciousTransactionRule4AgeMaxIntCacher.Clear()
	suspiciousTransactionRule4AgeMaxInt64Cacher.Clear()
	suspiciousTransactionRule4AgeMaxUintCacher.Clear()
	suspiciousTransactionRule4AgeMaxBoolCacher.Clear()
	suspiciousTransactionRule4AgeMaxMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN
// --------------------------------------
var (
	suspiciousTransactionRule4AgeMinStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN")

	suspiciousTransactionRule4AgeMinIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AgeMinStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4AgeMinStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule4AgeMinInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AgeMinStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule4AgeMinStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule4AgeMinUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule4AgeMinStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4AgeMinStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule4AgeMinBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule4AgeMinStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule4AgeMinStr))
		}
		return &v
	})
	suspiciousTransactionRule4AgeMinMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AgeMinStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule4AgeMinStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule4AgeMin returns the cached SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN variable.
func SuspiciousTransactionRule4AgeMin() string {
	return suspiciousTransactionRule4AgeMinStr
}

// SuspiciousTransactionRule4AgeMinInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN variable.
func SuspiciousTransactionRule4AgeMinInt() int {
	return *((suspiciousTransactionRule4AgeMinIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule4AgeMinInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN variable.
func SuspiciousTransactionRule4AgeMinInt64() int64 {
	return *((suspiciousTransactionRule4AgeMinInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule4AgeMinUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN variable.
func SuspiciousTransactionRule4AgeMinUint() uint {
	return *((suspiciousTransactionRule4AgeMinUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule4AgeMinBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN variable.
func SuspiciousTransactionRule4AgeMinBool() bool {
	return *((suspiciousTransactionRule4AgeMinBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule4AgeMinMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_4_AGE_MIN variable.
func SuspiciousTransactionRule4AgeMinMs() time.Duration {
	return *((suspiciousTransactionRule4AgeMinMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule4AgeMin sets the cached value.
func SetSuspiciousTransactionRule4AgeMin(v string) {
	suspiciousTransactionRule4AgeMinStr = v
	suspiciousTransactionRule4AgeMinIntCacher.Clear()
	suspiciousTransactionRule4AgeMinInt64Cacher.Clear()
	suspiciousTransactionRule4AgeMinUintCacher.Clear()
	suspiciousTransactionRule4AgeMinBoolCacher.Clear()
	suspiciousTransactionRule4AgeMinMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT
// --------------------------------------
var (
	suspiciousTransactionRule4AmountStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT")

	suspiciousTransactionRule4AmountIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AmountStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4AmountStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule4AmountInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule4AmountStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule4AmountUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule4AmountStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4AmountStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule4AmountBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule4AmountStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule4AmountStr))
		}
		return &v
	})
	suspiciousTransactionRule4AmountMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule4AmountStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule4Amount returns the cached SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT variable.
func SuspiciousTransactionRule4Amount() string {
	return suspiciousTransactionRule4AmountStr
}

// SuspiciousTransactionRule4AmountInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT variable.
func SuspiciousTransactionRule4AmountInt() int {
	return *((suspiciousTransactionRule4AmountIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule4AmountInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT variable.
func SuspiciousTransactionRule4AmountInt64() int64 {
	return *((suspiciousTransactionRule4AmountInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule4AmountUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT variable.
func SuspiciousTransactionRule4AmountUint() uint {
	return *((suspiciousTransactionRule4AmountUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule4AmountBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT variable.
func SuspiciousTransactionRule4AmountBool() bool {
	return *((suspiciousTransactionRule4AmountBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule4AmountMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_4_AMOUNT variable.
func SuspiciousTransactionRule4AmountMs() time.Duration {
	return *((suspiciousTransactionRule4AmountMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule4Amount sets the cached value.
func SetSuspiciousTransactionRule4Amount(v string) {
	suspiciousTransactionRule4AmountStr = v
	suspiciousTransactionRule4AmountIntCacher.Clear()
	suspiciousTransactionRule4AmountInt64Cacher.Clear()
	suspiciousTransactionRule4AmountUintCacher.Clear()
	suspiciousTransactionRule4AmountBoolCacher.Clear()
	suspiciousTransactionRule4AmountMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_4_DAYS
// --------------------------------------
var (
	suspiciousTransactionRule4DaysStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_4_DAYS")

	suspiciousTransactionRule4DaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4DaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4DaysStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule4DaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule4DaysStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule4DaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule4DaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4DaysStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule4DaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule4DaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule4DaysStr))
		}
		return &v
	})
	suspiciousTransactionRule4DaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule4DaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule4Days returns the cached SUSPICIOUS_TRANSACTION_RULE_4_DAYS variable.
func SuspiciousTransactionRule4Days() string {
	return suspiciousTransactionRule4DaysStr
}

// SuspiciousTransactionRule4DaysInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_4_DAYS variable.
func SuspiciousTransactionRule4DaysInt() int {
	return *((suspiciousTransactionRule4DaysIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule4DaysInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_4_DAYS variable.
func SuspiciousTransactionRule4DaysInt64() int64 {
	return *((suspiciousTransactionRule4DaysInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule4DaysUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_4_DAYS variable.
func SuspiciousTransactionRule4DaysUint() uint {
	return *((suspiciousTransactionRule4DaysUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule4DaysBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_4_DAYS variable.
func SuspiciousTransactionRule4DaysBool() bool {
	return *((suspiciousTransactionRule4DaysBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule4DaysMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_4_DAYS variable.
func SuspiciousTransactionRule4DaysMs() time.Duration {
	return *((suspiciousTransactionRule4DaysMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule4Days sets the cached value.
func SetSuspiciousTransactionRule4Days(v string) {
	suspiciousTransactionRule4DaysStr = v
	suspiciousTransactionRule4DaysIntCacher.Clear()
	suspiciousTransactionRule4DaysInt64Cacher.Clear()
	suspiciousTransactionRule4DaysUintCacher.Clear()
	suspiciousTransactionRule4DaysBoolCacher.Clear()
	suspiciousTransactionRule4DaysMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS
// --------------------------------------
var (
	suspiciousTransactionRule4RestrictionAreasStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS")

	suspiciousTransactionRule4RestrictionAreasIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4RestrictionAreasStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4RestrictionAreasStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule4RestrictionAreasInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4RestrictionAreasStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule4RestrictionAreasStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule4RestrictionAreasUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule4RestrictionAreasStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule4RestrictionAreasStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule4RestrictionAreasBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule4RestrictionAreasStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule4RestrictionAreasStr))
		}
		return &v
	})
	suspiciousTransactionRule4RestrictionAreasMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule4RestrictionAreasStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule4RestrictionAreasStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule4RestrictionAreas returns the cached SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule4RestrictionAreas() string {
	return suspiciousTransactionRule4RestrictionAreasStr
}

// SuspiciousTransactionRule4RestrictionAreasInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule4RestrictionAreasInt() int {
	return *((suspiciousTransactionRule4RestrictionAreasIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule4RestrictionAreasInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule4RestrictionAreasInt64() int64 {
	return *((suspiciousTransactionRule4RestrictionAreasInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule4RestrictionAreasUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule4RestrictionAreasUint() uint {
	return *((suspiciousTransactionRule4RestrictionAreasUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule4RestrictionAreasBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule4RestrictionAreasBool() bool {
	return *((suspiciousTransactionRule4RestrictionAreasBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule4RestrictionAreasMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_4_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule4RestrictionAreasMs() time.Duration {
	return *((suspiciousTransactionRule4RestrictionAreasMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule4RestrictionAreas sets the cached value.
func SetSuspiciousTransactionRule4RestrictionAreas(v string) {
	suspiciousTransactionRule4RestrictionAreasStr = v
	suspiciousTransactionRule4RestrictionAreasIntCacher.Clear()
	suspiciousTransactionRule4RestrictionAreasInt64Cacher.Clear()
	suspiciousTransactionRule4RestrictionAreasUintCacher.Clear()
	suspiciousTransactionRule4RestrictionAreasBoolCacher.Clear()
	suspiciousTransactionRule4RestrictionAreasMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT
// --------------------------------------
var (
	suspiciousTransactionRule5AmountStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT")

	suspiciousTransactionRule5AmountIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5AmountStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule5AmountStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule5AmountInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule5AmountStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule5AmountUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule5AmountStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule5AmountStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule5AmountBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule5AmountStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule5AmountStr))
		}
		return &v
	})
	suspiciousTransactionRule5AmountMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5AmountStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule5AmountStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule5Amount returns the cached SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT variable.
func SuspiciousTransactionRule5Amount() string {
	return suspiciousTransactionRule5AmountStr
}

// SuspiciousTransactionRule5AmountInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT variable.
func SuspiciousTransactionRule5AmountInt() int {
	return *((suspiciousTransactionRule5AmountIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule5AmountInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT variable.
func SuspiciousTransactionRule5AmountInt64() int64 {
	return *((suspiciousTransactionRule5AmountInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule5AmountUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT variable.
func SuspiciousTransactionRule5AmountUint() uint {
	return *((suspiciousTransactionRule5AmountUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule5AmountBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT variable.
func SuspiciousTransactionRule5AmountBool() bool {
	return *((suspiciousTransactionRule5AmountBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule5AmountMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_5_AMOUNT variable.
func SuspiciousTransactionRule5AmountMs() time.Duration {
	return *((suspiciousTransactionRule5AmountMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule5Amount sets the cached value.
func SetSuspiciousTransactionRule5Amount(v string) {
	suspiciousTransactionRule5AmountStr = v
	suspiciousTransactionRule5AmountIntCacher.Clear()
	suspiciousTransactionRule5AmountInt64Cacher.Clear()
	suspiciousTransactionRule5AmountUintCacher.Clear()
	suspiciousTransactionRule5AmountBoolCacher.Clear()
	suspiciousTransactionRule5AmountMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_5_DAYS
// --------------------------------------
var (
	suspiciousTransactionRule5DaysStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_5_DAYS")

	suspiciousTransactionRule5DaysIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5DaysStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule5DaysStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule5DaysInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule5DaysStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule5DaysUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule5DaysStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule5DaysStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule5DaysBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule5DaysStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule5DaysStr))
		}
		return &v
	})
	suspiciousTransactionRule5DaysMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5DaysStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule5DaysStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule5Days returns the cached SUSPICIOUS_TRANSACTION_RULE_5_DAYS variable.
func SuspiciousTransactionRule5Days() string {
	return suspiciousTransactionRule5DaysStr
}

// SuspiciousTransactionRule5DaysInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_5_DAYS variable.
func SuspiciousTransactionRule5DaysInt() int {
	return *((suspiciousTransactionRule5DaysIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule5DaysInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_5_DAYS variable.
func SuspiciousTransactionRule5DaysInt64() int64 {
	return *((suspiciousTransactionRule5DaysInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule5DaysUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_5_DAYS variable.
func SuspiciousTransactionRule5DaysUint() uint {
	return *((suspiciousTransactionRule5DaysUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule5DaysBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_5_DAYS variable.
func SuspiciousTransactionRule5DaysBool() bool {
	return *((suspiciousTransactionRule5DaysBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule5DaysMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_5_DAYS variable.
func SuspiciousTransactionRule5DaysMs() time.Duration {
	return *((suspiciousTransactionRule5DaysMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule5Days sets the cached value.
func SetSuspiciousTransactionRule5Days(v string) {
	suspiciousTransactionRule5DaysStr = v
	suspiciousTransactionRule5DaysIntCacher.Clear()
	suspiciousTransactionRule5DaysInt64Cacher.Clear()
	suspiciousTransactionRule5DaysUintCacher.Clear()
	suspiciousTransactionRule5DaysBoolCacher.Clear()
	suspiciousTransactionRule5DaysMsCacher.Clear()
}

// --------------------------------------
// SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS
// --------------------------------------
var (
	suspiciousTransactionRule5RestrictionAreasStr = os.Getenv("SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS")

	suspiciousTransactionRule5RestrictionAreasIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5RestrictionAreasStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule5RestrictionAreasStr))
		}
		val := int(v)
		return &val
	})
	suspiciousTransactionRule5RestrictionAreasInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5RestrictionAreasStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", suspiciousTransactionRule5RestrictionAreasStr))
		}
		val := int64(v)
		return &val
	})
	suspiciousTransactionRule5RestrictionAreasUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(suspiciousTransactionRule5RestrictionAreasStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", suspiciousTransactionRule5RestrictionAreasStr))
		}
		val := uint(v)
		return &val
	})
	suspiciousTransactionRule5RestrictionAreasBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(suspiciousTransactionRule5RestrictionAreasStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", suspiciousTransactionRule5RestrictionAreasStr))
		}
		return &v
	})
	suspiciousTransactionRule5RestrictionAreasMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(suspiciousTransactionRule5RestrictionAreasStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", suspiciousTransactionRule5RestrictionAreasStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// SuspiciousTransactionRule5RestrictionAreas returns the cached SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule5RestrictionAreas() string {
	return suspiciousTransactionRule5RestrictionAreasStr
}

// SuspiciousTransactionRule5RestrictionAreasInt returns the cached int of SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule5RestrictionAreasInt() int {
	return *((suspiciousTransactionRule5RestrictionAreasIntCacher.Get()).(*int))
}

// SuspiciousTransactionRule5RestrictionAreasInt64 returns the cached int64 of SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule5RestrictionAreasInt64() int64 {
	return *((suspiciousTransactionRule5RestrictionAreasInt64Cacher.Get()).(*int64))
}

// SuspiciousTransactionRule5RestrictionAreasUint returns the cached uint of SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule5RestrictionAreasUint() uint {
	return *((suspiciousTransactionRule5RestrictionAreasUintCacher.Get()).(*uint))
}

// SuspiciousTransactionRule5RestrictionAreasBool returns the cached bool of SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule5RestrictionAreasBool() bool {
	return *((suspiciousTransactionRule5RestrictionAreasBoolCacher.Get()).(*bool))
}

// SuspiciousTransactionRule5RestrictionAreasMs returns the cached millisecond of SUSPICIOUS_TRANSACTION_RULE_5_RESTRICTION_AREAS variable.
func SuspiciousTransactionRule5RestrictionAreasMs() time.Duration {
	return *((suspiciousTransactionRule5RestrictionAreasMsCacher.Get()).(*time.Duration))
}

// SetSuspiciousTransactionRule5RestrictionAreas sets the cached value.
func SetSuspiciousTransactionRule5RestrictionAreas(v string) {
	suspiciousTransactionRule5RestrictionAreasStr = v
	suspiciousTransactionRule5RestrictionAreasIntCacher.Clear()
	suspiciousTransactionRule5RestrictionAreasInt64Cacher.Clear()
	suspiciousTransactionRule5RestrictionAreasUintCacher.Clear()
	suspiciousTransactionRule5RestrictionAreasBoolCacher.Clear()
	suspiciousTransactionRule5RestrictionAreasMsCacher.Clear()
}

// --------------------------------------
// TOTP_ISSUER
// --------------------------------------
var (
	totpIssuerStr = os.Getenv("TOTP_ISSUER")

	totpIssuerIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(totpIssuerStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", totpIssuerStr))
		}
		val := int(v)
		return &val
	})
	totpIssuerInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(totpIssuerStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", totpIssuerStr))
		}
		val := int64(v)
		return &val
	})
	totpIssuerUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(totpIssuerStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", totpIssuerStr))
		}
		val := uint(v)
		return &val
	})
	totpIssuerBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(totpIssuerStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", totpIssuerStr))
		}
		return &v
	})
	totpIssuerMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(totpIssuerStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", totpIssuerStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// TotpIssuer returns the cached TOTP_ISSUER variable.
func TotpIssuer() string {
	return totpIssuerStr
}

// TotpIssuerInt returns the cached int of TOTP_ISSUER variable.
func TotpIssuerInt() int {
	return *((totpIssuerIntCacher.Get()).(*int))
}

// TotpIssuerInt64 returns the cached int64 of TOTP_ISSUER variable.
func TotpIssuerInt64() int64 {
	return *((totpIssuerInt64Cacher.Get()).(*int64))
}

// TotpIssuerUint returns the cached uint of TOTP_ISSUER variable.
func TotpIssuerUint() uint {
	return *((totpIssuerUintCacher.Get()).(*uint))
}

// TotpIssuerBool returns the cached bool of TOTP_ISSUER variable.
func TotpIssuerBool() bool {
	return *((totpIssuerBoolCacher.Get()).(*bool))
}

// TotpIssuerMs returns the cached millisecond of TOTP_ISSUER variable.
func TotpIssuerMs() time.Duration {
	return *((totpIssuerMsCacher.Get()).(*time.Duration))
}

// SetTotpIssuer sets the cached value.
func SetTotpIssuer(v string) {
	totpIssuerStr = v
	totpIssuerIntCacher.Clear()
	totpIssuerInt64Cacher.Clear()
	totpIssuerUintCacher.Clear()
	totpIssuerBoolCacher.Clear()
	totpIssuerMsCacher.Clear()
}

// --------------------------------------
// TWO_FA_TOKEN_EXPIRED_TIMEOUT
// --------------------------------------
var (
	twoFaTokenExpiredTimeoutStr = os.Getenv("TWO_FA_TOKEN_EXPIRED_TIMEOUT")

	twoFaTokenExpiredTimeoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twoFaTokenExpiredTimeoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twoFaTokenExpiredTimeoutStr))
		}
		val := int(v)
		return &val
	})
	twoFaTokenExpiredTimeoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twoFaTokenExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", twoFaTokenExpiredTimeoutStr))
		}
		val := int64(v)
		return &val
	})
	twoFaTokenExpiredTimeoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(twoFaTokenExpiredTimeoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", twoFaTokenExpiredTimeoutStr))
		}
		val := uint(v)
		return &val
	})
	twoFaTokenExpiredTimeoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(twoFaTokenExpiredTimeoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", twoFaTokenExpiredTimeoutStr))
		}
		return &v
	})
	twoFaTokenExpiredTimeoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(twoFaTokenExpiredTimeoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", twoFaTokenExpiredTimeoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// TwoFaTokenExpiredTimeout returns the cached TWO_FA_TOKEN_EXPIRED_TIMEOUT variable.
func TwoFaTokenExpiredTimeout() string {
	return twoFaTokenExpiredTimeoutStr
}

// TwoFaTokenExpiredTimeoutInt returns the cached int of TWO_FA_TOKEN_EXPIRED_TIMEOUT variable.
func TwoFaTokenExpiredTimeoutInt() int {
	return *((twoFaTokenExpiredTimeoutIntCacher.Get()).(*int))
}

// TwoFaTokenExpiredTimeoutInt64 returns the cached int64 of TWO_FA_TOKEN_EXPIRED_TIMEOUT variable.
func TwoFaTokenExpiredTimeoutInt64() int64 {
	return *((twoFaTokenExpiredTimeoutInt64Cacher.Get()).(*int64))
}

// TwoFaTokenExpiredTimeoutUint returns the cached uint of TWO_FA_TOKEN_EXPIRED_TIMEOUT variable.
func TwoFaTokenExpiredTimeoutUint() uint {
	return *((twoFaTokenExpiredTimeoutUintCacher.Get()).(*uint))
}

// TwoFaTokenExpiredTimeoutBool returns the cached bool of TWO_FA_TOKEN_EXPIRED_TIMEOUT variable.
func TwoFaTokenExpiredTimeoutBool() bool {
	return *((twoFaTokenExpiredTimeoutBoolCacher.Get()).(*bool))
}

// TwoFaTokenExpiredTimeoutMs returns the cached millisecond of TWO_FA_TOKEN_EXPIRED_TIMEOUT variable.
func TwoFaTokenExpiredTimeoutMs() time.Duration {
	return *((twoFaTokenExpiredTimeoutMsCacher.Get()).(*time.Duration))
}

// SetTwoFaTokenExpiredTimeout sets the cached value.
func SetTwoFaTokenExpiredTimeout(v string) {
	twoFaTokenExpiredTimeoutStr = v
	twoFaTokenExpiredTimeoutIntCacher.Clear()
	twoFaTokenExpiredTimeoutInt64Cacher.Clear()
	twoFaTokenExpiredTimeoutUintCacher.Clear()
	twoFaTokenExpiredTimeoutBoolCacher.Clear()
	twoFaTokenExpiredTimeoutMsCacher.Clear()
}

// --------------------------------------
// WEB_CALLBACK_PREFIX
// --------------------------------------
var (
	webCallbackPrefixStr = os.Getenv("WEB_CALLBACK_PREFIX")

	webCallbackPrefixIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(webCallbackPrefixStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", webCallbackPrefixStr))
		}
		val := int(v)
		return &val
	})
	webCallbackPrefixInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(webCallbackPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", webCallbackPrefixStr))
		}
		val := int64(v)
		return &val
	})
	webCallbackPrefixUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(webCallbackPrefixStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", webCallbackPrefixStr))
		}
		val := uint(v)
		return &val
	})
	webCallbackPrefixBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(webCallbackPrefixStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", webCallbackPrefixStr))
		}
		return &v
	})
	webCallbackPrefixMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(webCallbackPrefixStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", webCallbackPrefixStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// WebCallbackPrefix returns the cached WEB_CALLBACK_PREFIX variable.
func WebCallbackPrefix() string {
	return webCallbackPrefixStr
}

// WebCallbackPrefixInt returns the cached int of WEB_CALLBACK_PREFIX variable.
func WebCallbackPrefixInt() int {
	return *((webCallbackPrefixIntCacher.Get()).(*int))
}

// WebCallbackPrefixInt64 returns the cached int64 of WEB_CALLBACK_PREFIX variable.
func WebCallbackPrefixInt64() int64 {
	return *((webCallbackPrefixInt64Cacher.Get()).(*int64))
}

// WebCallbackPrefixUint returns the cached uint of WEB_CALLBACK_PREFIX variable.
func WebCallbackPrefixUint() uint {
	return *((webCallbackPrefixUintCacher.Get()).(*uint))
}

// WebCallbackPrefixBool returns the cached bool of WEB_CALLBACK_PREFIX variable.
func WebCallbackPrefixBool() bool {
	return *((webCallbackPrefixBoolCacher.Get()).(*bool))
}

// WebCallbackPrefixMs returns the cached millisecond of WEB_CALLBACK_PREFIX variable.
func WebCallbackPrefixMs() time.Duration {
	return *((webCallbackPrefixMsCacher.Get()).(*time.Duration))
}

// SetWebCallbackPrefix sets the cached value.
func SetWebCallbackPrefix(v string) {
	webCallbackPrefixStr = v
	webCallbackPrefixIntCacher.Clear()
	webCallbackPrefixInt64Cacher.Clear()
	webCallbackPrefixUintCacher.Clear()
	webCallbackPrefixBoolCacher.Clear()
	webCallbackPrefixMsCacher.Clear()
}

// --------------------------------------
// WEB_CALLBACK_PREFIX_COBLET
// --------------------------------------
var (
	webCallbackPrefixCobletStr = os.Getenv("WEB_CALLBACK_PREFIX_COBLET")

	webCallbackPrefixCobletIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(webCallbackPrefixCobletStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", webCallbackPrefixCobletStr))
		}
		val := int(v)
		return &val
	})
	webCallbackPrefixCobletInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(webCallbackPrefixCobletStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", webCallbackPrefixCobletStr))
		}
		val := int64(v)
		return &val
	})
	webCallbackPrefixCobletUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(webCallbackPrefixCobletStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", webCallbackPrefixCobletStr))
		}
		val := uint(v)
		return &val
	})
	webCallbackPrefixCobletBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(webCallbackPrefixCobletStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", webCallbackPrefixCobletStr))
		}
		return &v
	})
	webCallbackPrefixCobletMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(webCallbackPrefixCobletStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", webCallbackPrefixCobletStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// WebCallbackPrefixCoblet returns the cached WEB_CALLBACK_PREFIX_COBLET variable.
func WebCallbackPrefixCoblet() string {
	return webCallbackPrefixCobletStr
}

// WebCallbackPrefixCobletInt returns the cached int of WEB_CALLBACK_PREFIX_COBLET variable.
func WebCallbackPrefixCobletInt() int {
	return *((webCallbackPrefixCobletIntCacher.Get()).(*int))
}

// WebCallbackPrefixCobletInt64 returns the cached int64 of WEB_CALLBACK_PREFIX_COBLET variable.
func WebCallbackPrefixCobletInt64() int64 {
	return *((webCallbackPrefixCobletInt64Cacher.Get()).(*int64))
}

// WebCallbackPrefixCobletUint returns the cached uint of WEB_CALLBACK_PREFIX_COBLET variable.
func WebCallbackPrefixCobletUint() uint {
	return *((webCallbackPrefixCobletUintCacher.Get()).(*uint))
}

// WebCallbackPrefixCobletBool returns the cached bool of WEB_CALLBACK_PREFIX_COBLET variable.
func WebCallbackPrefixCobletBool() bool {
	return *((webCallbackPrefixCobletBoolCacher.Get()).(*bool))
}

// WebCallbackPrefixCobletMs returns the cached millisecond of WEB_CALLBACK_PREFIX_COBLET variable.
func WebCallbackPrefixCobletMs() time.Duration {
	return *((webCallbackPrefixCobletMsCacher.Get()).(*time.Duration))
}

// SetWebCallbackPrefixCoblet sets the cached value.
func SetWebCallbackPrefixCoblet(v string) {
	webCallbackPrefixCobletStr = v
	webCallbackPrefixCobletIntCacher.Clear()
	webCallbackPrefixCobletInt64Cacher.Clear()
	webCallbackPrefixCobletUintCacher.Clear()
	webCallbackPrefixCobletBoolCacher.Clear()
	webCallbackPrefixCobletMsCacher.Clear()
}

// --------------------------------------
// WITHDRAWAL_FROZEN_PERIOD
// --------------------------------------
var (
	withdrawalFrozenPeriodStr = os.Getenv("WITHDRAWAL_FROZEN_PERIOD")

	withdrawalFrozenPeriodIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(withdrawalFrozenPeriodStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", withdrawalFrozenPeriodStr))
		}
		val := int(v)
		return &val
	})
	withdrawalFrozenPeriodInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(withdrawalFrozenPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", withdrawalFrozenPeriodStr))
		}
		val := int64(v)
		return &val
	})
	withdrawalFrozenPeriodUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(withdrawalFrozenPeriodStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", withdrawalFrozenPeriodStr))
		}
		val := uint(v)
		return &val
	})
	withdrawalFrozenPeriodBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(withdrawalFrozenPeriodStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", withdrawalFrozenPeriodStr))
		}
		return &v
	})
	withdrawalFrozenPeriodMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(withdrawalFrozenPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", withdrawalFrozenPeriodStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// WithdrawalFrozenPeriod returns the cached WITHDRAWAL_FROZEN_PERIOD variable.
func WithdrawalFrozenPeriod() string {
	return withdrawalFrozenPeriodStr
}

// WithdrawalFrozenPeriodInt returns the cached int of WITHDRAWAL_FROZEN_PERIOD variable.
func WithdrawalFrozenPeriodInt() int {
	return *((withdrawalFrozenPeriodIntCacher.Get()).(*int))
}

// WithdrawalFrozenPeriodInt64 returns the cached int64 of WITHDRAWAL_FROZEN_PERIOD variable.
func WithdrawalFrozenPeriodInt64() int64 {
	return *((withdrawalFrozenPeriodInt64Cacher.Get()).(*int64))
}

// WithdrawalFrozenPeriodUint returns the cached uint of WITHDRAWAL_FROZEN_PERIOD variable.
func WithdrawalFrozenPeriodUint() uint {
	return *((withdrawalFrozenPeriodUintCacher.Get()).(*uint))
}

// WithdrawalFrozenPeriodBool returns the cached bool of WITHDRAWAL_FROZEN_PERIOD variable.
func WithdrawalFrozenPeriodBool() bool {
	return *((withdrawalFrozenPeriodBoolCacher.Get()).(*bool))
}

// WithdrawalFrozenPeriodMs returns the cached millisecond of WITHDRAWAL_FROZEN_PERIOD variable.
func WithdrawalFrozenPeriodMs() time.Duration {
	return *((withdrawalFrozenPeriodMsCacher.Get()).(*time.Duration))
}

// SetWithdrawalFrozenPeriod sets the cached value.
func SetWithdrawalFrozenPeriod(v string) {
	withdrawalFrozenPeriodStr = v
	withdrawalFrozenPeriodIntCacher.Clear()
	withdrawalFrozenPeriodInt64Cacher.Clear()
	withdrawalFrozenPeriodUintCacher.Clear()
	withdrawalFrozenPeriodBoolCacher.Clear()
	withdrawalFrozenPeriodMsCacher.Clear()
}

// --------------------------------------
// WS_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	wsServerListenAddressStr = os.Getenv("WS_SERVER_LISTEN_ADDRESS")

	wsServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(wsServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", wsServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	wsServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(wsServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", wsServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	wsServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(wsServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", wsServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	wsServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(wsServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", wsServerListenAddressStr))
		}
		return &v
	})
	wsServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(wsServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", wsServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// WsServerListenAddress returns the cached WS_SERVER_LISTEN_ADDRESS variable.
func WsServerListenAddress() string {
	return wsServerListenAddressStr
}

// WsServerListenAddressInt returns the cached int of WS_SERVER_LISTEN_ADDRESS variable.
func WsServerListenAddressInt() int {
	return *((wsServerListenAddressIntCacher.Get()).(*int))
}

// WsServerListenAddressInt64 returns the cached int64 of WS_SERVER_LISTEN_ADDRESS variable.
func WsServerListenAddressInt64() int64 {
	return *((wsServerListenAddressInt64Cacher.Get()).(*int64))
}

// WsServerListenAddressUint returns the cached uint of WS_SERVER_LISTEN_ADDRESS variable.
func WsServerListenAddressUint() uint {
	return *((wsServerListenAddressUintCacher.Get()).(*uint))
}

// WsServerListenAddressBool returns the cached bool of WS_SERVER_LISTEN_ADDRESS variable.
func WsServerListenAddressBool() bool {
	return *((wsServerListenAddressBoolCacher.Get()).(*bool))
}

// WsServerListenAddressMs returns the cached millisecond of WS_SERVER_LISTEN_ADDRESS variable.
func WsServerListenAddressMs() time.Duration {
	return *((wsServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetWsServerListenAddress sets the cached value.
func SetWsServerListenAddress(v string) {
	wsServerListenAddressStr = v
	wsServerListenAddressIntCacher.Clear()
	wsServerListenAddressInt64Cacher.Clear()
	wsServerListenAddressUintCacher.Clear()
	wsServerListenAddressBoolCacher.Clear()
	wsServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// APP
// --------------------------------------
var (
	appStr = os.Getenv("APP")

	appIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(appStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", appStr))
		}
		val := int(v)
		return &val
	})
	appInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(appStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", appStr))
		}
		val := int64(v)
		return &val
	})
	appUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(appStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", appStr))
		}
		val := uint(v)
		return &val
	})
	appBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(appStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", appStr))
		}
		return &v
	})
	appMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(appStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", appStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// App returns the cached APP variable.
func App() string {
	return appStr
}

// AppInt returns the cached int of APP variable.
func AppInt() int {
	return *((appIntCacher.Get()).(*int))
}

// AppInt64 returns the cached int64 of APP variable.
func AppInt64() int64 {
	return *((appInt64Cacher.Get()).(*int64))
}

// AppUint returns the cached uint of APP variable.
func AppUint() uint {
	return *((appUintCacher.Get()).(*uint))
}

// AppBool returns the cached bool of APP variable.
func AppBool() bool {
	return *((appBoolCacher.Get()).(*bool))
}

// AppMs returns the cached millisecond of APP variable.
func AppMs() time.Duration {
	return *((appMsCacher.Get()).(*time.Duration))
}

// SetApp sets the cached value.
func SetApp(v string) {
	appStr = v
	appIntCacher.Clear()
	appInt64Cacher.Clear()
	appUintCacher.Clear()
	appBoolCacher.Clear()
	appMsCacher.Clear()
}
