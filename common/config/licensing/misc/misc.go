// Code generated by cobctl. This go file is generated automatically, DO NOT EDIT.

package misc

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/jiarung/mochi/cache/cacher"
)

// --------------------------------------
// HEALTH_CHECK_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	healthCheckServerListenAddressStr = os.Getenv("HEALTH_CHECK_SERVER_LISTEN_ADDRESS")

	healthCheckServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", healthCheckServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	healthCheckServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", healthCheckServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	healthCheckServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(healthCheckServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", healthCheckServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	healthCheckServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(healthCheckServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", healthCheckServerListenAddressStr))
		}
		return &v
	})
	healthCheckServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", healthCheckServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// HealthCheckServerListenAddress returns the cached HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddress() string {
	return healthCheckServerListenAddressStr
}

// HealthCheckServerListenAddressInt returns the cached int of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressInt() int {
	return *((healthCheckServerListenAddressIntCacher.Get()).(*int))
}

// HealthCheckServerListenAddressInt64 returns the cached int64 of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressInt64() int64 {
	return *((healthCheckServerListenAddressInt64Cacher.Get()).(*int64))
}

// HealthCheckServerListenAddressUint returns the cached uint of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressUint() uint {
	return *((healthCheckServerListenAddressUintCacher.Get()).(*uint))
}

// HealthCheckServerListenAddressBool returns the cached bool of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressBool() bool {
	return *((healthCheckServerListenAddressBoolCacher.Get()).(*bool))
}

// HealthCheckServerListenAddressMs returns the cached millisecond of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressMs() time.Duration {
	return *((healthCheckServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetHealthCheckServerListenAddress sets the cached value.
func SetHealthCheckServerListenAddress(v string) {
	healthCheckServerListenAddressStr = v
	healthCheckServerListenAddressIntCacher.Clear()
	healthCheckServerListenAddressInt64Cacher.Clear()
	healthCheckServerListenAddressUintCacher.Clear()
	healthCheckServerListenAddressBoolCacher.Clear()
	healthCheckServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOG_TO_STACKDRIVER
// --------------------------------------
var (
	serverLogToStackdriverStr = os.Getenv("SERVER_LOG_TO_STACKDRIVER")

	serverLogToStackdriverIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStackdriverStr))
		}
		val := int(v)
		return &val
	})
	serverLogToStackdriverInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLogToStackdriverStr))
		}
		val := int64(v)
		return &val
	})
	serverLogToStackdriverUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLogToStackdriverStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStackdriverStr))
		}
		val := uint(v)
		return &val
	})
	serverLogToStackdriverBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLogToStackdriverStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLogToStackdriverStr))
		}
		return &v
	})
	serverLogToStackdriverMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLogToStackdriverStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLogToStackdriver returns the cached SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriver() string {
	return serverLogToStackdriverStr
}

// ServerLogToStackdriverInt returns the cached int of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverInt() int {
	return *((serverLogToStackdriverIntCacher.Get()).(*int))
}

// ServerLogToStackdriverInt64 returns the cached int64 of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverInt64() int64 {
	return *((serverLogToStackdriverInt64Cacher.Get()).(*int64))
}

// ServerLogToStackdriverUint returns the cached uint of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverUint() uint {
	return *((serverLogToStackdriverUintCacher.Get()).(*uint))
}

// ServerLogToStackdriverBool returns the cached bool of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverBool() bool {
	return *((serverLogToStackdriverBoolCacher.Get()).(*bool))
}

// ServerLogToStackdriverMs returns the cached millisecond of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverMs() time.Duration {
	return *((serverLogToStackdriverMsCacher.Get()).(*time.Duration))
}

// SetServerLogToStackdriver sets the cached value.
func SetServerLogToStackdriver(v string) {
	serverLogToStackdriverStr = v
	serverLogToStackdriverIntCacher.Clear()
	serverLogToStackdriverInt64Cacher.Clear()
	serverLogToStackdriverUintCacher.Clear()
	serverLogToStackdriverBoolCacher.Clear()
	serverLogToStackdriverMsCacher.Clear()
}
