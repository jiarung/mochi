// Code generated by cobctl. This go file is generated automatically, DO NOT EDIT.

package misc

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/cobinhood/mochi/cache/cacher"
)

// --------------------------------------
// HEALTH_CHECK_SERVER_LISTEN_ADDRESS
// --------------------------------------
var (
	healthCheckServerListenAddressStr = os.Getenv("HEALTH_CHECK_SERVER_LISTEN_ADDRESS")

	healthCheckServerListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", healthCheckServerListenAddressStr))
		}
		val := int(v)
		return &val
	})
	healthCheckServerListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", healthCheckServerListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	healthCheckServerListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(healthCheckServerListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", healthCheckServerListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	healthCheckServerListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(healthCheckServerListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", healthCheckServerListenAddressStr))
		}
		return &v
	})
	healthCheckServerListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(healthCheckServerListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", healthCheckServerListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// HealthCheckServerListenAddress returns the cached HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddress() string {
	return healthCheckServerListenAddressStr
}

// HealthCheckServerListenAddressInt returns the cached int of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressInt() int {
	return *((healthCheckServerListenAddressIntCacher.Get()).(*int))
}

// HealthCheckServerListenAddressInt64 returns the cached int64 of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressInt64() int64 {
	return *((healthCheckServerListenAddressInt64Cacher.Get()).(*int64))
}

// HealthCheckServerListenAddressUint returns the cached uint of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressUint() uint {
	return *((healthCheckServerListenAddressUintCacher.Get()).(*uint))
}

// HealthCheckServerListenAddressBool returns the cached bool of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressBool() bool {
	return *((healthCheckServerListenAddressBoolCacher.Get()).(*bool))
}

// HealthCheckServerListenAddressMs returns the cached millisecond of HEALTH_CHECK_SERVER_LISTEN_ADDRESS variable.
func HealthCheckServerListenAddressMs() time.Duration {
	return *((healthCheckServerListenAddressMsCacher.Get()).(*time.Duration))
}

// SetHealthCheckServerListenAddress sets the cached value.
func SetHealthCheckServerListenAddress(v string) {
	healthCheckServerListenAddressStr = v
	healthCheckServerListenAddressIntCacher.Clear()
	healthCheckServerListenAddressInt64Cacher.Clear()
	healthCheckServerListenAddressUintCacher.Clear()
	healthCheckServerListenAddressBoolCacher.Clear()
	healthCheckServerListenAddressMsCacher.Clear()
}

// --------------------------------------
// SERVER_APP
// --------------------------------------
var (
	serverAppStr = os.Getenv("SERVER_APP")

	serverAppIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverAppStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverAppStr))
		}
		val := int(v)
		return &val
	})
	serverAppInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverAppStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverAppStr))
		}
		val := int64(v)
		return &val
	})
	serverAppUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverAppStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverAppStr))
		}
		val := uint(v)
		return &val
	})
	serverAppBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverAppStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverAppStr))
		}
		return &v
	})
	serverAppMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverAppStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverAppStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerApp returns the cached SERVER_APP variable.
func ServerApp() string {
	return serverAppStr
}

// ServerAppInt returns the cached int of SERVER_APP variable.
func ServerAppInt() int {
	return *((serverAppIntCacher.Get()).(*int))
}

// ServerAppInt64 returns the cached int64 of SERVER_APP variable.
func ServerAppInt64() int64 {
	return *((serverAppInt64Cacher.Get()).(*int64))
}

// ServerAppUint returns the cached uint of SERVER_APP variable.
func ServerAppUint() uint {
	return *((serverAppUintCacher.Get()).(*uint))
}

// ServerAppBool returns the cached bool of SERVER_APP variable.
func ServerAppBool() bool {
	return *((serverAppBoolCacher.Get()).(*bool))
}

// ServerAppMs returns the cached millisecond of SERVER_APP variable.
func ServerAppMs() time.Duration {
	return *((serverAppMsCacher.Get()).(*time.Duration))
}

// SetServerApp sets the cached value.
func SetServerApp(v string) {
	serverAppStr = v
	serverAppIntCacher.Clear()
	serverAppInt64Cacher.Clear()
	serverAppUintCacher.Clear()
	serverAppBoolCacher.Clear()
	serverAppMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOG_TO_STACKDRIVER
// --------------------------------------
var (
	serverLogToStackdriverStr = os.Getenv("SERVER_LOG_TO_STACKDRIVER")

	serverLogToStackdriverIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStackdriverStr))
		}
		val := int(v)
		return &val
	})
	serverLogToStackdriverInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLogToStackdriverStr))
		}
		val := int64(v)
		return &val
	})
	serverLogToStackdriverUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLogToStackdriverStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStackdriverStr))
		}
		val := uint(v)
		return &val
	})
	serverLogToStackdriverBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLogToStackdriverStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLogToStackdriverStr))
		}
		return &v
	})
	serverLogToStackdriverMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStackdriverStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLogToStackdriverStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLogToStackdriver returns the cached SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriver() string {
	return serverLogToStackdriverStr
}

// ServerLogToStackdriverInt returns the cached int of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverInt() int {
	return *((serverLogToStackdriverIntCacher.Get()).(*int))
}

// ServerLogToStackdriverInt64 returns the cached int64 of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverInt64() int64 {
	return *((serverLogToStackdriverInt64Cacher.Get()).(*int64))
}

// ServerLogToStackdriverUint returns the cached uint of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverUint() uint {
	return *((serverLogToStackdriverUintCacher.Get()).(*uint))
}

// ServerLogToStackdriverBool returns the cached bool of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverBool() bool {
	return *((serverLogToStackdriverBoolCacher.Get()).(*bool))
}

// ServerLogToStackdriverMs returns the cached millisecond of SERVER_LOG_TO_STACKDRIVER variable.
func ServerLogToStackdriverMs() time.Duration {
	return *((serverLogToStackdriverMsCacher.Get()).(*time.Duration))
}

// SetServerLogToStackdriver sets the cached value.
func SetServerLogToStackdriver(v string) {
	serverLogToStackdriverStr = v
	serverLogToStackdriverIntCacher.Clear()
	serverLogToStackdriverInt64Cacher.Clear()
	serverLogToStackdriverUintCacher.Clear()
	serverLogToStackdriverBoolCacher.Clear()
	serverLogToStackdriverMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOG_TO_STDOUT
// --------------------------------------
var (
	serverLogToStdoutStr = os.Getenv("SERVER_LOG_TO_STDOUT")

	serverLogToStdoutIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStdoutStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStdoutStr))
		}
		val := int(v)
		return &val
	})
	serverLogToStdoutInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStdoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLogToStdoutStr))
		}
		val := int64(v)
		return &val
	})
	serverLogToStdoutUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLogToStdoutStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLogToStdoutStr))
		}
		val := uint(v)
		return &val
	})
	serverLogToStdoutBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLogToStdoutStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLogToStdoutStr))
		}
		return &v
	})
	serverLogToStdoutMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLogToStdoutStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLogToStdoutStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLogToStdout returns the cached SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdout() string {
	return serverLogToStdoutStr
}

// ServerLogToStdoutInt returns the cached int of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutInt() int {
	return *((serverLogToStdoutIntCacher.Get()).(*int))
}

// ServerLogToStdoutInt64 returns the cached int64 of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutInt64() int64 {
	return *((serverLogToStdoutInt64Cacher.Get()).(*int64))
}

// ServerLogToStdoutUint returns the cached uint of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutUint() uint {
	return *((serverLogToStdoutUintCacher.Get()).(*uint))
}

// ServerLogToStdoutBool returns the cached bool of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutBool() bool {
	return *((serverLogToStdoutBoolCacher.Get()).(*bool))
}

// ServerLogToStdoutMs returns the cached millisecond of SERVER_LOG_TO_STDOUT variable.
func ServerLogToStdoutMs() time.Duration {
	return *((serverLogToStdoutMsCacher.Get()).(*time.Duration))
}

// SetServerLogToStdout sets the cached value.
func SetServerLogToStdout(v string) {
	serverLogToStdoutStr = v
	serverLogToStdoutIntCacher.Clear()
	serverLogToStdoutInt64Cacher.Clear()
	serverLogToStdoutUintCacher.Clear()
	serverLogToStdoutBoolCacher.Clear()
	serverLogToStdoutMsCacher.Clear()
}

// --------------------------------------
// SERVER_ENVIRONMENT
// --------------------------------------
var (
	serverEnvironmentStr = os.Getenv("SERVER_ENVIRONMENT")

	serverEnvironmentIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverEnvironmentStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverEnvironmentStr))
		}
		val := int(v)
		return &val
	})
	serverEnvironmentInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverEnvironmentStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverEnvironmentStr))
		}
		val := int64(v)
		return &val
	})
	serverEnvironmentUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverEnvironmentStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverEnvironmentStr))
		}
		val := uint(v)
		return &val
	})
	serverEnvironmentBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverEnvironmentStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverEnvironmentStr))
		}
		return &v
	})
	serverEnvironmentMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverEnvironmentStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverEnvironmentStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerEnvironment returns the cached SERVER_ENVIRONMENT variable.
func ServerEnvironment() string {
	return serverEnvironmentStr
}

// ServerEnvironmentInt returns the cached int of SERVER_ENVIRONMENT variable.
func ServerEnvironmentInt() int {
	return *((serverEnvironmentIntCacher.Get()).(*int))
}

// ServerEnvironmentInt64 returns the cached int64 of SERVER_ENVIRONMENT variable.
func ServerEnvironmentInt64() int64 {
	return *((serverEnvironmentInt64Cacher.Get()).(*int64))
}

// ServerEnvironmentUint returns the cached uint of SERVER_ENVIRONMENT variable.
func ServerEnvironmentUint() uint {
	return *((serverEnvironmentUintCacher.Get()).(*uint))
}

// ServerEnvironmentBool returns the cached bool of SERVER_ENVIRONMENT variable.
func ServerEnvironmentBool() bool {
	return *((serverEnvironmentBoolCacher.Get()).(*bool))
}

// ServerEnvironmentMs returns the cached millisecond of SERVER_ENVIRONMENT variable.
func ServerEnvironmentMs() time.Duration {
	return *((serverEnvironmentMsCacher.Get()).(*time.Duration))
}

// SetServerEnvironment sets the cached value.
func SetServerEnvironment(v string) {
	serverEnvironmentStr = v
	serverEnvironmentIntCacher.Clear()
	serverEnvironmentInt64Cacher.Clear()
	serverEnvironmentUintCacher.Clear()
	serverEnvironmentBoolCacher.Clear()
	serverEnvironmentMsCacher.Clear()
}

// --------------------------------------
// SERVER_LOGLEVEL
// --------------------------------------
var (
	serverLoglevelStr = os.Getenv("SERVER_LOGLEVEL")

	serverLoglevelIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLoglevelStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLoglevelStr))
		}
		val := int(v)
		return &val
	})
	serverLoglevelInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLoglevelStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", serverLoglevelStr))
		}
		val := int64(v)
		return &val
	})
	serverLoglevelUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(serverLoglevelStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", serverLoglevelStr))
		}
		val := uint(v)
		return &val
	})
	serverLoglevelBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(serverLoglevelStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", serverLoglevelStr))
		}
		return &v
	})
	serverLoglevelMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(serverLoglevelStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", serverLoglevelStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// ServerLoglevel returns the cached SERVER_LOGLEVEL variable.
func ServerLoglevel() string {
	return serverLoglevelStr
}

// ServerLoglevelInt returns the cached int of SERVER_LOGLEVEL variable.
func ServerLoglevelInt() int {
	return *((serverLoglevelIntCacher.Get()).(*int))
}

// ServerLoglevelInt64 returns the cached int64 of SERVER_LOGLEVEL variable.
func ServerLoglevelInt64() int64 {
	return *((serverLoglevelInt64Cacher.Get()).(*int64))
}

// ServerLoglevelUint returns the cached uint of SERVER_LOGLEVEL variable.
func ServerLoglevelUint() uint {
	return *((serverLoglevelUintCacher.Get()).(*uint))
}

// ServerLoglevelBool returns the cached bool of SERVER_LOGLEVEL variable.
func ServerLoglevelBool() bool {
	return *((serverLoglevelBoolCacher.Get()).(*bool))
}

// ServerLoglevelMs returns the cached millisecond of SERVER_LOGLEVEL variable.
func ServerLoglevelMs() time.Duration {
	return *((serverLoglevelMsCacher.Get()).(*time.Duration))
}

// SetServerLoglevel sets the cached value.
func SetServerLoglevel(v string) {
	serverLoglevelStr = v
	serverLoglevelIntCacher.Clear()
	serverLoglevelInt64Cacher.Clear()
	serverLoglevelUintCacher.Clear()
	serverLoglevelBoolCacher.Clear()
	serverLoglevelMsCacher.Clear()
}
