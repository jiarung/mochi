// Code generated by cobctl. This go file is generated automatically, DO NOT EDIT.
package dlt

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/cobinhood/mochi/cache/cacher"
)

// --------------------------------------
// Redis keys
// --------------------------------------
// Keys collects all the redis keys of endpoints.
var Keys = map[string][]string{

	"achain": {
		"dlt:endpoint:blockchainAchainEndpoint",
		"dlt:endpoint:blockchainAchainTestnetEndpoint",
		"dlt:endpoint:blockchainAchainMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainAchainEndpoint",
	},

	"ark": {
		"dlt:endpoint:blockchainArkApiEndpoint",
		"dlt:endpoint:blockchainArkEndpoint",
		"dlt:endpoint:blockchainArkApiTestnetEndpoint",
		"dlt:endpoint:blockchainArkTestnetEndpoint",
		"dlt:endpoint:blockchainArkApiMainnetEndpoint",
		"dlt:endpoint:blockchainArkMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainArkEndpoint",
	},

	"bitcoin-cash": {
		"dlt:endpoint:blockchainBitcoincashEndpoint",
		"dlt:endpoint:blockchainBitcoincashTestnetEndpoint",
		"dlt:endpoint:blockchainBitcoincashMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainBitcoincashEndpoint",
	},

	"bitcoin": {
		"dlt:endpoint:blockchainBitcoinEndpoint",
		"dlt:endpoint:blockchainBitcoinTestnetEndpoint",
		"dlt:endpoint:blockchainBitcoinMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainBitcoinEndpoint",
	},

	"bitcoin-sv": {
		"dlt:endpoint:blockchainBitcoinsvEndpoint",
		"dlt:endpoint:blockchainBitcoinsvTestnetEndpoint",
		"dlt:endpoint:blockchainBitcoinsvMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainBitcoinsvEndpoint",
	},

	"cybermiles": {
		"dlt:endpoint:blockchainCybermilesEndpoint",
		"dlt:endpoint:blockchainCybermilesTestnetEndpoint",
		"dlt:endpoint:blockchainCybermilesMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainCybermilesEndpoint",
	},

	"dash": {
		"dlt:endpoint:blockchainDashEndpoint",
		"dlt:endpoint:blockchainDashTestnetEndpoint",
		"dlt:endpoint:blockchainDashMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainDashEndpoint",
	},

	"dexon": {
		"dlt:endpoint:blockchainDexonEndpoint",
		"dlt:endpoint:blockchainDexonTestnetEndpoint",
		"dlt:endpoint:blockchainDexonMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainDexonEndpoint",
	},

	"eosio": {
		"dlt:endpoint:blockchainEosiodEndpoint",
		"dlt:endpoint:blockchainEosiodTestnetEndpoint",
		"dlt:endpoint:blockchainEosiodMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainEosioEndpoint",
	},

	"ethereum": {
		"dlt:endpoint:blockchainEthereumEndpoint",
		"dlt:endpoint:blockchainEthereumTestnetEndpoint",
		"dlt:endpoint:blockchainEthereumMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainEthereumEndpoint",
	},

	"lisk": {
		"dlt:endpoint:blockchainLiskEndpoint",
		"dlt:endpoint:blockchainLiskTestnetEndpoint",
		"dlt:endpoint:blockchainLiskMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainLiskEndpoint",
	},

	"litecoin": {
		"dlt:endpoint:blockchainLitecoinEndpoint",
		"dlt:endpoint:blockchainLitecoinTestnetEndpoint",
		"dlt:endpoint:blockchainLitecoinMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainLitecoinEndpoint",
	},

	"monero": {
		"dlt:endpoint:blockchainMoneroEndpoint",
		"dlt:endpoint:blockchainMoneroTestnetEndpoint",
		"dlt:endpoint:blockchainMoneroMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainMoneroEndpoint",
	},

	"nano": {
		"dlt:endpoint:blockchainNanoEndpoint",
		"dlt:endpoint:blockchainNanoTestnetEndpoint",
		"dlt:endpoint:blockchainNanoMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainNanoEndpoint",
	},

	"nem": {
		"dlt:endpoint:blockchainNemEndpoint",
		"dlt:endpoint:blockchainNemTestnetEndpoint",
		"dlt:endpoint:blockchainNemMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainNemEndpoint",
	},

	"neo": {
		"dlt:endpoint:blockchainNeoEndpoint",
		"dlt:endpoint:blockchainNeoTestnetEndpoint",
		"dlt:endpoint:blockchainNeoMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainNeoEndpoint",
	},

	"omni": {
		"dlt:endpoint:blockchainOmniEndpoint",
		"dlt:endpoint:blockchainOmniTestnetEndpoint",
		"dlt:endpoint:blockchainOmniMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainOmniEndpoint",
	},

	"qtum": {
		"dlt:endpoint:blockchainQtumEndpoint",
		"dlt:endpoint:blockchainQtumTestnetEndpoint",
		"dlt:endpoint:blockchainQtumMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainQtumEndpoint",
	},

	"ripple": {
		"dlt:endpoint:blockchainRippleEndpoint",
		"dlt:endpoint:blockchainRippleTestnetEndpoint",
		"dlt:endpoint:blockchainRippleMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainRippleEndpoint",
	},

	"tezos": {
		"dlt:endpoint:blockchainTezosEndpoint",
		"dlt:endpoint:blockchainTezosTestnetEndpoint",
		"dlt:endpoint:blockchainTezosMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainTezosEndpoint",
	},

	"tron": {
		"dlt:endpoint:blockchainTronFullnodeEndpoint",
		"dlt:endpoint:blockchainTronFullnodeRpcEndpoint",
		"dlt:endpoint:blockchainTronSolidityRpcEndpoint",
		"dlt:endpoint:blockchainTronSolidityHttpEndpoint",
		"dlt:endpoint:blockchainTronFullnodeTestnetEndpoint",
		"dlt:endpoint:blockchainTronFullnodeRpcTestnetEndpoint",
		"dlt:endpoint:blockchainTronSolidityRpcTestnetEndpoint",
		"dlt:endpoint:blockchainTronSolidityHttpTestnetEndpoint",
		"dlt:endpoint:blockchainTronFullnodeMainnetEndpoint",
		"dlt:endpoint:blockchainTronFullnodeRpcMainnetEndpoint",
		"dlt:endpoint:blockchainTronSolidityRpcMainnetEndpoint",
		"dlt:endpoint:blockchainTronSolidityHttpMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainTronEndpoint",
	},

	"vechain": {
		"dlt:endpoint:blockchainVechainEndpoint",
		"dlt:endpoint:blockchainVechainTestnetEndpoint",
		"dlt:endpoint:blockchainVechainMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainVechainEndpoint",
	},

	"zcash": {
		"dlt:endpoint:blockchainZcashEndpoint",
		"dlt:endpoint:blockchainZcashTestnetEndpoint",
		"dlt:endpoint:blockchainZcashMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainZcashEndpoint",
	},

	"stellar": {
		"dlt:endpoint:blockchainStellarEndpoint",
		"dlt:endpoint:blockchainStellarTestnetEndpoint",
		"dlt:endpoint:blockchainStellarMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainStellarEndpoint",
	},

	"dogecoin": {
		"dlt:endpoint:blockchainDogecoinEndpoint",
		"dlt:endpoint:blockchainDogecoinTestnetEndpoint",
		"dlt:endpoint:blockchainDogecoinMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainDogecoinEndpoint",
	},

	"iota-iri": {
		"dlt:endpoint:blockchainIotaEndpoint",
		"dlt:endpoint:blockchainIotaTestnetEndpoint",
		"dlt:endpoint:blockchainIotaMainnetEndpoint",
		"dlt:endpoint:monitorBlockchainIotaEndpoint",
	},
}

// --------------------------------------
// ACHAIN endpoints
// --------------------------------------
var blockchainAchainEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ACHAIN_ENDPOINT"),
	key:      "dlt:endpoint:blockchainAchainEndpoint",
}

func BlockchainAchainEndpoint(original ...bool) string {
	return blockchainAchainEndpoint.Endpoint(original...)
}

var blockchainAchainTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ACHAIN_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainAchainTestnetEndpoint",
}

func BlockchainAchainTestnetEndpoint(original ...bool) string {
	return blockchainAchainTestnetEndpoint.Endpoint(original...)
}

var blockchainAchainMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ACHAIN_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainAchainMainnetEndpoint",
}

func BlockchainAchainMainnetEndpoint(original ...bool) string {
	return blockchainAchainMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainAchainEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_ACHAIN_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainAchainEndpoint",
}

func MonitorBlockchainAchainEndpoint(original ...bool) string {
	return monitorBlockchainAchainEndpoint.Endpoint(original...)
}

// --------------------------------------
// ARK endpoints
// --------------------------------------
var blockchainArkApiEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ARK_API_ENDPOINT"),
	key:      "dlt:endpoint:blockchainArkApiEndpoint",
}

func BlockchainArkApiEndpoint(original ...bool) string {
	return blockchainArkApiEndpoint.Endpoint(original...)
}

var blockchainArkEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ARK_ENDPOINT"),
	key:      "dlt:endpoint:blockchainArkEndpoint",
}

func BlockchainArkEndpoint(original ...bool) string {
	return blockchainArkEndpoint.Endpoint(original...)
}

var blockchainArkApiTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ARK_API_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainArkApiTestnetEndpoint",
}

func BlockchainArkApiTestnetEndpoint(original ...bool) string {
	return blockchainArkApiTestnetEndpoint.Endpoint(original...)
}

var blockchainArkTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ARK_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainArkTestnetEndpoint",
}

func BlockchainArkTestnetEndpoint(original ...bool) string {
	return blockchainArkTestnetEndpoint.Endpoint(original...)
}

var blockchainArkApiMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ARK_API_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainArkApiMainnetEndpoint",
}

func BlockchainArkApiMainnetEndpoint(original ...bool) string {
	return blockchainArkApiMainnetEndpoint.Endpoint(original...)
}

var blockchainArkMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ARK_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainArkMainnetEndpoint",
}

func BlockchainArkMainnetEndpoint(original ...bool) string {
	return blockchainArkMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainArkEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_ARK_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainArkEndpoint",
}

func MonitorBlockchainArkEndpoint(original ...bool) string {
	return monitorBlockchainArkEndpoint.Endpoint(original...)
}

// --------------------------------------
// BITCOINCASH endpoints
// --------------------------------------
var blockchainBitcoincashEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOINCASH_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoincashEndpoint",
}

func BlockchainBitcoincashEndpoint(original ...bool) string {
	return blockchainBitcoincashEndpoint.Endpoint(original...)
}

var blockchainBitcoincashTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOINCASH_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoincashTestnetEndpoint",
}

func BlockchainBitcoincashTestnetEndpoint(original ...bool) string {
	return blockchainBitcoincashTestnetEndpoint.Endpoint(original...)
}

var blockchainBitcoincashMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOINCASH_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoincashMainnetEndpoint",
}

func BlockchainBitcoincashMainnetEndpoint(original ...bool) string {
	return blockchainBitcoincashMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainBitcoincashEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_BITCOINCASH_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainBitcoincashEndpoint",
}

func MonitorBlockchainBitcoincashEndpoint(original ...bool) string {
	return monitorBlockchainBitcoincashEndpoint.Endpoint(original...)
}

// --------------------------------------
// BITCOIN endpoints
// --------------------------------------
var blockchainBitcoinEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOIN_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoinEndpoint",
}

func BlockchainBitcoinEndpoint(original ...bool) string {
	return blockchainBitcoinEndpoint.Endpoint(original...)
}

var blockchainBitcoinTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOIN_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoinTestnetEndpoint",
}

func BlockchainBitcoinTestnetEndpoint(original ...bool) string {
	return blockchainBitcoinTestnetEndpoint.Endpoint(original...)
}

var blockchainBitcoinMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOIN_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoinMainnetEndpoint",
}

func BlockchainBitcoinMainnetEndpoint(original ...bool) string {
	return blockchainBitcoinMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainBitcoinEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_BITCOIN_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainBitcoinEndpoint",
}

func MonitorBlockchainBitcoinEndpoint(original ...bool) string {
	return monitorBlockchainBitcoinEndpoint.Endpoint(original...)
}

// --------------------------------------
// BITCOINSV endpoints
// --------------------------------------
var blockchainBitcoinsvEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOINSV_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoinsvEndpoint",
}

func BlockchainBitcoinsvEndpoint(original ...bool) string {
	return blockchainBitcoinsvEndpoint.Endpoint(original...)
}

var blockchainBitcoinsvTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOINSV_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoinsvTestnetEndpoint",
}

func BlockchainBitcoinsvTestnetEndpoint(original ...bool) string {
	return blockchainBitcoinsvTestnetEndpoint.Endpoint(original...)
}

var blockchainBitcoinsvMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_BITCOINSV_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainBitcoinsvMainnetEndpoint",
}

func BlockchainBitcoinsvMainnetEndpoint(original ...bool) string {
	return blockchainBitcoinsvMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainBitcoinsvEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_BITCOINSV_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainBitcoinsvEndpoint",
}

func MonitorBlockchainBitcoinsvEndpoint(original ...bool) string {
	return monitorBlockchainBitcoinsvEndpoint.Endpoint(original...)
}

// --------------------------------------
// CYBERMILES endpoints
// --------------------------------------
var blockchainCybermilesEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_CYBERMILES_ENDPOINT"),
	key:      "dlt:endpoint:blockchainCybermilesEndpoint",
}

func BlockchainCybermilesEndpoint(original ...bool) string {
	return blockchainCybermilesEndpoint.Endpoint(original...)
}

var blockchainCybermilesTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_CYBERMILES_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainCybermilesTestnetEndpoint",
}

func BlockchainCybermilesTestnetEndpoint(original ...bool) string {
	return blockchainCybermilesTestnetEndpoint.Endpoint(original...)
}

var blockchainCybermilesMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_CYBERMILES_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainCybermilesMainnetEndpoint",
}

func BlockchainCybermilesMainnetEndpoint(original ...bool) string {
	return blockchainCybermilesMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainCybermilesEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_CYBERMILES_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainCybermilesEndpoint",
}

func MonitorBlockchainCybermilesEndpoint(original ...bool) string {
	return monitorBlockchainCybermilesEndpoint.Endpoint(original...)
}

// --------------------------------------
// DASH endpoints
// --------------------------------------
var blockchainDashEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DASH_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDashEndpoint",
}

func BlockchainDashEndpoint(original ...bool) string {
	return blockchainDashEndpoint.Endpoint(original...)
}

var blockchainDashTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DASH_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDashTestnetEndpoint",
}

func BlockchainDashTestnetEndpoint(original ...bool) string {
	return blockchainDashTestnetEndpoint.Endpoint(original...)
}

var blockchainDashMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DASH_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDashMainnetEndpoint",
}

func BlockchainDashMainnetEndpoint(original ...bool) string {
	return blockchainDashMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainDashEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_DASH_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainDashEndpoint",
}

func MonitorBlockchainDashEndpoint(original ...bool) string {
	return monitorBlockchainDashEndpoint.Endpoint(original...)
}

// --------------------------------------
// DEXON endpoints
// --------------------------------------
var blockchainDexonEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DEXON_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDexonEndpoint",
}

func BlockchainDexonEndpoint(original ...bool) string {
	return blockchainDexonEndpoint.Endpoint(original...)
}

var blockchainDexonTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DEXON_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDexonTestnetEndpoint",
}

func BlockchainDexonTestnetEndpoint(original ...bool) string {
	return blockchainDexonTestnetEndpoint.Endpoint(original...)
}

var blockchainDexonMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DEXON_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDexonMainnetEndpoint",
}

func BlockchainDexonMainnetEndpoint(original ...bool) string {
	return blockchainDexonMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainDexonEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_DEXON_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainDexonEndpoint",
}

func MonitorBlockchainDexonEndpoint(original ...bool) string {
	return monitorBlockchainDexonEndpoint.Endpoint(original...)
}

// --------------------------------------
// EOSIO endpoints
// --------------------------------------
var blockchainEosiodEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_EOSIOD_ENDPOINT"),
	key:      "dlt:endpoint:blockchainEosiodEndpoint",
}

func BlockchainEosiodEndpoint(original ...bool) string {
	return blockchainEosiodEndpoint.Endpoint(original...)
}

var blockchainEosiodTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_EOSIOD_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainEosiodTestnetEndpoint",
}

func BlockchainEosiodTestnetEndpoint(original ...bool) string {
	return blockchainEosiodTestnetEndpoint.Endpoint(original...)
}

var blockchainEosiodMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_EOSIOD_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainEosiodMainnetEndpoint",
}

func BlockchainEosiodMainnetEndpoint(original ...bool) string {
	return blockchainEosiodMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainEosioEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_EOSIO_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainEosioEndpoint",
}

func MonitorBlockchainEosioEndpoint(original ...bool) string {
	return monitorBlockchainEosioEndpoint.Endpoint(original...)
}

// --------------------------------------
// ETHEREUM endpoints
// --------------------------------------
var blockchainEthereumEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ETHEREUM_ENDPOINT"),
	key:      "dlt:endpoint:blockchainEthereumEndpoint",
}

func BlockchainEthereumEndpoint(original ...bool) string {
	return blockchainEthereumEndpoint.Endpoint(original...)
}

var blockchainEthereumTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ETHEREUM_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainEthereumTestnetEndpoint",
}

func BlockchainEthereumTestnetEndpoint(original ...bool) string {
	return blockchainEthereumTestnetEndpoint.Endpoint(original...)
}

var blockchainEthereumMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ETHEREUM_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainEthereumMainnetEndpoint",
}

func BlockchainEthereumMainnetEndpoint(original ...bool) string {
	return blockchainEthereumMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainEthereumEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_ETHEREUM_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainEthereumEndpoint",
}

func MonitorBlockchainEthereumEndpoint(original ...bool) string {
	return monitorBlockchainEthereumEndpoint.Endpoint(original...)
}

// --------------------------------------
// LISK endpoints
// --------------------------------------
var blockchainLiskEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_LISK_ENDPOINT"),
	key:      "dlt:endpoint:blockchainLiskEndpoint",
}

func BlockchainLiskEndpoint(original ...bool) string {
	return blockchainLiskEndpoint.Endpoint(original...)
}

var blockchainLiskTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_LISK_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainLiskTestnetEndpoint",
}

func BlockchainLiskTestnetEndpoint(original ...bool) string {
	return blockchainLiskTestnetEndpoint.Endpoint(original...)
}

var blockchainLiskMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_LISK_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainLiskMainnetEndpoint",
}

func BlockchainLiskMainnetEndpoint(original ...bool) string {
	return blockchainLiskMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainLiskEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_LISK_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainLiskEndpoint",
}

func MonitorBlockchainLiskEndpoint(original ...bool) string {
	return monitorBlockchainLiskEndpoint.Endpoint(original...)
}

// --------------------------------------
// LITECOIN endpoints
// --------------------------------------
var blockchainLitecoinEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_LITECOIN_ENDPOINT"),
	key:      "dlt:endpoint:blockchainLitecoinEndpoint",
}

func BlockchainLitecoinEndpoint(original ...bool) string {
	return blockchainLitecoinEndpoint.Endpoint(original...)
}

var blockchainLitecoinTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_LITECOIN_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainLitecoinTestnetEndpoint",
}

func BlockchainLitecoinTestnetEndpoint(original ...bool) string {
	return blockchainLitecoinTestnetEndpoint.Endpoint(original...)
}

var blockchainLitecoinMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_LITECOIN_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainLitecoinMainnetEndpoint",
}

func BlockchainLitecoinMainnetEndpoint(original ...bool) string {
	return blockchainLitecoinMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainLitecoinEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_LITECOIN_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainLitecoinEndpoint",
}

func MonitorBlockchainLitecoinEndpoint(original ...bool) string {
	return monitorBlockchainLitecoinEndpoint.Endpoint(original...)
}

// --------------------------------------
// MONERO endpoints
// --------------------------------------
var blockchainMoneroEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_MONERO_ENDPOINT"),
	key:      "dlt:endpoint:blockchainMoneroEndpoint",
}

func BlockchainMoneroEndpoint(original ...bool) string {
	return blockchainMoneroEndpoint.Endpoint(original...)
}

var blockchainMoneroTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_MONERO_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainMoneroTestnetEndpoint",
}

func BlockchainMoneroTestnetEndpoint(original ...bool) string {
	return blockchainMoneroTestnetEndpoint.Endpoint(original...)
}

var blockchainMoneroMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_MONERO_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainMoneroMainnetEndpoint",
}

func BlockchainMoneroMainnetEndpoint(original ...bool) string {
	return blockchainMoneroMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainMoneroEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_MONERO_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainMoneroEndpoint",
}

func MonitorBlockchainMoneroEndpoint(original ...bool) string {
	return monitorBlockchainMoneroEndpoint.Endpoint(original...)
}

// --------------------------------------
// NANO endpoints
// --------------------------------------
var blockchainNanoEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NANO_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNanoEndpoint",
}

func BlockchainNanoEndpoint(original ...bool) string {
	return blockchainNanoEndpoint.Endpoint(original...)
}

var blockchainNanoTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NANO_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNanoTestnetEndpoint",
}

func BlockchainNanoTestnetEndpoint(original ...bool) string {
	return blockchainNanoTestnetEndpoint.Endpoint(original...)
}

var blockchainNanoMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NANO_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNanoMainnetEndpoint",
}

func BlockchainNanoMainnetEndpoint(original ...bool) string {
	return blockchainNanoMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainNanoEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_NANO_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainNanoEndpoint",
}

func MonitorBlockchainNanoEndpoint(original ...bool) string {
	return monitorBlockchainNanoEndpoint.Endpoint(original...)
}

// --------------------------------------
// NEM endpoints
// --------------------------------------
var blockchainNemEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NEM_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNemEndpoint",
}

func BlockchainNemEndpoint(original ...bool) string {
	return blockchainNemEndpoint.Endpoint(original...)
}

var blockchainNemTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NEM_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNemTestnetEndpoint",
}

func BlockchainNemTestnetEndpoint(original ...bool) string {
	return blockchainNemTestnetEndpoint.Endpoint(original...)
}

var blockchainNemMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NEM_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNemMainnetEndpoint",
}

func BlockchainNemMainnetEndpoint(original ...bool) string {
	return blockchainNemMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainNemEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_NEM_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainNemEndpoint",
}

func MonitorBlockchainNemEndpoint(original ...bool) string {
	return monitorBlockchainNemEndpoint.Endpoint(original...)
}

// --------------------------------------
// NEO endpoints
// --------------------------------------
var blockchainNeoEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NEO_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNeoEndpoint",
}

func BlockchainNeoEndpoint(original ...bool) string {
	return blockchainNeoEndpoint.Endpoint(original...)
}

var blockchainNeoTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NEO_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNeoTestnetEndpoint",
}

func BlockchainNeoTestnetEndpoint(original ...bool) string {
	return blockchainNeoTestnetEndpoint.Endpoint(original...)
}

var blockchainNeoMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_NEO_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainNeoMainnetEndpoint",
}

func BlockchainNeoMainnetEndpoint(original ...bool) string {
	return blockchainNeoMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainNeoEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_NEO_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainNeoEndpoint",
}

func MonitorBlockchainNeoEndpoint(original ...bool) string {
	return monitorBlockchainNeoEndpoint.Endpoint(original...)
}

// --------------------------------------
// OMNI endpoints
// --------------------------------------
var blockchainOmniEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_OMNI_ENDPOINT"),
	key:      "dlt:endpoint:blockchainOmniEndpoint",
}

func BlockchainOmniEndpoint(original ...bool) string {
	return blockchainOmniEndpoint.Endpoint(original...)
}

var blockchainOmniTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_OMNI_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainOmniTestnetEndpoint",
}

func BlockchainOmniTestnetEndpoint(original ...bool) string {
	return blockchainOmniTestnetEndpoint.Endpoint(original...)
}

var blockchainOmniMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_OMNI_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainOmniMainnetEndpoint",
}

func BlockchainOmniMainnetEndpoint(original ...bool) string {
	return blockchainOmniMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainOmniEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_OMNI_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainOmniEndpoint",
}

func MonitorBlockchainOmniEndpoint(original ...bool) string {
	return monitorBlockchainOmniEndpoint.Endpoint(original...)
}

// --------------------------------------
// QTUM endpoints
// --------------------------------------
var blockchainQtumEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_QTUM_ENDPOINT"),
	key:      "dlt:endpoint:blockchainQtumEndpoint",
}

func BlockchainQtumEndpoint(original ...bool) string {
	return blockchainQtumEndpoint.Endpoint(original...)
}

var blockchainQtumTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_QTUM_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainQtumTestnetEndpoint",
}

func BlockchainQtumTestnetEndpoint(original ...bool) string {
	return blockchainQtumTestnetEndpoint.Endpoint(original...)
}

var blockchainQtumMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_QTUM_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainQtumMainnetEndpoint",
}

func BlockchainQtumMainnetEndpoint(original ...bool) string {
	return blockchainQtumMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainQtumEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_QTUM_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainQtumEndpoint",
}

func MonitorBlockchainQtumEndpoint(original ...bool) string {
	return monitorBlockchainQtumEndpoint.Endpoint(original...)
}

// --------------------------------------
// RIPPLE endpoints
// --------------------------------------
var blockchainRippleEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_RIPPLE_ENDPOINT"),
	key:      "dlt:endpoint:blockchainRippleEndpoint",
}

func BlockchainRippleEndpoint(original ...bool) string {
	return blockchainRippleEndpoint.Endpoint(original...)
}

var blockchainRippleTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_RIPPLE_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainRippleTestnetEndpoint",
}

func BlockchainRippleTestnetEndpoint(original ...bool) string {
	return blockchainRippleTestnetEndpoint.Endpoint(original...)
}

var blockchainRippleMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_RIPPLE_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainRippleMainnetEndpoint",
}

func BlockchainRippleMainnetEndpoint(original ...bool) string {
	return blockchainRippleMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainRippleEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_RIPPLE_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainRippleEndpoint",
}

func MonitorBlockchainRippleEndpoint(original ...bool) string {
	return monitorBlockchainRippleEndpoint.Endpoint(original...)
}

// --------------------------------------
// TEZOS endpoints
// --------------------------------------
var blockchainTezosEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TEZOS_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTezosEndpoint",
}

func BlockchainTezosEndpoint(original ...bool) string {
	return blockchainTezosEndpoint.Endpoint(original...)
}

var blockchainTezosTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TEZOS_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTezosTestnetEndpoint",
}

func BlockchainTezosTestnetEndpoint(original ...bool) string {
	return blockchainTezosTestnetEndpoint.Endpoint(original...)
}

var blockchainTezosMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TEZOS_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTezosMainnetEndpoint",
}

func BlockchainTezosMainnetEndpoint(original ...bool) string {
	return blockchainTezosMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainTezosEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_TEZOS_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainTezosEndpoint",
}

func MonitorBlockchainTezosEndpoint(original ...bool) string {
	return monitorBlockchainTezosEndpoint.Endpoint(original...)
}

// --------------------------------------
// TRON endpoints
// --------------------------------------
var blockchainTronFullnodeEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_FULLNODE_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronFullnodeEndpoint",
}

func BlockchainTronFullnodeEndpoint(original ...bool) string {
	return blockchainTronFullnodeEndpoint.Endpoint(original...)
}

var blockchainTronFullnodeRpcEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_FULLNODE_RPC_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronFullnodeRpcEndpoint",
}

func BlockchainTronFullnodeRpcEndpoint(original ...bool) string {
	return blockchainTronFullnodeRpcEndpoint.Endpoint(original...)
}

var blockchainTronSolidityRpcEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_SOLIDITY_RPC_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronSolidityRpcEndpoint",
}

func BlockchainTronSolidityRpcEndpoint(original ...bool) string {
	return blockchainTronSolidityRpcEndpoint.Endpoint(original...)
}

var blockchainTronSolidityHttpEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_SOLIDITY_HTTP_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronSolidityHttpEndpoint",
}

func BlockchainTronSolidityHttpEndpoint(original ...bool) string {
	return blockchainTronSolidityHttpEndpoint.Endpoint(original...)
}

var blockchainTronFullnodeTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_FULLNODE_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronFullnodeTestnetEndpoint",
}

func BlockchainTronFullnodeTestnetEndpoint(original ...bool) string {
	return blockchainTronFullnodeTestnetEndpoint.Endpoint(original...)
}

var blockchainTronFullnodeRpcTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_FULLNODE_RPC_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronFullnodeRpcTestnetEndpoint",
}

func BlockchainTronFullnodeRpcTestnetEndpoint(original ...bool) string {
	return blockchainTronFullnodeRpcTestnetEndpoint.Endpoint(original...)
}

var blockchainTronSolidityRpcTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_SOLIDITY_RPC_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronSolidityRpcTestnetEndpoint",
}

func BlockchainTronSolidityRpcTestnetEndpoint(original ...bool) string {
	return blockchainTronSolidityRpcTestnetEndpoint.Endpoint(original...)
}

var blockchainTronSolidityHttpTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_SOLIDITY_HTTP_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronSolidityHttpTestnetEndpoint",
}

func BlockchainTronSolidityHttpTestnetEndpoint(original ...bool) string {
	return blockchainTronSolidityHttpTestnetEndpoint.Endpoint(original...)
}

var blockchainTronFullnodeMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_FULLNODE_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronFullnodeMainnetEndpoint",
}

func BlockchainTronFullnodeMainnetEndpoint(original ...bool) string {
	return blockchainTronFullnodeMainnetEndpoint.Endpoint(original...)
}

var blockchainTronFullnodeRpcMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_FULLNODE_RPC_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronFullnodeRpcMainnetEndpoint",
}

func BlockchainTronFullnodeRpcMainnetEndpoint(original ...bool) string {
	return blockchainTronFullnodeRpcMainnetEndpoint.Endpoint(original...)
}

var blockchainTronSolidityRpcMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_SOLIDITY_RPC_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronSolidityRpcMainnetEndpoint",
}

func BlockchainTronSolidityRpcMainnetEndpoint(original ...bool) string {
	return blockchainTronSolidityRpcMainnetEndpoint.Endpoint(original...)
}

var blockchainTronSolidityHttpMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_TRON_SOLIDITY_HTTP_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainTronSolidityHttpMainnetEndpoint",
}

func BlockchainTronSolidityHttpMainnetEndpoint(original ...bool) string {
	return blockchainTronSolidityHttpMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainTronEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_TRON_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainTronEndpoint",
}

func MonitorBlockchainTronEndpoint(original ...bool) string {
	return monitorBlockchainTronEndpoint.Endpoint(original...)
}

// --------------------------------------
// VECHAIN endpoints
// --------------------------------------
var blockchainVechainEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_VECHAIN_ENDPOINT"),
	key:      "dlt:endpoint:blockchainVechainEndpoint",
}

func BlockchainVechainEndpoint(original ...bool) string {
	return blockchainVechainEndpoint.Endpoint(original...)
}

var blockchainVechainTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_VECHAIN_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainVechainTestnetEndpoint",
}

func BlockchainVechainTestnetEndpoint(original ...bool) string {
	return blockchainVechainTestnetEndpoint.Endpoint(original...)
}

var blockchainVechainMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_VECHAIN_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainVechainMainnetEndpoint",
}

func BlockchainVechainMainnetEndpoint(original ...bool) string {
	return blockchainVechainMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainVechainEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_VECHAIN_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainVechainEndpoint",
}

func MonitorBlockchainVechainEndpoint(original ...bool) string {
	return monitorBlockchainVechainEndpoint.Endpoint(original...)
}

// --------------------------------------
// ZCASH endpoints
// --------------------------------------
var blockchainZcashEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ZCASH_ENDPOINT"),
	key:      "dlt:endpoint:blockchainZcashEndpoint",
}

func BlockchainZcashEndpoint(original ...bool) string {
	return blockchainZcashEndpoint.Endpoint(original...)
}

var blockchainZcashTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ZCASH_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainZcashTestnetEndpoint",
}

func BlockchainZcashTestnetEndpoint(original ...bool) string {
	return blockchainZcashTestnetEndpoint.Endpoint(original...)
}

var blockchainZcashMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_ZCASH_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainZcashMainnetEndpoint",
}

func BlockchainZcashMainnetEndpoint(original ...bool) string {
	return blockchainZcashMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainZcashEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_ZCASH_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainZcashEndpoint",
}

func MonitorBlockchainZcashEndpoint(original ...bool) string {
	return monitorBlockchainZcashEndpoint.Endpoint(original...)
}

// --------------------------------------
// STELLAR endpoints
// --------------------------------------
var blockchainStellarEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_STELLAR_ENDPOINT"),
	key:      "dlt:endpoint:blockchainStellarEndpoint",
}

func BlockchainStellarEndpoint(original ...bool) string {
	return blockchainStellarEndpoint.Endpoint(original...)
}

var blockchainStellarTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_STELLAR_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainStellarTestnetEndpoint",
}

func BlockchainStellarTestnetEndpoint(original ...bool) string {
	return blockchainStellarTestnetEndpoint.Endpoint(original...)
}

var blockchainStellarMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_STELLAR_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainStellarMainnetEndpoint",
}

func BlockchainStellarMainnetEndpoint(original ...bool) string {
	return blockchainStellarMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainStellarEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_STELLAR_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainStellarEndpoint",
}

func MonitorBlockchainStellarEndpoint(original ...bool) string {
	return monitorBlockchainStellarEndpoint.Endpoint(original...)
}

// --------------------------------------
// DOGECOIN endpoints
// --------------------------------------
var blockchainDogecoinEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DOGECOIN_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDogecoinEndpoint",
}

func BlockchainDogecoinEndpoint(original ...bool) string {
	return blockchainDogecoinEndpoint.Endpoint(original...)
}

var blockchainDogecoinTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DOGECOIN_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDogecoinTestnetEndpoint",
}

func BlockchainDogecoinTestnetEndpoint(original ...bool) string {
	return blockchainDogecoinTestnetEndpoint.Endpoint(original...)
}

var blockchainDogecoinMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_DOGECOIN_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainDogecoinMainnetEndpoint",
}

func BlockchainDogecoinMainnetEndpoint(original ...bool) string {
	return blockchainDogecoinMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainDogecoinEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_DOGECOIN_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainDogecoinEndpoint",
}

func MonitorBlockchainDogecoinEndpoint(original ...bool) string {
	return monitorBlockchainDogecoinEndpoint.Endpoint(original...)
}

// --------------------------------------
// IOTA endpoints
// --------------------------------------
var blockchainIotaEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_IOTA_ENDPOINT"),
	key:      "dlt:endpoint:blockchainIotaEndpoint",
}

func BlockchainIotaEndpoint(original ...bool) string {
	return blockchainIotaEndpoint.Endpoint(original...)
}

var blockchainIotaTestnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_IOTA_TESTNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainIotaTestnetEndpoint",
}

func BlockchainIotaTestnetEndpoint(original ...bool) string {
	return blockchainIotaTestnetEndpoint.Endpoint(original...)
}

var blockchainIotaMainnetEndpoint = &endpoint{
	endpoint: os.Getenv("BLOCKCHAIN_IOTA_MAINNET_ENDPOINT"),
	key:      "dlt:endpoint:blockchainIotaMainnetEndpoint",
}

func BlockchainIotaMainnetEndpoint(original ...bool) string {
	return blockchainIotaMainnetEndpoint.Endpoint(original...)
}

var monitorBlockchainIotaEndpoint = &endpoint{
	endpoint: os.Getenv("MONITOR_BLOCKCHAIN_IOTA_ENDPOINT"),
	key:      "dlt:endpoint:monitorBlockchainIotaEndpoint",
}

func MonitorBlockchainIotaEndpoint(original ...bool) string {
	return monitorBlockchainIotaEndpoint.Endpoint(original...)
}

// --------------------------------------
// BLOCKCHAIND2_RPC_ENDPOINT
// --------------------------------------
var (
	blockchaind2RpcEndpointStr = os.Getenv("BLOCKCHAIND2_RPC_ENDPOINT")

	blockchaind2RpcEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchaind2RpcEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchaind2RpcEndpointStr))
		}
		val := int(v)
		return &val
	})
	blockchaind2RpcEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchaind2RpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchaind2RpcEndpointStr))
		}
		val := int64(v)
		return &val
	})
	blockchaind2RpcEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchaind2RpcEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchaind2RpcEndpointStr))
		}
		val := uint(v)
		return &val
	})
	blockchaind2RpcEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchaind2RpcEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchaind2RpcEndpointStr))
		}
		return &v
	})
	blockchaind2RpcEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchaind2RpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchaind2RpcEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Blockchaind2RpcEndpoint returns the cached BLOCKCHAIND2_RPC_ENDPOINT variable.
func Blockchaind2RpcEndpoint() string {
	return blockchaind2RpcEndpointStr
}

// Blockchaind2RpcEndpointInt returns the cached int of BLOCKCHAIND2_RPC_ENDPOINT variable.
func Blockchaind2RpcEndpointInt() int {
	return *((blockchaind2RpcEndpointIntCacher.Get()).(*int))
}

// Blockchaind2RpcEndpointInt64 returns the cached int64 of BLOCKCHAIND2_RPC_ENDPOINT variable.
func Blockchaind2RpcEndpointInt64() int64 {
	return *((blockchaind2RpcEndpointInt64Cacher.Get()).(*int64))
}

// Blockchaind2RpcEndpointUint returns the cached uint of BLOCKCHAIND2_RPC_ENDPOINT variable.
func Blockchaind2RpcEndpointUint() uint {
	return *((blockchaind2RpcEndpointUintCacher.Get()).(*uint))
}

// Blockchaind2RpcEndpointBool returns the cached bool of BLOCKCHAIND2_RPC_ENDPOINT variable.
func Blockchaind2RpcEndpointBool() bool {
	return *((blockchaind2RpcEndpointBoolCacher.Get()).(*bool))
}

// Blockchaind2RpcEndpointMs returns the cached millisecond of BLOCKCHAIND2_RPC_ENDPOINT variable.
func Blockchaind2RpcEndpointMs() time.Duration {
	return *((blockchaind2RpcEndpointMsCacher.Get()).(*time.Duration))
}

// SetBlockchaind2RpcEndpoint sets the cached value.
func SetBlockchaind2RpcEndpoint(v string) {
	blockchaind2RpcEndpointStr = v
	blockchaind2RpcEndpointIntCacher.Clear()
	blockchaind2RpcEndpointInt64Cacher.Clear()
	blockchaind2RpcEndpointUintCacher.Clear()
	blockchaind2RpcEndpointBoolCacher.Clear()
	blockchaind2RpcEndpointMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_ACHAIN_CHAIN_ID
// --------------------------------------
var (
	blockchainAchainChainIdStr = os.Getenv("BLOCKCHAIN_ACHAIN_CHAIN_ID")

	blockchainAchainChainIdIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainAchainChainIdStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainAchainChainIdStr))
		}
		val := int(v)
		return &val
	})
	blockchainAchainChainIdInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainAchainChainIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainAchainChainIdStr))
		}
		val := int64(v)
		return &val
	})
	blockchainAchainChainIdUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainAchainChainIdStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainAchainChainIdStr))
		}
		val := uint(v)
		return &val
	})
	blockchainAchainChainIdBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainAchainChainIdStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainAchainChainIdStr))
		}
		return &v
	})
	blockchainAchainChainIdMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainAchainChainIdStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainAchainChainIdStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainAchainChainId returns the cached BLOCKCHAIN_ACHAIN_CHAIN_ID variable.
func BlockchainAchainChainId() string {
	return blockchainAchainChainIdStr
}

// BlockchainAchainChainIdInt returns the cached int of BLOCKCHAIN_ACHAIN_CHAIN_ID variable.
func BlockchainAchainChainIdInt() int {
	return *((blockchainAchainChainIdIntCacher.Get()).(*int))
}

// BlockchainAchainChainIdInt64 returns the cached int64 of BLOCKCHAIN_ACHAIN_CHAIN_ID variable.
func BlockchainAchainChainIdInt64() int64 {
	return *((blockchainAchainChainIdInt64Cacher.Get()).(*int64))
}

// BlockchainAchainChainIdUint returns the cached uint of BLOCKCHAIN_ACHAIN_CHAIN_ID variable.
func BlockchainAchainChainIdUint() uint {
	return *((blockchainAchainChainIdUintCacher.Get()).(*uint))
}

// BlockchainAchainChainIdBool returns the cached bool of BLOCKCHAIN_ACHAIN_CHAIN_ID variable.
func BlockchainAchainChainIdBool() bool {
	return *((blockchainAchainChainIdBoolCacher.Get()).(*bool))
}

// BlockchainAchainChainIdMs returns the cached millisecond of BLOCKCHAIN_ACHAIN_CHAIN_ID variable.
func BlockchainAchainChainIdMs() time.Duration {
	return *((blockchainAchainChainIdMsCacher.Get()).(*time.Duration))
}

// SetBlockchainAchainChainId sets the cached value.
func SetBlockchainAchainChainId(v string) {
	blockchainAchainChainIdStr = v
	blockchainAchainChainIdIntCacher.Clear()
	blockchainAchainChainIdInt64Cacher.Clear()
	blockchainAchainChainIdUintCacher.Clear()
	blockchainAchainChainIdBoolCacher.Clear()
	blockchainAchainChainIdMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT
// --------------------------------------
var (
	blockchainCybermilesSuperNodeEndpointStr = os.Getenv("BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT")

	blockchainCybermilesSuperNodeEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainCybermilesSuperNodeEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainCybermilesSuperNodeEndpointStr))
		}
		val := int(v)
		return &val
	})
	blockchainCybermilesSuperNodeEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainCybermilesSuperNodeEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainCybermilesSuperNodeEndpointStr))
		}
		val := int64(v)
		return &val
	})
	blockchainCybermilesSuperNodeEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainCybermilesSuperNodeEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainCybermilesSuperNodeEndpointStr))
		}
		val := uint(v)
		return &val
	})
	blockchainCybermilesSuperNodeEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainCybermilesSuperNodeEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainCybermilesSuperNodeEndpointStr))
		}
		return &v
	})
	blockchainCybermilesSuperNodeEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainCybermilesSuperNodeEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainCybermilesSuperNodeEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainCybermilesSuperNodeEndpoint returns the cached BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT variable.
func BlockchainCybermilesSuperNodeEndpoint() string {
	return blockchainCybermilesSuperNodeEndpointStr
}

// BlockchainCybermilesSuperNodeEndpointInt returns the cached int of BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT variable.
func BlockchainCybermilesSuperNodeEndpointInt() int {
	return *((blockchainCybermilesSuperNodeEndpointIntCacher.Get()).(*int))
}

// BlockchainCybermilesSuperNodeEndpointInt64 returns the cached int64 of BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT variable.
func BlockchainCybermilesSuperNodeEndpointInt64() int64 {
	return *((blockchainCybermilesSuperNodeEndpointInt64Cacher.Get()).(*int64))
}

// BlockchainCybermilesSuperNodeEndpointUint returns the cached uint of BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT variable.
func BlockchainCybermilesSuperNodeEndpointUint() uint {
	return *((blockchainCybermilesSuperNodeEndpointUintCacher.Get()).(*uint))
}

// BlockchainCybermilesSuperNodeEndpointBool returns the cached bool of BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT variable.
func BlockchainCybermilesSuperNodeEndpointBool() bool {
	return *((blockchainCybermilesSuperNodeEndpointBoolCacher.Get()).(*bool))
}

// BlockchainCybermilesSuperNodeEndpointMs returns the cached millisecond of BLOCKCHAIN_CYBERMILES_SUPER_NODE_ENDPOINT variable.
func BlockchainCybermilesSuperNodeEndpointMs() time.Duration {
	return *((blockchainCybermilesSuperNodeEndpointMsCacher.Get()).(*time.Duration))
}

// SetBlockchainCybermilesSuperNodeEndpoint sets the cached value.
func SetBlockchainCybermilesSuperNodeEndpoint(v string) {
	blockchainCybermilesSuperNodeEndpointStr = v
	blockchainCybermilesSuperNodeEndpointIntCacher.Clear()
	blockchainCybermilesSuperNodeEndpointInt64Cacher.Clear()
	blockchainCybermilesSuperNodeEndpointUintCacher.Clear()
	blockchainCybermilesSuperNodeEndpointBoolCacher.Clear()
	blockchainCybermilesSuperNodeEndpointMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_MONERO_WALLET_FILENAME
// --------------------------------------
var (
	blockchainMoneroWalletFilenameStr = os.Getenv("BLOCKCHAIN_MONERO_WALLET_FILENAME")

	blockchainMoneroWalletFilenameIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroWalletFilenameStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainMoneroWalletFilenameStr))
		}
		val := int(v)
		return &val
	})
	blockchainMoneroWalletFilenameInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroWalletFilenameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainMoneroWalletFilenameStr))
		}
		val := int64(v)
		return &val
	})
	blockchainMoneroWalletFilenameUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainMoneroWalletFilenameStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainMoneroWalletFilenameStr))
		}
		val := uint(v)
		return &val
	})
	blockchainMoneroWalletFilenameBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainMoneroWalletFilenameStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainMoneroWalletFilenameStr))
		}
		return &v
	})
	blockchainMoneroWalletFilenameMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroWalletFilenameStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainMoneroWalletFilenameStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainMoneroWalletFilename returns the cached BLOCKCHAIN_MONERO_WALLET_FILENAME variable.
func BlockchainMoneroWalletFilename() string {
	return blockchainMoneroWalletFilenameStr
}

// BlockchainMoneroWalletFilenameInt returns the cached int of BLOCKCHAIN_MONERO_WALLET_FILENAME variable.
func BlockchainMoneroWalletFilenameInt() int {
	return *((blockchainMoneroWalletFilenameIntCacher.Get()).(*int))
}

// BlockchainMoneroWalletFilenameInt64 returns the cached int64 of BLOCKCHAIN_MONERO_WALLET_FILENAME variable.
func BlockchainMoneroWalletFilenameInt64() int64 {
	return *((blockchainMoneroWalletFilenameInt64Cacher.Get()).(*int64))
}

// BlockchainMoneroWalletFilenameUint returns the cached uint of BLOCKCHAIN_MONERO_WALLET_FILENAME variable.
func BlockchainMoneroWalletFilenameUint() uint {
	return *((blockchainMoneroWalletFilenameUintCacher.Get()).(*uint))
}

// BlockchainMoneroWalletFilenameBool returns the cached bool of BLOCKCHAIN_MONERO_WALLET_FILENAME variable.
func BlockchainMoneroWalletFilenameBool() bool {
	return *((blockchainMoneroWalletFilenameBoolCacher.Get()).(*bool))
}

// BlockchainMoneroWalletFilenameMs returns the cached millisecond of BLOCKCHAIN_MONERO_WALLET_FILENAME variable.
func BlockchainMoneroWalletFilenameMs() time.Duration {
	return *((blockchainMoneroWalletFilenameMsCacher.Get()).(*time.Duration))
}

// SetBlockchainMoneroWalletFilename sets the cached value.
func SetBlockchainMoneroWalletFilename(v string) {
	blockchainMoneroWalletFilenameStr = v
	blockchainMoneroWalletFilenameIntCacher.Clear()
	blockchainMoneroWalletFilenameInt64Cacher.Clear()
	blockchainMoneroWalletFilenameUintCacher.Clear()
	blockchainMoneroWalletFilenameBoolCacher.Clear()
	blockchainMoneroWalletFilenameMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_MONERO_WALLET_PASSWORD
// --------------------------------------
var (
	blockchainMoneroWalletPasswordStr = os.Getenv("BLOCKCHAIN_MONERO_WALLET_PASSWORD")

	blockchainMoneroWalletPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroWalletPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainMoneroWalletPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainMoneroWalletPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroWalletPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainMoneroWalletPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainMoneroWalletPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainMoneroWalletPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainMoneroWalletPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainMoneroWalletPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainMoneroWalletPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainMoneroWalletPasswordStr))
		}
		return &v
	})
	blockchainMoneroWalletPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroWalletPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainMoneroWalletPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainMoneroWalletPassword returns the cached BLOCKCHAIN_MONERO_WALLET_PASSWORD variable.
func BlockchainMoneroWalletPassword() string {
	return blockchainMoneroWalletPasswordStr
}

// BlockchainMoneroWalletPasswordInt returns the cached int of BLOCKCHAIN_MONERO_WALLET_PASSWORD variable.
func BlockchainMoneroWalletPasswordInt() int {
	return *((blockchainMoneroWalletPasswordIntCacher.Get()).(*int))
}

// BlockchainMoneroWalletPasswordInt64 returns the cached int64 of BLOCKCHAIN_MONERO_WALLET_PASSWORD variable.
func BlockchainMoneroWalletPasswordInt64() int64 {
	return *((blockchainMoneroWalletPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainMoneroWalletPasswordUint returns the cached uint of BLOCKCHAIN_MONERO_WALLET_PASSWORD variable.
func BlockchainMoneroWalletPasswordUint() uint {
	return *((blockchainMoneroWalletPasswordUintCacher.Get()).(*uint))
}

// BlockchainMoneroWalletPasswordBool returns the cached bool of BLOCKCHAIN_MONERO_WALLET_PASSWORD variable.
func BlockchainMoneroWalletPasswordBool() bool {
	return *((blockchainMoneroWalletPasswordBoolCacher.Get()).(*bool))
}

// BlockchainMoneroWalletPasswordMs returns the cached millisecond of BLOCKCHAIN_MONERO_WALLET_PASSWORD variable.
func BlockchainMoneroWalletPasswordMs() time.Duration {
	return *((blockchainMoneroWalletPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainMoneroWalletPassword sets the cached value.
func SetBlockchainMoneroWalletPassword(v string) {
	blockchainMoneroWalletPasswordStr = v
	blockchainMoneroWalletPasswordIntCacher.Clear()
	blockchainMoneroWalletPasswordInt64Cacher.Clear()
	blockchainMoneroWalletPasswordUintCacher.Clear()
	blockchainMoneroWalletPasswordBoolCacher.Clear()
	blockchainMoneroWalletPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_ACHAIN_PASSWORD
// --------------------------------------
var (
	blockchainAchainPasswordStr = os.Getenv("BLOCKCHAIN_ACHAIN_PASSWORD")

	blockchainAchainPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainAchainPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainAchainPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainAchainPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainAchainPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainAchainPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainAchainPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainAchainPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainAchainPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainAchainPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainAchainPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainAchainPasswordStr))
		}
		return &v
	})
	blockchainAchainPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainAchainPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainAchainPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainAchainPassword returns the cached BLOCKCHAIN_ACHAIN_PASSWORD variable.
func BlockchainAchainPassword() string {
	return blockchainAchainPasswordStr
}

// BlockchainAchainPasswordInt returns the cached int of BLOCKCHAIN_ACHAIN_PASSWORD variable.
func BlockchainAchainPasswordInt() int {
	return *((blockchainAchainPasswordIntCacher.Get()).(*int))
}

// BlockchainAchainPasswordInt64 returns the cached int64 of BLOCKCHAIN_ACHAIN_PASSWORD variable.
func BlockchainAchainPasswordInt64() int64 {
	return *((blockchainAchainPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainAchainPasswordUint returns the cached uint of BLOCKCHAIN_ACHAIN_PASSWORD variable.
func BlockchainAchainPasswordUint() uint {
	return *((blockchainAchainPasswordUintCacher.Get()).(*uint))
}

// BlockchainAchainPasswordBool returns the cached bool of BLOCKCHAIN_ACHAIN_PASSWORD variable.
func BlockchainAchainPasswordBool() bool {
	return *((blockchainAchainPasswordBoolCacher.Get()).(*bool))
}

// BlockchainAchainPasswordMs returns the cached millisecond of BLOCKCHAIN_ACHAIN_PASSWORD variable.
func BlockchainAchainPasswordMs() time.Duration {
	return *((blockchainAchainPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainAchainPassword sets the cached value.
func SetBlockchainAchainPassword(v string) {
	blockchainAchainPasswordStr = v
	blockchainAchainPasswordIntCacher.Clear()
	blockchainAchainPasswordInt64Cacher.Clear()
	blockchainAchainPasswordUintCacher.Clear()
	blockchainAchainPasswordBoolCacher.Clear()
	blockchainAchainPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_BITCOINCASH_PASSWORD
// --------------------------------------
var (
	blockchainBitcoincashPasswordStr = os.Getenv("BLOCKCHAIN_BITCOINCASH_PASSWORD")

	blockchainBitcoincashPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainBitcoincashPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainBitcoincashPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainBitcoincashPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainBitcoincashPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainBitcoincashPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainBitcoincashPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainBitcoincashPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainBitcoincashPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainBitcoincashPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainBitcoincashPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainBitcoincashPasswordStr))
		}
		return &v
	})
	blockchainBitcoincashPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainBitcoincashPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainBitcoincashPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainBitcoincashPassword returns the cached BLOCKCHAIN_BITCOINCASH_PASSWORD variable.
func BlockchainBitcoincashPassword() string {
	return blockchainBitcoincashPasswordStr
}

// BlockchainBitcoincashPasswordInt returns the cached int of BLOCKCHAIN_BITCOINCASH_PASSWORD variable.
func BlockchainBitcoincashPasswordInt() int {
	return *((blockchainBitcoincashPasswordIntCacher.Get()).(*int))
}

// BlockchainBitcoincashPasswordInt64 returns the cached int64 of BLOCKCHAIN_BITCOINCASH_PASSWORD variable.
func BlockchainBitcoincashPasswordInt64() int64 {
	return *((blockchainBitcoincashPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainBitcoincashPasswordUint returns the cached uint of BLOCKCHAIN_BITCOINCASH_PASSWORD variable.
func BlockchainBitcoincashPasswordUint() uint {
	return *((blockchainBitcoincashPasswordUintCacher.Get()).(*uint))
}

// BlockchainBitcoincashPasswordBool returns the cached bool of BLOCKCHAIN_BITCOINCASH_PASSWORD variable.
func BlockchainBitcoincashPasswordBool() bool {
	return *((blockchainBitcoincashPasswordBoolCacher.Get()).(*bool))
}

// BlockchainBitcoincashPasswordMs returns the cached millisecond of BLOCKCHAIN_BITCOINCASH_PASSWORD variable.
func BlockchainBitcoincashPasswordMs() time.Duration {
	return *((blockchainBitcoincashPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainBitcoincashPassword sets the cached value.
func SetBlockchainBitcoincashPassword(v string) {
	blockchainBitcoincashPasswordStr = v
	blockchainBitcoincashPasswordIntCacher.Clear()
	blockchainBitcoincashPasswordInt64Cacher.Clear()
	blockchainBitcoincashPasswordUintCacher.Clear()
	blockchainBitcoincashPasswordBoolCacher.Clear()
	blockchainBitcoincashPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_BITCOIN_PASSWORD
// --------------------------------------
var (
	blockchainBitcoinPasswordStr = os.Getenv("BLOCKCHAIN_BITCOIN_PASSWORD")

	blockchainBitcoinPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainBitcoinPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainBitcoinPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainBitcoinPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainBitcoinPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainBitcoinPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainBitcoinPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainBitcoinPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainBitcoinPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainBitcoinPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainBitcoinPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainBitcoinPasswordStr))
		}
		return &v
	})
	blockchainBitcoinPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainBitcoinPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainBitcoinPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainBitcoinPassword returns the cached BLOCKCHAIN_BITCOIN_PASSWORD variable.
func BlockchainBitcoinPassword() string {
	return blockchainBitcoinPasswordStr
}

// BlockchainBitcoinPasswordInt returns the cached int of BLOCKCHAIN_BITCOIN_PASSWORD variable.
func BlockchainBitcoinPasswordInt() int {
	return *((blockchainBitcoinPasswordIntCacher.Get()).(*int))
}

// BlockchainBitcoinPasswordInt64 returns the cached int64 of BLOCKCHAIN_BITCOIN_PASSWORD variable.
func BlockchainBitcoinPasswordInt64() int64 {
	return *((blockchainBitcoinPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainBitcoinPasswordUint returns the cached uint of BLOCKCHAIN_BITCOIN_PASSWORD variable.
func BlockchainBitcoinPasswordUint() uint {
	return *((blockchainBitcoinPasswordUintCacher.Get()).(*uint))
}

// BlockchainBitcoinPasswordBool returns the cached bool of BLOCKCHAIN_BITCOIN_PASSWORD variable.
func BlockchainBitcoinPasswordBool() bool {
	return *((blockchainBitcoinPasswordBoolCacher.Get()).(*bool))
}

// BlockchainBitcoinPasswordMs returns the cached millisecond of BLOCKCHAIN_BITCOIN_PASSWORD variable.
func BlockchainBitcoinPasswordMs() time.Duration {
	return *((blockchainBitcoinPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainBitcoinPassword sets the cached value.
func SetBlockchainBitcoinPassword(v string) {
	blockchainBitcoinPasswordStr = v
	blockchainBitcoinPasswordIntCacher.Clear()
	blockchainBitcoinPasswordInt64Cacher.Clear()
	blockchainBitcoinPasswordUintCacher.Clear()
	blockchainBitcoinPasswordBoolCacher.Clear()
	blockchainBitcoinPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_DASH_PASSWORD
// --------------------------------------
var (
	blockchainDashPasswordStr = os.Getenv("BLOCKCHAIN_DASH_PASSWORD")

	blockchainDashPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainDashPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainDashPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainDashPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainDashPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainDashPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainDashPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainDashPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainDashPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainDashPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainDashPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainDashPasswordStr))
		}
		return &v
	})
	blockchainDashPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainDashPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainDashPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainDashPassword returns the cached BLOCKCHAIN_DASH_PASSWORD variable.
func BlockchainDashPassword() string {
	return blockchainDashPasswordStr
}

// BlockchainDashPasswordInt returns the cached int of BLOCKCHAIN_DASH_PASSWORD variable.
func BlockchainDashPasswordInt() int {
	return *((blockchainDashPasswordIntCacher.Get()).(*int))
}

// BlockchainDashPasswordInt64 returns the cached int64 of BLOCKCHAIN_DASH_PASSWORD variable.
func BlockchainDashPasswordInt64() int64 {
	return *((blockchainDashPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainDashPasswordUint returns the cached uint of BLOCKCHAIN_DASH_PASSWORD variable.
func BlockchainDashPasswordUint() uint {
	return *((blockchainDashPasswordUintCacher.Get()).(*uint))
}

// BlockchainDashPasswordBool returns the cached bool of BLOCKCHAIN_DASH_PASSWORD variable.
func BlockchainDashPasswordBool() bool {
	return *((blockchainDashPasswordBoolCacher.Get()).(*bool))
}

// BlockchainDashPasswordMs returns the cached millisecond of BLOCKCHAIN_DASH_PASSWORD variable.
func BlockchainDashPasswordMs() time.Duration {
	return *((blockchainDashPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainDashPassword sets the cached value.
func SetBlockchainDashPassword(v string) {
	blockchainDashPasswordStr = v
	blockchainDashPasswordIntCacher.Clear()
	blockchainDashPasswordInt64Cacher.Clear()
	blockchainDashPasswordUintCacher.Clear()
	blockchainDashPasswordBoolCacher.Clear()
	blockchainDashPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_DOGECOIN_PASSWORD
// --------------------------------------
var (
	blockchainDogecoinPasswordStr = os.Getenv("BLOCKCHAIN_DOGECOIN_PASSWORD")

	blockchainDogecoinPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainDogecoinPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainDogecoinPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainDogecoinPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainDogecoinPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainDogecoinPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainDogecoinPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainDogecoinPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainDogecoinPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainDogecoinPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainDogecoinPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainDogecoinPasswordStr))
		}
		return &v
	})
	blockchainDogecoinPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainDogecoinPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainDogecoinPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainDogecoinPassword returns the cached BLOCKCHAIN_DOGECOIN_PASSWORD variable.
func BlockchainDogecoinPassword() string {
	return blockchainDogecoinPasswordStr
}

// BlockchainDogecoinPasswordInt returns the cached int of BLOCKCHAIN_DOGECOIN_PASSWORD variable.
func BlockchainDogecoinPasswordInt() int {
	return *((blockchainDogecoinPasswordIntCacher.Get()).(*int))
}

// BlockchainDogecoinPasswordInt64 returns the cached int64 of BLOCKCHAIN_DOGECOIN_PASSWORD variable.
func BlockchainDogecoinPasswordInt64() int64 {
	return *((blockchainDogecoinPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainDogecoinPasswordUint returns the cached uint of BLOCKCHAIN_DOGECOIN_PASSWORD variable.
func BlockchainDogecoinPasswordUint() uint {
	return *((blockchainDogecoinPasswordUintCacher.Get()).(*uint))
}

// BlockchainDogecoinPasswordBool returns the cached bool of BLOCKCHAIN_DOGECOIN_PASSWORD variable.
func BlockchainDogecoinPasswordBool() bool {
	return *((blockchainDogecoinPasswordBoolCacher.Get()).(*bool))
}

// BlockchainDogecoinPasswordMs returns the cached millisecond of BLOCKCHAIN_DOGECOIN_PASSWORD variable.
func BlockchainDogecoinPasswordMs() time.Duration {
	return *((blockchainDogecoinPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainDogecoinPassword sets the cached value.
func SetBlockchainDogecoinPassword(v string) {
	blockchainDogecoinPasswordStr = v
	blockchainDogecoinPasswordIntCacher.Clear()
	blockchainDogecoinPasswordInt64Cacher.Clear()
	blockchainDogecoinPasswordUintCacher.Clear()
	blockchainDogecoinPasswordBoolCacher.Clear()
	blockchainDogecoinPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_LITECOIN_PASSWORD
// --------------------------------------
var (
	blockchainLitecoinPasswordStr = os.Getenv("BLOCKCHAIN_LITECOIN_PASSWORD")

	blockchainLitecoinPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainLitecoinPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainLitecoinPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainLitecoinPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainLitecoinPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainLitecoinPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainLitecoinPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainLitecoinPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainLitecoinPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainLitecoinPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainLitecoinPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainLitecoinPasswordStr))
		}
		return &v
	})
	blockchainLitecoinPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainLitecoinPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainLitecoinPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainLitecoinPassword returns the cached BLOCKCHAIN_LITECOIN_PASSWORD variable.
func BlockchainLitecoinPassword() string {
	return blockchainLitecoinPasswordStr
}

// BlockchainLitecoinPasswordInt returns the cached int of BLOCKCHAIN_LITECOIN_PASSWORD variable.
func BlockchainLitecoinPasswordInt() int {
	return *((blockchainLitecoinPasswordIntCacher.Get()).(*int))
}

// BlockchainLitecoinPasswordInt64 returns the cached int64 of BLOCKCHAIN_LITECOIN_PASSWORD variable.
func BlockchainLitecoinPasswordInt64() int64 {
	return *((blockchainLitecoinPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainLitecoinPasswordUint returns the cached uint of BLOCKCHAIN_LITECOIN_PASSWORD variable.
func BlockchainLitecoinPasswordUint() uint {
	return *((blockchainLitecoinPasswordUintCacher.Get()).(*uint))
}

// BlockchainLitecoinPasswordBool returns the cached bool of BLOCKCHAIN_LITECOIN_PASSWORD variable.
func BlockchainLitecoinPasswordBool() bool {
	return *((blockchainLitecoinPasswordBoolCacher.Get()).(*bool))
}

// BlockchainLitecoinPasswordMs returns the cached millisecond of BLOCKCHAIN_LITECOIN_PASSWORD variable.
func BlockchainLitecoinPasswordMs() time.Duration {
	return *((blockchainLitecoinPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainLitecoinPassword sets the cached value.
func SetBlockchainLitecoinPassword(v string) {
	blockchainLitecoinPasswordStr = v
	blockchainLitecoinPasswordIntCacher.Clear()
	blockchainLitecoinPasswordInt64Cacher.Clear()
	blockchainLitecoinPasswordUintCacher.Clear()
	blockchainLitecoinPasswordBoolCacher.Clear()
	blockchainLitecoinPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_MONERO_PASSWORD
// --------------------------------------
var (
	blockchainMoneroPasswordStr = os.Getenv("BLOCKCHAIN_MONERO_PASSWORD")

	blockchainMoneroPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainMoneroPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainMoneroPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainMoneroPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainMoneroPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainMoneroPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainMoneroPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainMoneroPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainMoneroPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainMoneroPasswordStr))
		}
		return &v
	})
	blockchainMoneroPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainMoneroPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainMoneroPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainMoneroPassword returns the cached BLOCKCHAIN_MONERO_PASSWORD variable.
func BlockchainMoneroPassword() string {
	return blockchainMoneroPasswordStr
}

// BlockchainMoneroPasswordInt returns the cached int of BLOCKCHAIN_MONERO_PASSWORD variable.
func BlockchainMoneroPasswordInt() int {
	return *((blockchainMoneroPasswordIntCacher.Get()).(*int))
}

// BlockchainMoneroPasswordInt64 returns the cached int64 of BLOCKCHAIN_MONERO_PASSWORD variable.
func BlockchainMoneroPasswordInt64() int64 {
	return *((blockchainMoneroPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainMoneroPasswordUint returns the cached uint of BLOCKCHAIN_MONERO_PASSWORD variable.
func BlockchainMoneroPasswordUint() uint {
	return *((blockchainMoneroPasswordUintCacher.Get()).(*uint))
}

// BlockchainMoneroPasswordBool returns the cached bool of BLOCKCHAIN_MONERO_PASSWORD variable.
func BlockchainMoneroPasswordBool() bool {
	return *((blockchainMoneroPasswordBoolCacher.Get()).(*bool))
}

// BlockchainMoneroPasswordMs returns the cached millisecond of BLOCKCHAIN_MONERO_PASSWORD variable.
func BlockchainMoneroPasswordMs() time.Duration {
	return *((blockchainMoneroPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainMoneroPassword sets the cached value.
func SetBlockchainMoneroPassword(v string) {
	blockchainMoneroPasswordStr = v
	blockchainMoneroPasswordIntCacher.Clear()
	blockchainMoneroPasswordInt64Cacher.Clear()
	blockchainMoneroPasswordUintCacher.Clear()
	blockchainMoneroPasswordBoolCacher.Clear()
	blockchainMoneroPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_OMNI_PASSWORD
// --------------------------------------
var (
	blockchainOmniPasswordStr = os.Getenv("BLOCKCHAIN_OMNI_PASSWORD")

	blockchainOmniPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainOmniPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainOmniPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainOmniPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainOmniPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainOmniPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainOmniPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainOmniPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainOmniPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainOmniPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainOmniPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainOmniPasswordStr))
		}
		return &v
	})
	blockchainOmniPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainOmniPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainOmniPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainOmniPassword returns the cached BLOCKCHAIN_OMNI_PASSWORD variable.
func BlockchainOmniPassword() string {
	return blockchainOmniPasswordStr
}

// BlockchainOmniPasswordInt returns the cached int of BLOCKCHAIN_OMNI_PASSWORD variable.
func BlockchainOmniPasswordInt() int {
	return *((blockchainOmniPasswordIntCacher.Get()).(*int))
}

// BlockchainOmniPasswordInt64 returns the cached int64 of BLOCKCHAIN_OMNI_PASSWORD variable.
func BlockchainOmniPasswordInt64() int64 {
	return *((blockchainOmniPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainOmniPasswordUint returns the cached uint of BLOCKCHAIN_OMNI_PASSWORD variable.
func BlockchainOmniPasswordUint() uint {
	return *((blockchainOmniPasswordUintCacher.Get()).(*uint))
}

// BlockchainOmniPasswordBool returns the cached bool of BLOCKCHAIN_OMNI_PASSWORD variable.
func BlockchainOmniPasswordBool() bool {
	return *((blockchainOmniPasswordBoolCacher.Get()).(*bool))
}

// BlockchainOmniPasswordMs returns the cached millisecond of BLOCKCHAIN_OMNI_PASSWORD variable.
func BlockchainOmniPasswordMs() time.Duration {
	return *((blockchainOmniPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainOmniPassword sets the cached value.
func SetBlockchainOmniPassword(v string) {
	blockchainOmniPasswordStr = v
	blockchainOmniPasswordIntCacher.Clear()
	blockchainOmniPasswordInt64Cacher.Clear()
	blockchainOmniPasswordUintCacher.Clear()
	blockchainOmniPasswordBoolCacher.Clear()
	blockchainOmniPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_QTUM_PASSWORD
// --------------------------------------
var (
	blockchainQtumPasswordStr = os.Getenv("BLOCKCHAIN_QTUM_PASSWORD")

	blockchainQtumPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainQtumPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainQtumPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainQtumPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainQtumPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainQtumPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainQtumPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainQtumPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainQtumPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainQtumPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainQtumPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainQtumPasswordStr))
		}
		return &v
	})
	blockchainQtumPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainQtumPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainQtumPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainQtumPassword returns the cached BLOCKCHAIN_QTUM_PASSWORD variable.
func BlockchainQtumPassword() string {
	return blockchainQtumPasswordStr
}

// BlockchainQtumPasswordInt returns the cached int of BLOCKCHAIN_QTUM_PASSWORD variable.
func BlockchainQtumPasswordInt() int {
	return *((blockchainQtumPasswordIntCacher.Get()).(*int))
}

// BlockchainQtumPasswordInt64 returns the cached int64 of BLOCKCHAIN_QTUM_PASSWORD variable.
func BlockchainQtumPasswordInt64() int64 {
	return *((blockchainQtumPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainQtumPasswordUint returns the cached uint of BLOCKCHAIN_QTUM_PASSWORD variable.
func BlockchainQtumPasswordUint() uint {
	return *((blockchainQtumPasswordUintCacher.Get()).(*uint))
}

// BlockchainQtumPasswordBool returns the cached bool of BLOCKCHAIN_QTUM_PASSWORD variable.
func BlockchainQtumPasswordBool() bool {
	return *((blockchainQtumPasswordBoolCacher.Get()).(*bool))
}

// BlockchainQtumPasswordMs returns the cached millisecond of BLOCKCHAIN_QTUM_PASSWORD variable.
func BlockchainQtumPasswordMs() time.Duration {
	return *((blockchainQtumPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainQtumPassword sets the cached value.
func SetBlockchainQtumPassword(v string) {
	blockchainQtumPasswordStr = v
	blockchainQtumPasswordIntCacher.Clear()
	blockchainQtumPasswordInt64Cacher.Clear()
	blockchainQtumPasswordUintCacher.Clear()
	blockchainQtumPasswordBoolCacher.Clear()
	blockchainQtumPasswordMsCacher.Clear()
}

// --------------------------------------
// BLOCKCHAIN_ZCASH_PASSWORD
// --------------------------------------
var (
	blockchainZcashPasswordStr = os.Getenv("BLOCKCHAIN_ZCASH_PASSWORD")

	blockchainZcashPasswordIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainZcashPasswordStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainZcashPasswordStr))
		}
		val := int(v)
		return &val
	})
	blockchainZcashPasswordInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainZcashPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", blockchainZcashPasswordStr))
		}
		val := int64(v)
		return &val
	})
	blockchainZcashPasswordUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(blockchainZcashPasswordStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", blockchainZcashPasswordStr))
		}
		val := uint(v)
		return &val
	})
	blockchainZcashPasswordBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(blockchainZcashPasswordStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", blockchainZcashPasswordStr))
		}
		return &v
	})
	blockchainZcashPasswordMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(blockchainZcashPasswordStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", blockchainZcashPasswordStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// BlockchainZcashPassword returns the cached BLOCKCHAIN_ZCASH_PASSWORD variable.
func BlockchainZcashPassword() string {
	return blockchainZcashPasswordStr
}

// BlockchainZcashPasswordInt returns the cached int of BLOCKCHAIN_ZCASH_PASSWORD variable.
func BlockchainZcashPasswordInt() int {
	return *((blockchainZcashPasswordIntCacher.Get()).(*int))
}

// BlockchainZcashPasswordInt64 returns the cached int64 of BLOCKCHAIN_ZCASH_PASSWORD variable.
func BlockchainZcashPasswordInt64() int64 {
	return *((blockchainZcashPasswordInt64Cacher.Get()).(*int64))
}

// BlockchainZcashPasswordUint returns the cached uint of BLOCKCHAIN_ZCASH_PASSWORD variable.
func BlockchainZcashPasswordUint() uint {
	return *((blockchainZcashPasswordUintCacher.Get()).(*uint))
}

// BlockchainZcashPasswordBool returns the cached bool of BLOCKCHAIN_ZCASH_PASSWORD variable.
func BlockchainZcashPasswordBool() bool {
	return *((blockchainZcashPasswordBoolCacher.Get()).(*bool))
}

// BlockchainZcashPasswordMs returns the cached millisecond of BLOCKCHAIN_ZCASH_PASSWORD variable.
func BlockchainZcashPasswordMs() time.Duration {
	return *((blockchainZcashPasswordMsCacher.Get()).(*time.Duration))
}

// SetBlockchainZcashPassword sets the cached value.
func SetBlockchainZcashPassword(v string) {
	blockchainZcashPasswordStr = v
	blockchainZcashPasswordIntCacher.Clear()
	blockchainZcashPasswordInt64Cacher.Clear()
	blockchainZcashPasswordUintCacher.Clear()
	blockchainZcashPasswordBoolCacher.Clear()
	blockchainZcashPasswordMsCacher.Clear()
}

// --------------------------------------
// FUND2_RPC_ENDPOINT
// --------------------------------------
var (
	fund2RpcEndpointStr = os.Getenv("FUND2_RPC_ENDPOINT")

	fund2RpcEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fund2RpcEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fund2RpcEndpointStr))
		}
		val := int(v)
		return &val
	})
	fund2RpcEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fund2RpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", fund2RpcEndpointStr))
		}
		val := int64(v)
		return &val
	})
	fund2RpcEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(fund2RpcEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", fund2RpcEndpointStr))
		}
		val := uint(v)
		return &val
	})
	fund2RpcEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(fund2RpcEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", fund2RpcEndpointStr))
		}
		return &v
	})
	fund2RpcEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(fund2RpcEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", fund2RpcEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// Fund2RpcEndpoint returns the cached FUND2_RPC_ENDPOINT variable.
func Fund2RpcEndpoint() string {
	return fund2RpcEndpointStr
}

// Fund2RpcEndpointInt returns the cached int of FUND2_RPC_ENDPOINT variable.
func Fund2RpcEndpointInt() int {
	return *((fund2RpcEndpointIntCacher.Get()).(*int))
}

// Fund2RpcEndpointInt64 returns the cached int64 of FUND2_RPC_ENDPOINT variable.
func Fund2RpcEndpointInt64() int64 {
	return *((fund2RpcEndpointInt64Cacher.Get()).(*int64))
}

// Fund2RpcEndpointUint returns the cached uint of FUND2_RPC_ENDPOINT variable.
func Fund2RpcEndpointUint() uint {
	return *((fund2RpcEndpointUintCacher.Get()).(*uint))
}

// Fund2RpcEndpointBool returns the cached bool of FUND2_RPC_ENDPOINT variable.
func Fund2RpcEndpointBool() bool {
	return *((fund2RpcEndpointBoolCacher.Get()).(*bool))
}

// Fund2RpcEndpointMs returns the cached millisecond of FUND2_RPC_ENDPOINT variable.
func Fund2RpcEndpointMs() time.Duration {
	return *((fund2RpcEndpointMsCacher.Get()).(*time.Duration))
}

// SetFund2RpcEndpoint sets the cached value.
func SetFund2RpcEndpoint(v string) {
	fund2RpcEndpointStr = v
	fund2RpcEndpointIntCacher.Clear()
	fund2RpcEndpointInt64Cacher.Clear()
	fund2RpcEndpointUintCacher.Clear()
	fund2RpcEndpointBoolCacher.Clear()
	fund2RpcEndpointMsCacher.Clear()
}

// --------------------------------------
// IOTA_ALL_DEPOSIT_SCAN_INTERVAL
// --------------------------------------
var (
	iotaAllDepositScanIntervalStr = os.Getenv("IOTA_ALL_DEPOSIT_SCAN_INTERVAL")

	iotaAllDepositScanIntervalIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaAllDepositScanIntervalStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaAllDepositScanIntervalStr))
		}
		val := int(v)
		return &val
	})
	iotaAllDepositScanIntervalInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaAllDepositScanIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaAllDepositScanIntervalStr))
		}
		val := int64(v)
		return &val
	})
	iotaAllDepositScanIntervalUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaAllDepositScanIntervalStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaAllDepositScanIntervalStr))
		}
		val := uint(v)
		return &val
	})
	iotaAllDepositScanIntervalBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaAllDepositScanIntervalStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaAllDepositScanIntervalStr))
		}
		return &v
	})
	iotaAllDepositScanIntervalMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaAllDepositScanIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaAllDepositScanIntervalStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaAllDepositScanInterval returns the cached IOTA_ALL_DEPOSIT_SCAN_INTERVAL variable.
func IotaAllDepositScanInterval() string {
	return iotaAllDepositScanIntervalStr
}

// IotaAllDepositScanIntervalInt returns the cached int of IOTA_ALL_DEPOSIT_SCAN_INTERVAL variable.
func IotaAllDepositScanIntervalInt() int {
	return *((iotaAllDepositScanIntervalIntCacher.Get()).(*int))
}

// IotaAllDepositScanIntervalInt64 returns the cached int64 of IOTA_ALL_DEPOSIT_SCAN_INTERVAL variable.
func IotaAllDepositScanIntervalInt64() int64 {
	return *((iotaAllDepositScanIntervalInt64Cacher.Get()).(*int64))
}

// IotaAllDepositScanIntervalUint returns the cached uint of IOTA_ALL_DEPOSIT_SCAN_INTERVAL variable.
func IotaAllDepositScanIntervalUint() uint {
	return *((iotaAllDepositScanIntervalUintCacher.Get()).(*uint))
}

// IotaAllDepositScanIntervalBool returns the cached bool of IOTA_ALL_DEPOSIT_SCAN_INTERVAL variable.
func IotaAllDepositScanIntervalBool() bool {
	return *((iotaAllDepositScanIntervalBoolCacher.Get()).(*bool))
}

// IotaAllDepositScanIntervalMs returns the cached millisecond of IOTA_ALL_DEPOSIT_SCAN_INTERVAL variable.
func IotaAllDepositScanIntervalMs() time.Duration {
	return *((iotaAllDepositScanIntervalMsCacher.Get()).(*time.Duration))
}

// SetIotaAllDepositScanInterval sets the cached value.
func SetIotaAllDepositScanInterval(v string) {
	iotaAllDepositScanIntervalStr = v
	iotaAllDepositScanIntervalIntCacher.Clear()
	iotaAllDepositScanIntervalInt64Cacher.Clear()
	iotaAllDepositScanIntervalUintCacher.Clear()
	iotaAllDepositScanIntervalBoolCacher.Clear()
	iotaAllDepositScanIntervalMsCacher.Clear()
}

// --------------------------------------
// IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD
// --------------------------------------
var (
	iotaAllDepositScanShutdownPeriodStr = os.Getenv("IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD")

	iotaAllDepositScanShutdownPeriodIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaAllDepositScanShutdownPeriodStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaAllDepositScanShutdownPeriodStr))
		}
		val := int(v)
		return &val
	})
	iotaAllDepositScanShutdownPeriodInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaAllDepositScanShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaAllDepositScanShutdownPeriodStr))
		}
		val := int64(v)
		return &val
	})
	iotaAllDepositScanShutdownPeriodUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaAllDepositScanShutdownPeriodStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaAllDepositScanShutdownPeriodStr))
		}
		val := uint(v)
		return &val
	})
	iotaAllDepositScanShutdownPeriodBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaAllDepositScanShutdownPeriodStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaAllDepositScanShutdownPeriodStr))
		}
		return &v
	})
	iotaAllDepositScanShutdownPeriodMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaAllDepositScanShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaAllDepositScanShutdownPeriodStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaAllDepositScanShutdownPeriod returns the cached IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaAllDepositScanShutdownPeriod() string {
	return iotaAllDepositScanShutdownPeriodStr
}

// IotaAllDepositScanShutdownPeriodInt returns the cached int of IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaAllDepositScanShutdownPeriodInt() int {
	return *((iotaAllDepositScanShutdownPeriodIntCacher.Get()).(*int))
}

// IotaAllDepositScanShutdownPeriodInt64 returns the cached int64 of IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaAllDepositScanShutdownPeriodInt64() int64 {
	return *((iotaAllDepositScanShutdownPeriodInt64Cacher.Get()).(*int64))
}

// IotaAllDepositScanShutdownPeriodUint returns the cached uint of IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaAllDepositScanShutdownPeriodUint() uint {
	return *((iotaAllDepositScanShutdownPeriodUintCacher.Get()).(*uint))
}

// IotaAllDepositScanShutdownPeriodBool returns the cached bool of IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaAllDepositScanShutdownPeriodBool() bool {
	return *((iotaAllDepositScanShutdownPeriodBoolCacher.Get()).(*bool))
}

// IotaAllDepositScanShutdownPeriodMs returns the cached millisecond of IOTA_ALL_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaAllDepositScanShutdownPeriodMs() time.Duration {
	return *((iotaAllDepositScanShutdownPeriodMsCacher.Get()).(*time.Duration))
}

// SetIotaAllDepositScanShutdownPeriod sets the cached value.
func SetIotaAllDepositScanShutdownPeriod(v string) {
	iotaAllDepositScanShutdownPeriodStr = v
	iotaAllDepositScanShutdownPeriodIntCacher.Clear()
	iotaAllDepositScanShutdownPeriodInt64Cacher.Clear()
	iotaAllDepositScanShutdownPeriodUintCacher.Clear()
	iotaAllDepositScanShutdownPeriodBoolCacher.Clear()
	iotaAllDepositScanShutdownPeriodMsCacher.Clear()
}

// --------------------------------------
// IOTA_CONFIRM_BUNDLE_INTERVAL
// --------------------------------------
var (
	iotaConfirmBundleIntervalStr = os.Getenv("IOTA_CONFIRM_BUNDLE_INTERVAL")

	iotaConfirmBundleIntervalIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmBundleIntervalStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmBundleIntervalStr))
		}
		val := int(v)
		return &val
	})
	iotaConfirmBundleIntervalInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmBundleIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaConfirmBundleIntervalStr))
		}
		val := int64(v)
		return &val
	})
	iotaConfirmBundleIntervalUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaConfirmBundleIntervalStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmBundleIntervalStr))
		}
		val := uint(v)
		return &val
	})
	iotaConfirmBundleIntervalBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaConfirmBundleIntervalStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaConfirmBundleIntervalStr))
		}
		return &v
	})
	iotaConfirmBundleIntervalMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmBundleIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaConfirmBundleIntervalStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaConfirmBundleInterval returns the cached IOTA_CONFIRM_BUNDLE_INTERVAL variable.
func IotaConfirmBundleInterval() string {
	return iotaConfirmBundleIntervalStr
}

// IotaConfirmBundleIntervalInt returns the cached int of IOTA_CONFIRM_BUNDLE_INTERVAL variable.
func IotaConfirmBundleIntervalInt() int {
	return *((iotaConfirmBundleIntervalIntCacher.Get()).(*int))
}

// IotaConfirmBundleIntervalInt64 returns the cached int64 of IOTA_CONFIRM_BUNDLE_INTERVAL variable.
func IotaConfirmBundleIntervalInt64() int64 {
	return *((iotaConfirmBundleIntervalInt64Cacher.Get()).(*int64))
}

// IotaConfirmBundleIntervalUint returns the cached uint of IOTA_CONFIRM_BUNDLE_INTERVAL variable.
func IotaConfirmBundleIntervalUint() uint {
	return *((iotaConfirmBundleIntervalUintCacher.Get()).(*uint))
}

// IotaConfirmBundleIntervalBool returns the cached bool of IOTA_CONFIRM_BUNDLE_INTERVAL variable.
func IotaConfirmBundleIntervalBool() bool {
	return *((iotaConfirmBundleIntervalBoolCacher.Get()).(*bool))
}

// IotaConfirmBundleIntervalMs returns the cached millisecond of IOTA_CONFIRM_BUNDLE_INTERVAL variable.
func IotaConfirmBundleIntervalMs() time.Duration {
	return *((iotaConfirmBundleIntervalMsCacher.Get()).(*time.Duration))
}

// SetIotaConfirmBundleInterval sets the cached value.
func SetIotaConfirmBundleInterval(v string) {
	iotaConfirmBundleIntervalStr = v
	iotaConfirmBundleIntervalIntCacher.Clear()
	iotaConfirmBundleIntervalInt64Cacher.Clear()
	iotaConfirmBundleIntervalUintCacher.Clear()
	iotaConfirmBundleIntervalBoolCacher.Clear()
	iotaConfirmBundleIntervalMsCacher.Clear()
}

// --------------------------------------
// IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD
// --------------------------------------
var (
	iotaConfirmBundleShutdownPeriodStr = os.Getenv("IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD")

	iotaConfirmBundleShutdownPeriodIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmBundleShutdownPeriodStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmBundleShutdownPeriodStr))
		}
		val := int(v)
		return &val
	})
	iotaConfirmBundleShutdownPeriodInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmBundleShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaConfirmBundleShutdownPeriodStr))
		}
		val := int64(v)
		return &val
	})
	iotaConfirmBundleShutdownPeriodUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaConfirmBundleShutdownPeriodStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmBundleShutdownPeriodStr))
		}
		val := uint(v)
		return &val
	})
	iotaConfirmBundleShutdownPeriodBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaConfirmBundleShutdownPeriodStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaConfirmBundleShutdownPeriodStr))
		}
		return &v
	})
	iotaConfirmBundleShutdownPeriodMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmBundleShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaConfirmBundleShutdownPeriodStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaConfirmBundleShutdownPeriod returns the cached IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD variable.
func IotaConfirmBundleShutdownPeriod() string {
	return iotaConfirmBundleShutdownPeriodStr
}

// IotaConfirmBundleShutdownPeriodInt returns the cached int of IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD variable.
func IotaConfirmBundleShutdownPeriodInt() int {
	return *((iotaConfirmBundleShutdownPeriodIntCacher.Get()).(*int))
}

// IotaConfirmBundleShutdownPeriodInt64 returns the cached int64 of IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD variable.
func IotaConfirmBundleShutdownPeriodInt64() int64 {
	return *((iotaConfirmBundleShutdownPeriodInt64Cacher.Get()).(*int64))
}

// IotaConfirmBundleShutdownPeriodUint returns the cached uint of IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD variable.
func IotaConfirmBundleShutdownPeriodUint() uint {
	return *((iotaConfirmBundleShutdownPeriodUintCacher.Get()).(*uint))
}

// IotaConfirmBundleShutdownPeriodBool returns the cached bool of IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD variable.
func IotaConfirmBundleShutdownPeriodBool() bool {
	return *((iotaConfirmBundleShutdownPeriodBoolCacher.Get()).(*bool))
}

// IotaConfirmBundleShutdownPeriodMs returns the cached millisecond of IOTA_CONFIRM_BUNDLE_SHUTDOWN_PERIOD variable.
func IotaConfirmBundleShutdownPeriodMs() time.Duration {
	return *((iotaConfirmBundleShutdownPeriodMsCacher.Get()).(*time.Duration))
}

// SetIotaConfirmBundleShutdownPeriod sets the cached value.
func SetIotaConfirmBundleShutdownPeriod(v string) {
	iotaConfirmBundleShutdownPeriodStr = v
	iotaConfirmBundleShutdownPeriodIntCacher.Clear()
	iotaConfirmBundleShutdownPeriodInt64Cacher.Clear()
	iotaConfirmBundleShutdownPeriodUintCacher.Clear()
	iotaConfirmBundleShutdownPeriodBoolCacher.Clear()
	iotaConfirmBundleShutdownPeriodMsCacher.Clear()
}

// --------------------------------------
// IOTA_CONFIRM_RECEIVING_INTERVAL
// --------------------------------------
var (
	iotaConfirmReceivingIntervalStr = os.Getenv("IOTA_CONFIRM_RECEIVING_INTERVAL")

	iotaConfirmReceivingIntervalIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmReceivingIntervalStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmReceivingIntervalStr))
		}
		val := int(v)
		return &val
	})
	iotaConfirmReceivingIntervalInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmReceivingIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaConfirmReceivingIntervalStr))
		}
		val := int64(v)
		return &val
	})
	iotaConfirmReceivingIntervalUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaConfirmReceivingIntervalStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmReceivingIntervalStr))
		}
		val := uint(v)
		return &val
	})
	iotaConfirmReceivingIntervalBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaConfirmReceivingIntervalStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaConfirmReceivingIntervalStr))
		}
		return &v
	})
	iotaConfirmReceivingIntervalMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmReceivingIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaConfirmReceivingIntervalStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaConfirmReceivingInterval returns the cached IOTA_CONFIRM_RECEIVING_INTERVAL variable.
func IotaConfirmReceivingInterval() string {
	return iotaConfirmReceivingIntervalStr
}

// IotaConfirmReceivingIntervalInt returns the cached int of IOTA_CONFIRM_RECEIVING_INTERVAL variable.
func IotaConfirmReceivingIntervalInt() int {
	return *((iotaConfirmReceivingIntervalIntCacher.Get()).(*int))
}

// IotaConfirmReceivingIntervalInt64 returns the cached int64 of IOTA_CONFIRM_RECEIVING_INTERVAL variable.
func IotaConfirmReceivingIntervalInt64() int64 {
	return *((iotaConfirmReceivingIntervalInt64Cacher.Get()).(*int64))
}

// IotaConfirmReceivingIntervalUint returns the cached uint of IOTA_CONFIRM_RECEIVING_INTERVAL variable.
func IotaConfirmReceivingIntervalUint() uint {
	return *((iotaConfirmReceivingIntervalUintCacher.Get()).(*uint))
}

// IotaConfirmReceivingIntervalBool returns the cached bool of IOTA_CONFIRM_RECEIVING_INTERVAL variable.
func IotaConfirmReceivingIntervalBool() bool {
	return *((iotaConfirmReceivingIntervalBoolCacher.Get()).(*bool))
}

// IotaConfirmReceivingIntervalMs returns the cached millisecond of IOTA_CONFIRM_RECEIVING_INTERVAL variable.
func IotaConfirmReceivingIntervalMs() time.Duration {
	return *((iotaConfirmReceivingIntervalMsCacher.Get()).(*time.Duration))
}

// SetIotaConfirmReceivingInterval sets the cached value.
func SetIotaConfirmReceivingInterval(v string) {
	iotaConfirmReceivingIntervalStr = v
	iotaConfirmReceivingIntervalIntCacher.Clear()
	iotaConfirmReceivingIntervalInt64Cacher.Clear()
	iotaConfirmReceivingIntervalUintCacher.Clear()
	iotaConfirmReceivingIntervalBoolCacher.Clear()
	iotaConfirmReceivingIntervalMsCacher.Clear()
}

// --------------------------------------
// IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD
// --------------------------------------
var (
	iotaConfirmReceivingShutdownPeriodStr = os.Getenv("IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD")

	iotaConfirmReceivingShutdownPeriodIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmReceivingShutdownPeriodStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmReceivingShutdownPeriodStr))
		}
		val := int(v)
		return &val
	})
	iotaConfirmReceivingShutdownPeriodInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmReceivingShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaConfirmReceivingShutdownPeriodStr))
		}
		val := int64(v)
		return &val
	})
	iotaConfirmReceivingShutdownPeriodUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaConfirmReceivingShutdownPeriodStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaConfirmReceivingShutdownPeriodStr))
		}
		val := uint(v)
		return &val
	})
	iotaConfirmReceivingShutdownPeriodBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaConfirmReceivingShutdownPeriodStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaConfirmReceivingShutdownPeriodStr))
		}
		return &v
	})
	iotaConfirmReceivingShutdownPeriodMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaConfirmReceivingShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaConfirmReceivingShutdownPeriodStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaConfirmReceivingShutdownPeriod returns the cached IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD variable.
func IotaConfirmReceivingShutdownPeriod() string {
	return iotaConfirmReceivingShutdownPeriodStr
}

// IotaConfirmReceivingShutdownPeriodInt returns the cached int of IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD variable.
func IotaConfirmReceivingShutdownPeriodInt() int {
	return *((iotaConfirmReceivingShutdownPeriodIntCacher.Get()).(*int))
}

// IotaConfirmReceivingShutdownPeriodInt64 returns the cached int64 of IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD variable.
func IotaConfirmReceivingShutdownPeriodInt64() int64 {
	return *((iotaConfirmReceivingShutdownPeriodInt64Cacher.Get()).(*int64))
}

// IotaConfirmReceivingShutdownPeriodUint returns the cached uint of IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD variable.
func IotaConfirmReceivingShutdownPeriodUint() uint {
	return *((iotaConfirmReceivingShutdownPeriodUintCacher.Get()).(*uint))
}

// IotaConfirmReceivingShutdownPeriodBool returns the cached bool of IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD variable.
func IotaConfirmReceivingShutdownPeriodBool() bool {
	return *((iotaConfirmReceivingShutdownPeriodBoolCacher.Get()).(*bool))
}

// IotaConfirmReceivingShutdownPeriodMs returns the cached millisecond of IOTA_CONFIRM_RECEIVING_SHUTDOWN_PERIOD variable.
func IotaConfirmReceivingShutdownPeriodMs() time.Duration {
	return *((iotaConfirmReceivingShutdownPeriodMsCacher.Get()).(*time.Duration))
}

// SetIotaConfirmReceivingShutdownPeriod sets the cached value.
func SetIotaConfirmReceivingShutdownPeriod(v string) {
	iotaConfirmReceivingShutdownPeriodStr = v
	iotaConfirmReceivingShutdownPeriodIntCacher.Clear()
	iotaConfirmReceivingShutdownPeriodInt64Cacher.Clear()
	iotaConfirmReceivingShutdownPeriodUintCacher.Clear()
	iotaConfirmReceivingShutdownPeriodBoolCacher.Clear()
	iotaConfirmReceivingShutdownPeriodMsCacher.Clear()
}

// --------------------------------------
// IOTA_FULLNODE_SYNC_REQUIREMENT
// --------------------------------------
var (
	iotaFullnodeSyncRequirementStr = os.Getenv("IOTA_FULLNODE_SYNC_REQUIREMENT")

	iotaFullnodeSyncRequirementIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaFullnodeSyncRequirementStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaFullnodeSyncRequirementStr))
		}
		val := int(v)
		return &val
	})
	iotaFullnodeSyncRequirementInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaFullnodeSyncRequirementStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaFullnodeSyncRequirementStr))
		}
		val := int64(v)
		return &val
	})
	iotaFullnodeSyncRequirementUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaFullnodeSyncRequirementStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaFullnodeSyncRequirementStr))
		}
		val := uint(v)
		return &val
	})
	iotaFullnodeSyncRequirementBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaFullnodeSyncRequirementStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaFullnodeSyncRequirementStr))
		}
		return &v
	})
	iotaFullnodeSyncRequirementMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaFullnodeSyncRequirementStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaFullnodeSyncRequirementStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaFullnodeSyncRequirement returns the cached IOTA_FULLNODE_SYNC_REQUIREMENT variable.
func IotaFullnodeSyncRequirement() string {
	return iotaFullnodeSyncRequirementStr
}

// IotaFullnodeSyncRequirementInt returns the cached int of IOTA_FULLNODE_SYNC_REQUIREMENT variable.
func IotaFullnodeSyncRequirementInt() int {
	return *((iotaFullnodeSyncRequirementIntCacher.Get()).(*int))
}

// IotaFullnodeSyncRequirementInt64 returns the cached int64 of IOTA_FULLNODE_SYNC_REQUIREMENT variable.
func IotaFullnodeSyncRequirementInt64() int64 {
	return *((iotaFullnodeSyncRequirementInt64Cacher.Get()).(*int64))
}

// IotaFullnodeSyncRequirementUint returns the cached uint of IOTA_FULLNODE_SYNC_REQUIREMENT variable.
func IotaFullnodeSyncRequirementUint() uint {
	return *((iotaFullnodeSyncRequirementUintCacher.Get()).(*uint))
}

// IotaFullnodeSyncRequirementBool returns the cached bool of IOTA_FULLNODE_SYNC_REQUIREMENT variable.
func IotaFullnodeSyncRequirementBool() bool {
	return *((iotaFullnodeSyncRequirementBoolCacher.Get()).(*bool))
}

// IotaFullnodeSyncRequirementMs returns the cached millisecond of IOTA_FULLNODE_SYNC_REQUIREMENT variable.
func IotaFullnodeSyncRequirementMs() time.Duration {
	return *((iotaFullnodeSyncRequirementMsCacher.Get()).(*time.Duration))
}

// SetIotaFullnodeSyncRequirement sets the cached value.
func SetIotaFullnodeSyncRequirement(v string) {
	iotaFullnodeSyncRequirementStr = v
	iotaFullnodeSyncRequirementIntCacher.Clear()
	iotaFullnodeSyncRequirementInt64Cacher.Clear()
	iotaFullnodeSyncRequirementUintCacher.Clear()
	iotaFullnodeSyncRequirementBoolCacher.Clear()
	iotaFullnodeSyncRequirementMsCacher.Clear()
}

// --------------------------------------
// IOTA_INFO_CACHE_PERIOD
// --------------------------------------
var (
	iotaInfoCachePeriodStr = os.Getenv("IOTA_INFO_CACHE_PERIOD")

	iotaInfoCachePeriodIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaInfoCachePeriodStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaInfoCachePeriodStr))
		}
		val := int(v)
		return &val
	})
	iotaInfoCachePeriodInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaInfoCachePeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaInfoCachePeriodStr))
		}
		val := int64(v)
		return &val
	})
	iotaInfoCachePeriodUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaInfoCachePeriodStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaInfoCachePeriodStr))
		}
		val := uint(v)
		return &val
	})
	iotaInfoCachePeriodBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaInfoCachePeriodStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaInfoCachePeriodStr))
		}
		return &v
	})
	iotaInfoCachePeriodMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaInfoCachePeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaInfoCachePeriodStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaInfoCachePeriod returns the cached IOTA_INFO_CACHE_PERIOD variable.
func IotaInfoCachePeriod() string {
	return iotaInfoCachePeriodStr
}

// IotaInfoCachePeriodInt returns the cached int of IOTA_INFO_CACHE_PERIOD variable.
func IotaInfoCachePeriodInt() int {
	return *((iotaInfoCachePeriodIntCacher.Get()).(*int))
}

// IotaInfoCachePeriodInt64 returns the cached int64 of IOTA_INFO_CACHE_PERIOD variable.
func IotaInfoCachePeriodInt64() int64 {
	return *((iotaInfoCachePeriodInt64Cacher.Get()).(*int64))
}

// IotaInfoCachePeriodUint returns the cached uint of IOTA_INFO_CACHE_PERIOD variable.
func IotaInfoCachePeriodUint() uint {
	return *((iotaInfoCachePeriodUintCacher.Get()).(*uint))
}

// IotaInfoCachePeriodBool returns the cached bool of IOTA_INFO_CACHE_PERIOD variable.
func IotaInfoCachePeriodBool() bool {
	return *((iotaInfoCachePeriodBoolCacher.Get()).(*bool))
}

// IotaInfoCachePeriodMs returns the cached millisecond of IOTA_INFO_CACHE_PERIOD variable.
func IotaInfoCachePeriodMs() time.Duration {
	return *((iotaInfoCachePeriodMsCacher.Get()).(*time.Duration))
}

// SetIotaInfoCachePeriod sets the cached value.
func SetIotaInfoCachePeriod(v string) {
	iotaInfoCachePeriodStr = v
	iotaInfoCachePeriodIntCacher.Clear()
	iotaInfoCachePeriodInt64Cacher.Clear()
	iotaInfoCachePeriodUintCacher.Clear()
	iotaInfoCachePeriodBoolCacher.Clear()
	iotaInfoCachePeriodMsCacher.Clear()
}

// --------------------------------------
// IOTA_USER_DEPOSIT_SCAN_DURATION
// --------------------------------------
var (
	iotaUserDepositScanDurationStr = os.Getenv("IOTA_USER_DEPOSIT_SCAN_DURATION")

	iotaUserDepositScanDurationIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanDurationStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaUserDepositScanDurationStr))
		}
		val := int(v)
		return &val
	})
	iotaUserDepositScanDurationInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanDurationStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaUserDepositScanDurationStr))
		}
		val := int64(v)
		return &val
	})
	iotaUserDepositScanDurationUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaUserDepositScanDurationStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaUserDepositScanDurationStr))
		}
		val := uint(v)
		return &val
	})
	iotaUserDepositScanDurationBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaUserDepositScanDurationStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaUserDepositScanDurationStr))
		}
		return &v
	})
	iotaUserDepositScanDurationMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanDurationStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaUserDepositScanDurationStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaUserDepositScanDuration returns the cached IOTA_USER_DEPOSIT_SCAN_DURATION variable.
func IotaUserDepositScanDuration() string {
	return iotaUserDepositScanDurationStr
}

// IotaUserDepositScanDurationInt returns the cached int of IOTA_USER_DEPOSIT_SCAN_DURATION variable.
func IotaUserDepositScanDurationInt() int {
	return *((iotaUserDepositScanDurationIntCacher.Get()).(*int))
}

// IotaUserDepositScanDurationInt64 returns the cached int64 of IOTA_USER_DEPOSIT_SCAN_DURATION variable.
func IotaUserDepositScanDurationInt64() int64 {
	return *((iotaUserDepositScanDurationInt64Cacher.Get()).(*int64))
}

// IotaUserDepositScanDurationUint returns the cached uint of IOTA_USER_DEPOSIT_SCAN_DURATION variable.
func IotaUserDepositScanDurationUint() uint {
	return *((iotaUserDepositScanDurationUintCacher.Get()).(*uint))
}

// IotaUserDepositScanDurationBool returns the cached bool of IOTA_USER_DEPOSIT_SCAN_DURATION variable.
func IotaUserDepositScanDurationBool() bool {
	return *((iotaUserDepositScanDurationBoolCacher.Get()).(*bool))
}

// IotaUserDepositScanDurationMs returns the cached millisecond of IOTA_USER_DEPOSIT_SCAN_DURATION variable.
func IotaUserDepositScanDurationMs() time.Duration {
	return *((iotaUserDepositScanDurationMsCacher.Get()).(*time.Duration))
}

// SetIotaUserDepositScanDuration sets the cached value.
func SetIotaUserDepositScanDuration(v string) {
	iotaUserDepositScanDurationStr = v
	iotaUserDepositScanDurationIntCacher.Clear()
	iotaUserDepositScanDurationInt64Cacher.Clear()
	iotaUserDepositScanDurationUintCacher.Clear()
	iotaUserDepositScanDurationBoolCacher.Clear()
	iotaUserDepositScanDurationMsCacher.Clear()
}

// --------------------------------------
// IOTA_USER_DEPOSIT_SCAN_INTERVAL
// --------------------------------------
var (
	iotaUserDepositScanIntervalStr = os.Getenv("IOTA_USER_DEPOSIT_SCAN_INTERVAL")

	iotaUserDepositScanIntervalIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanIntervalStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaUserDepositScanIntervalStr))
		}
		val := int(v)
		return &val
	})
	iotaUserDepositScanIntervalInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaUserDepositScanIntervalStr))
		}
		val := int64(v)
		return &val
	})
	iotaUserDepositScanIntervalUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaUserDepositScanIntervalStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaUserDepositScanIntervalStr))
		}
		val := uint(v)
		return &val
	})
	iotaUserDepositScanIntervalBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaUserDepositScanIntervalStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaUserDepositScanIntervalStr))
		}
		return &v
	})
	iotaUserDepositScanIntervalMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanIntervalStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaUserDepositScanIntervalStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaUserDepositScanInterval returns the cached IOTA_USER_DEPOSIT_SCAN_INTERVAL variable.
func IotaUserDepositScanInterval() string {
	return iotaUserDepositScanIntervalStr
}

// IotaUserDepositScanIntervalInt returns the cached int of IOTA_USER_DEPOSIT_SCAN_INTERVAL variable.
func IotaUserDepositScanIntervalInt() int {
	return *((iotaUserDepositScanIntervalIntCacher.Get()).(*int))
}

// IotaUserDepositScanIntervalInt64 returns the cached int64 of IOTA_USER_DEPOSIT_SCAN_INTERVAL variable.
func IotaUserDepositScanIntervalInt64() int64 {
	return *((iotaUserDepositScanIntervalInt64Cacher.Get()).(*int64))
}

// IotaUserDepositScanIntervalUint returns the cached uint of IOTA_USER_DEPOSIT_SCAN_INTERVAL variable.
func IotaUserDepositScanIntervalUint() uint {
	return *((iotaUserDepositScanIntervalUintCacher.Get()).(*uint))
}

// IotaUserDepositScanIntervalBool returns the cached bool of IOTA_USER_DEPOSIT_SCAN_INTERVAL variable.
func IotaUserDepositScanIntervalBool() bool {
	return *((iotaUserDepositScanIntervalBoolCacher.Get()).(*bool))
}

// IotaUserDepositScanIntervalMs returns the cached millisecond of IOTA_USER_DEPOSIT_SCAN_INTERVAL variable.
func IotaUserDepositScanIntervalMs() time.Duration {
	return *((iotaUserDepositScanIntervalMsCacher.Get()).(*time.Duration))
}

// SetIotaUserDepositScanInterval sets the cached value.
func SetIotaUserDepositScanInterval(v string) {
	iotaUserDepositScanIntervalStr = v
	iotaUserDepositScanIntervalIntCacher.Clear()
	iotaUserDepositScanIntervalInt64Cacher.Clear()
	iotaUserDepositScanIntervalUintCacher.Clear()
	iotaUserDepositScanIntervalBoolCacher.Clear()
	iotaUserDepositScanIntervalMsCacher.Clear()
}

// --------------------------------------
// IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD
// --------------------------------------
var (
	iotaUserDepositScanShutdownPeriodStr = os.Getenv("IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD")

	iotaUserDepositScanShutdownPeriodIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanShutdownPeriodStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaUserDepositScanShutdownPeriodStr))
		}
		val := int(v)
		return &val
	})
	iotaUserDepositScanShutdownPeriodInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", iotaUserDepositScanShutdownPeriodStr))
		}
		val := int64(v)
		return &val
	})
	iotaUserDepositScanShutdownPeriodUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(iotaUserDepositScanShutdownPeriodStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", iotaUserDepositScanShutdownPeriodStr))
		}
		val := uint(v)
		return &val
	})
	iotaUserDepositScanShutdownPeriodBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(iotaUserDepositScanShutdownPeriodStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", iotaUserDepositScanShutdownPeriodStr))
		}
		return &v
	})
	iotaUserDepositScanShutdownPeriodMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(iotaUserDepositScanShutdownPeriodStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", iotaUserDepositScanShutdownPeriodStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// IotaUserDepositScanShutdownPeriod returns the cached IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaUserDepositScanShutdownPeriod() string {
	return iotaUserDepositScanShutdownPeriodStr
}

// IotaUserDepositScanShutdownPeriodInt returns the cached int of IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaUserDepositScanShutdownPeriodInt() int {
	return *((iotaUserDepositScanShutdownPeriodIntCacher.Get()).(*int))
}

// IotaUserDepositScanShutdownPeriodInt64 returns the cached int64 of IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaUserDepositScanShutdownPeriodInt64() int64 {
	return *((iotaUserDepositScanShutdownPeriodInt64Cacher.Get()).(*int64))
}

// IotaUserDepositScanShutdownPeriodUint returns the cached uint of IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaUserDepositScanShutdownPeriodUint() uint {
	return *((iotaUserDepositScanShutdownPeriodUintCacher.Get()).(*uint))
}

// IotaUserDepositScanShutdownPeriodBool returns the cached bool of IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaUserDepositScanShutdownPeriodBool() bool {
	return *((iotaUserDepositScanShutdownPeriodBoolCacher.Get()).(*bool))
}

// IotaUserDepositScanShutdownPeriodMs returns the cached millisecond of IOTA_USER_DEPOSIT_SCAN_SHUTDOWN_PERIOD variable.
func IotaUserDepositScanShutdownPeriodMs() time.Duration {
	return *((iotaUserDepositScanShutdownPeriodMsCacher.Get()).(*time.Duration))
}

// SetIotaUserDepositScanShutdownPeriod sets the cached value.
func SetIotaUserDepositScanShutdownPeriod(v string) {
	iotaUserDepositScanShutdownPeriodStr = v
	iotaUserDepositScanShutdownPeriodIntCacher.Clear()
	iotaUserDepositScanShutdownPeriodInt64Cacher.Clear()
	iotaUserDepositScanShutdownPeriodUintCacher.Clear()
	iotaUserDepositScanShutdownPeriodBoolCacher.Clear()
	iotaUserDepositScanShutdownPeriodMsCacher.Clear()
}

// --------------------------------------
// OFFLINE_WALLET_ENDPOINT
// --------------------------------------
var (
	offlineWalletEndpointStr = os.Getenv("OFFLINE_WALLET_ENDPOINT")

	offlineWalletEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", offlineWalletEndpointStr))
		}
		val := int(v)
		return &val
	})
	offlineWalletEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", offlineWalletEndpointStr))
		}
		val := int64(v)
		return &val
	})
	offlineWalletEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(offlineWalletEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", offlineWalletEndpointStr))
		}
		val := uint(v)
		return &val
	})
	offlineWalletEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(offlineWalletEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", offlineWalletEndpointStr))
		}
		return &v
	})
	offlineWalletEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", offlineWalletEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// OfflineWalletEndpoint returns the cached OFFLINE_WALLET_ENDPOINT variable.
func OfflineWalletEndpoint() string {
	return offlineWalletEndpointStr
}

// OfflineWalletEndpointInt returns the cached int of OFFLINE_WALLET_ENDPOINT variable.
func OfflineWalletEndpointInt() int {
	return *((offlineWalletEndpointIntCacher.Get()).(*int))
}

// OfflineWalletEndpointInt64 returns the cached int64 of OFFLINE_WALLET_ENDPOINT variable.
func OfflineWalletEndpointInt64() int64 {
	return *((offlineWalletEndpointInt64Cacher.Get()).(*int64))
}

// OfflineWalletEndpointUint returns the cached uint of OFFLINE_WALLET_ENDPOINT variable.
func OfflineWalletEndpointUint() uint {
	return *((offlineWalletEndpointUintCacher.Get()).(*uint))
}

// OfflineWalletEndpointBool returns the cached bool of OFFLINE_WALLET_ENDPOINT variable.
func OfflineWalletEndpointBool() bool {
	return *((offlineWalletEndpointBoolCacher.Get()).(*bool))
}

// OfflineWalletEndpointMs returns the cached millisecond of OFFLINE_WALLET_ENDPOINT variable.
func OfflineWalletEndpointMs() time.Duration {
	return *((offlineWalletEndpointMsCacher.Get()).(*time.Duration))
}

// SetOfflineWalletEndpoint sets the cached value.
func SetOfflineWalletEndpoint(v string) {
	offlineWalletEndpointStr = v
	offlineWalletEndpointIntCacher.Clear()
	offlineWalletEndpointInt64Cacher.Clear()
	offlineWalletEndpointUintCacher.Clear()
	offlineWalletEndpointBoolCacher.Clear()
	offlineWalletEndpointMsCacher.Clear()
}

// --------------------------------------
// OFFLINE_WALLET_LISTEN_ADDRESS
// --------------------------------------
var (
	offlineWalletListenAddressStr = os.Getenv("OFFLINE_WALLET_LISTEN_ADDRESS")

	offlineWalletListenAddressIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletListenAddressStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", offlineWalletListenAddressStr))
		}
		val := int(v)
		return &val
	})
	offlineWalletListenAddressInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", offlineWalletListenAddressStr))
		}
		val := int64(v)
		return &val
	})
	offlineWalletListenAddressUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(offlineWalletListenAddressStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", offlineWalletListenAddressStr))
		}
		val := uint(v)
		return &val
	})
	offlineWalletListenAddressBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(offlineWalletListenAddressStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", offlineWalletListenAddressStr))
		}
		return &v
	})
	offlineWalletListenAddressMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletListenAddressStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", offlineWalletListenAddressStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// OfflineWalletListenAddress returns the cached OFFLINE_WALLET_LISTEN_ADDRESS variable.
func OfflineWalletListenAddress() string {
	return offlineWalletListenAddressStr
}

// OfflineWalletListenAddressInt returns the cached int of OFFLINE_WALLET_LISTEN_ADDRESS variable.
func OfflineWalletListenAddressInt() int {
	return *((offlineWalletListenAddressIntCacher.Get()).(*int))
}

// OfflineWalletListenAddressInt64 returns the cached int64 of OFFLINE_WALLET_LISTEN_ADDRESS variable.
func OfflineWalletListenAddressInt64() int64 {
	return *((offlineWalletListenAddressInt64Cacher.Get()).(*int64))
}

// OfflineWalletListenAddressUint returns the cached uint of OFFLINE_WALLET_LISTEN_ADDRESS variable.
func OfflineWalletListenAddressUint() uint {
	return *((offlineWalletListenAddressUintCacher.Get()).(*uint))
}

// OfflineWalletListenAddressBool returns the cached bool of OFFLINE_WALLET_LISTEN_ADDRESS variable.
func OfflineWalletListenAddressBool() bool {
	return *((offlineWalletListenAddressBoolCacher.Get()).(*bool))
}

// OfflineWalletListenAddressMs returns the cached millisecond of OFFLINE_WALLET_LISTEN_ADDRESS variable.
func OfflineWalletListenAddressMs() time.Duration {
	return *((offlineWalletListenAddressMsCacher.Get()).(*time.Duration))
}

// SetOfflineWalletListenAddress sets the cached value.
func SetOfflineWalletListenAddress(v string) {
	offlineWalletListenAddressStr = v
	offlineWalletListenAddressIntCacher.Clear()
	offlineWalletListenAddressInt64Cacher.Clear()
	offlineWalletListenAddressUintCacher.Clear()
	offlineWalletListenAddressBoolCacher.Clear()
	offlineWalletListenAddressMsCacher.Clear()
}

// --------------------------------------
// OFFLINE_WALLET_SERVICE_USER
// --------------------------------------
var (
	offlineWalletServiceUserStr = os.Getenv("OFFLINE_WALLET_SERVICE_USER")

	offlineWalletServiceUserIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletServiceUserStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", offlineWalletServiceUserStr))
		}
		val := int(v)
		return &val
	})
	offlineWalletServiceUserInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletServiceUserStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", offlineWalletServiceUserStr))
		}
		val := int64(v)
		return &val
	})
	offlineWalletServiceUserUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(offlineWalletServiceUserStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", offlineWalletServiceUserStr))
		}
		val := uint(v)
		return &val
	})
	offlineWalletServiceUserBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(offlineWalletServiceUserStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", offlineWalletServiceUserStr))
		}
		return &v
	})
	offlineWalletServiceUserMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(offlineWalletServiceUserStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", offlineWalletServiceUserStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// OfflineWalletServiceUser returns the cached OFFLINE_WALLET_SERVICE_USER variable.
func OfflineWalletServiceUser() string {
	return offlineWalletServiceUserStr
}

// OfflineWalletServiceUserInt returns the cached int of OFFLINE_WALLET_SERVICE_USER variable.
func OfflineWalletServiceUserInt() int {
	return *((offlineWalletServiceUserIntCacher.Get()).(*int))
}

// OfflineWalletServiceUserInt64 returns the cached int64 of OFFLINE_WALLET_SERVICE_USER variable.
func OfflineWalletServiceUserInt64() int64 {
	return *((offlineWalletServiceUserInt64Cacher.Get()).(*int64))
}

// OfflineWalletServiceUserUint returns the cached uint of OFFLINE_WALLET_SERVICE_USER variable.
func OfflineWalletServiceUserUint() uint {
	return *((offlineWalletServiceUserUintCacher.Get()).(*uint))
}

// OfflineWalletServiceUserBool returns the cached bool of OFFLINE_WALLET_SERVICE_USER variable.
func OfflineWalletServiceUserBool() bool {
	return *((offlineWalletServiceUserBoolCacher.Get()).(*bool))
}

// OfflineWalletServiceUserMs returns the cached millisecond of OFFLINE_WALLET_SERVICE_USER variable.
func OfflineWalletServiceUserMs() time.Duration {
	return *((offlineWalletServiceUserMsCacher.Get()).(*time.Duration))
}

// SetOfflineWalletServiceUser sets the cached value.
func SetOfflineWalletServiceUser(v string) {
	offlineWalletServiceUserStr = v
	offlineWalletServiceUserIntCacher.Clear()
	offlineWalletServiceUserInt64Cacher.Clear()
	offlineWalletServiceUserUintCacher.Clear()
	offlineWalletServiceUserBoolCacher.Clear()
	offlineWalletServiceUserMsCacher.Clear()
}

// --------------------------------------
// MONERO_WALLET_ENDPOINT
// --------------------------------------
var (
	moneroWalletEndpointStr = os.Getenv("MONERO_WALLET_ENDPOINT")

	moneroWalletEndpointIntCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(moneroWalletEndpointStr, 0, 0)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", moneroWalletEndpointStr))
		}
		val := int(v)
		return &val
	})
	moneroWalletEndpointInt64Cacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(moneroWalletEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse int64 for env %s", moneroWalletEndpointStr))
		}
		val := int64(v)
		return &val
	})
	moneroWalletEndpointUintCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseUint(moneroWalletEndpointStr, 0, 32)
		if err != nil {
			panic(fmt.Errorf("failed to parse int for env %s", moneroWalletEndpointStr))
		}
		val := uint(v)
		return &val
	})
	moneroWalletEndpointBoolCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseBool(moneroWalletEndpointStr)
		if err != nil {
			panic(fmt.Errorf("failed to parse bool for env %s", moneroWalletEndpointStr))
		}
		return &v
	})
	moneroWalletEndpointMsCacher = cacher.NewConst(func() interface{} {
		v, err := strconv.ParseInt(moneroWalletEndpointStr, 0, 64)
		if err != nil {
			panic(fmt.Errorf("failed to parse time for env %s", moneroWalletEndpointStr))
		}

		val := time.Millisecond * time.Duration(v)
		return &val
	})
)

// MoneroWalletEndpoint returns the cached MONERO_WALLET_ENDPOINT variable.
func MoneroWalletEndpoint() string {
	return moneroWalletEndpointStr
}

// MoneroWalletEndpointInt returns the cached int of MONERO_WALLET_ENDPOINT variable.
func MoneroWalletEndpointInt() int {
	return *((moneroWalletEndpointIntCacher.Get()).(*int))
}

// MoneroWalletEndpointInt64 returns the cached int64 of MONERO_WALLET_ENDPOINT variable.
func MoneroWalletEndpointInt64() int64 {
	return *((moneroWalletEndpointInt64Cacher.Get()).(*int64))
}

// MoneroWalletEndpointUint returns the cached uint of MONERO_WALLET_ENDPOINT variable.
func MoneroWalletEndpointUint() uint {
	return *((moneroWalletEndpointUintCacher.Get()).(*uint))
}

// MoneroWalletEndpointBool returns the cached bool of MONERO_WALLET_ENDPOINT variable.
func MoneroWalletEndpointBool() bool {
	return *((moneroWalletEndpointBoolCacher.Get()).(*bool))
}

// MoneroWalletEndpointMs returns the cached millisecond of MONERO_WALLET_ENDPOINT variable.
func MoneroWalletEndpointMs() time.Duration {
	return *((moneroWalletEndpointMsCacher.Get()).(*time.Duration))
}

// SetMoneroWalletEndpoint sets the cached value.
func SetMoneroWalletEndpoint(v string) {
	moneroWalletEndpointStr = v
	moneroWalletEndpointIntCacher.Clear()
	moneroWalletEndpointInt64Cacher.Clear()
	moneroWalletEndpointUintCacher.Clear()
	moneroWalletEndpointBoolCacher.Clear()
	moneroWalletEndpointMsCacher.Clear()
}
